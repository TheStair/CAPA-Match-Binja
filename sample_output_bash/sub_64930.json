{
  "address": "0x64930",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "call    sub_64780",
    "mov     r13d, dword [rel data_167f80]",
    "mov     rbx, rax",
    "cmp     r13d, 0x3d",
    "je      0x64970",
    "cmp     dword [rel data_167f84], 0x5",
    "jne     0x64c2e",
    "cmp     r13d, 0xb",
    "je      0x64970",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133048]  {\"attempted assignment to non-vari\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "cmp     r13d, 0xb",
    "jne     0x6498e",
    "add     rsp, 0x18",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     r15, qword [rel data_167f98]",
    "test    r15, r15",
    "je      0x64c5c",
    "mov     qword [rbp-0x38], rbx",
    "mov     r12d, dword [rel data_167f60]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133070]  {\"syntax error in variable assignm\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "mov     rdi, r15",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x64c77",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r15",
    "mov     rdi, r14",
    "call    __strcpy_chk",
    "mov     r15, qword [rel data_1598f8]",
    "call    sub_62f60",
    "call    sub_64930",
    "mov     rbx, rax",
    "cmp     r13d, 0xb",
    "jne     0x64a50",
    "mov     rdi, rbx",
    "call    itos",
    "mov     r12, rax",
    "mov     eax, dword [rel data_16806c]",
    "test    eax, eax",
    "jne     0x64a7d",
    "cmp     r12d, 0x2f",
    "sete    dl",
    "cmp     r12d, 0x25",
    "sete    al",
    "or      al, dl",
    "je      0x64a01",
    "mov     rax, qword [rel data_1598e0]",
    "mov     r13, qword [rel data_167f98]",
    "test    rax, rax",
    "je      0x64a95",
    "cmp     r15, 0xffffffffffffffff",
    "je      0x64b10",
    "cmp     r12d, 0x2f",
    "jg      0x64a30",
    "test    rbx, rbx",
    "je      0x64b30",
    "mov     rdi, r12",
    "call    free",
    "mov     rdi, r14",
    "call    free",
    "test    r13, r13",
    "jne     0x64afc",
    "cmp     rax, r13",
    "je      0x64ac0",
    "cmp     byte [r14], 0x0",
    "je      0x64a7d",
    "mov     rdx, r12",
    "mov     rsi, r15",
    "mov     rdi, r14",
    "call    sub_61fb0",
    "cmp     r12d, 0x5e",
    "je      0x64c50",
    "cmp     r12d, 0x8",
    "jle     0x64b59",
    "mov     edx, dword [rel data_16806c]",
    "test    edx, edx",
    "je      0x64c8d",
    "mov     rdi, r13",
    "call    free",
    "jmp     0x64aaa",
    "mov     qword [rel data_167f98], 0x0",
    "jmp     0x6495c",
    "mov     qword [rel data_1598e0], 0x0",
    "mov     rdi, r12",
    "mov     qword [rel data_1598f0], 0x0",
    "mov     qword [rel data_1598f8], 0xffffffffffffffff",
    "mov     qword [rel data_1598e8], 0xffffffffffffffff",
    "call    free",
    "mov     rdi, r14",
    "call    free",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "call    sub_61f40",
    "jmp     0x64a7d",
    "mov     rax, qword [rbp-0x38]",
    "xor     rbx, rax",
    "jmp     0x64a50",
    "cmp     r12d, 0x7c",
    "jne     0x64b59",
    "{Case 0x2-0x4, 0x7, 0x9}",
    "mov     rdi, r14",
    "call    free",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120363]  {\"bug: bad expassign token\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     eax, [r12-0x9]",
    "cmp     eax, 0x26",
    "ja      0x64b59",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120341]  {\"division by 0\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     eax, [r12-0x25]",
    "cmp     eax, 0xa",
    "ja      0x64b59",
    "mov     rax, qword [rbp-0x38]",
    "or      rbx, rax",
    "nop     dword [rax+rax]",
    "lea     rcx, [rel jump_table_1368a4]",
    "movsxd  rax, dword [rcx+rax*4]",
    "add     rax, rcx",
    "jmp     rax",
    "lea     rdx, [rel jump_table_136940]",
    "movsxd  rax, dword [rdx+rax*4]",
    "add     rax, rdx",
    "jmp     rax",
    "{Case 0x1c, 0x26}",
    "mov     rax, 0x8000000000000000",
    "cmp     qword [rbp-0x38], rax",
    "jne     0x64c09",
    "{Case 0x24}",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, rbx",
    "mov     rbx, rax",
    "jmp     0x64a50",
    "{Case 0x1}",
    "mov     rax, qword [rbp-0x38]",
    "mov     ecx, ebx",
    "sar     rax, cl",
    "mov     rbx, rax",
    "jmp     0x64a50",
    "{Case 0x0}",
    "mov     rax, qword [rbp-0x38]",
    "mov     ecx, ebx",
    "shl     rax, cl",
    "mov     rbx, rax",
    "jmp     0x64a50",
    "{Case 0x1d}",
    "and     rbx, qword [rbp-0x38]",
    "jmp     0x64a50",
    "{Case 0x22}",
    "mov     rax, qword [rbp-0x38]",
    "add     rbx, rax",
    "jmp     0x64a50",
    "{Case 0x21}",
    "mov     rax, qword [rbp-0x38]",
    "imul    rbx, rax",
    "jmp     0x64a50",
    "{Case 0x8}",
    "mov     ebx, 0x1",
    "{Case 0x1}",
    "mov     ebx, 0x1",
    "{Case 0x6}",
    "mov     ebx, 0x1",
    "{Case 0x0, 0xa}",
    "mov     ebx, 0x1",
    "{Case 0x5}",
    "mov     rbx, qword [rbp-0x38]",
    "jmp     0x64a50",
    "mov     rdi, qword [rbp-0x38]",
    "mov     rsi, rbx",
    "call    imaxdiv",
    "cmp     r12d, 0x2f",
    "cmovne  rax, rdx",
    "mov     rbx, rax",
    "jmp     0x64a50",
    "cmp     rbx, 0xffffffffffffffff",
    "jne     0x64c09",
    "mov     rbx, rdx",
    "shl     rbx, 0x3f",
    "jmp     0x64a50"
  ]
}