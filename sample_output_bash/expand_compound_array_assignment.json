{
  "address": "0x96980",
  "rules": [
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/4f0637c1ae9b445ca3ec93a4b4e0bb6d",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/2602c80a9b3846b9ae92e2e83b13e866",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/af1fc90a7adf4a2ea648cfac1c599984",
    "contain loop",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/bee29d5f30484915bb6e92fdf1038d2c",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/9710d9ee76a4466b954966f2a98c40ba",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rsi",
    "push    r14",
    "push    r13",
    "mov     r13, rsi",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "sub     rsp, 0x78",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "cmp     byte [rsi], 0x28",
    "je      0x96b18",
    "mov     rdi, rsi",
    "call    strlen",
    "movsxd  rdx, eax",
    "cmp     byte [r13+rdx-0x1], 0x29",
    "je      0x96e12",
    "lea     rdx, [rel data_1209b0]  {\"array assign\"}",
    "mov     esi, 0x1",
    "mov     rdi, r15",
    "call    parse_string_to_word_list",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x96af0",
    "lea     edx, [rax-0x1]",
    "mov     esi, 0x1",
    "mov     rdi, r13",
    "call    substring",
    "mov     r15, rax",
    "test    rax, rax",
    "jne     0x969b6",
    "xor     ebx, ebx",
    "jmp     0x96ac7",
    "xor     ebx, ebx",
    "test    r12, r12",
    "je      0x96ab2",
    "mov     qword [rbp-0x48], r12",
    "mov     rbx, rax",
    "mov     qword [rbp-0x50], r13",
    "jmp     0x969f0",
    "xor     ebx, ebx",
    "jmp     0x96ac7",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x96f0a",
    "mov     rdi, r14",
    "call    dispose_words",
    "cmp     r15, r13",
    "je      0x96ac7",
    "test    byte [r12+0x28], 0x40",
    "je      0x96ab2",
    "mov     rax, qword [rbx+0x8]",
    "test    byte [rax+0x8], 0x2",
    "jne     0x969e8",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x78",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, r15",
    "call    free",
    "nop     ",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "je      0x96a30",
    "mov     r13, qword [rax]",
    "test    r13, r13",
    "je      0x969e8",
    "mov     rbx, r14",
    "jmp     0x96ac7",
    "mov     rdi, r15",
    "call    free",
    "mov     r12, qword [rbp-0x48]",
    "mov     r13, qword [rbp-0x50]",
    "test    r12, r12",
    "je      0x96a49",
    "mov     rdi, r13",
    "call    dequote_escapes",
    "mov     rdi, r13",
    "mov     r12, rax",
    "mov     rsi, rax",
    "call    strcpy",
    "mov     rdi, r12",
    "call    free",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "jne     0x969f0",
    "mov     qword [rbp-0x48], r13",
    "mov     r12, r14",
    "mov     rdx, r14",
    "mov     r14, r15",
    "nop     word [rax+rax]",
    "test    byte [r12+0x28], 0x40",
    "jne     0x96b00",
    "nop     dword [rax+rax]",
    "mov     rdx, qword [rdx]",
    "test    rdx, rdx",
    "jne     0x96a60",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "je      0x96a90",
    "cmp     r15, r13",
    "je      0x96b0d",
    "mov     rax, qword [rdx+0x8]",
    "test    rax, rax",
    "je      0x96a90",
    "mov     esi, 0x1e",
    "mov     rdi, r12",
    "mov     r13, qword [rbp-0x48]",
    "mov     r15, r14",
    "call    sub_85ef0",
    "mov     r14, r12",
    "mov     rbx, rax",
    "movzx   ecx, byte [rdi]",
    "test    cl, cl",
    "je      0x96a90",
    "test    byte [rax+0x8], 0x4",
    "je      0x96a90",
    "cmp     cl, 0x5b",
    "je      0x96b38",
    "mov     esi, 0x3d",
    "mov     qword [rbp-0x50], rdx",
    "call    mbschr",
    "mov     rdx, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0x96a90",
    "nop     word [rax+rax]",
    "mov     rax, qword [rdx+0x8]",
    "mov     qword [rbp-0x58], rdx",
    "mov     r13, qword [rax]",
    "lea     rax, [rbp-0x40]",
    "mov     qword [rbp-0x40], 0x0",
    "mov     qword [rbp-0x68], rax",
    "mov     rdi, r13",
    "call    strlen",
    "lea     r15, [rax+rax+0x1]",
    "lea     rcx, [r13+rax]",
    "mov     rdi, r15",
    "mov     qword [rbp-0x60], rcx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x58]",
    "test    rax, rax",
    "mov     qword [rbp-0x50], rax",
    "je      0x96f0f",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   eax, byte [r13]",
    "mov     r9, qword [rbp-0x50]",
    "test    al, al",
    "je      0x96cc0",
    "mov     byte [r9], 0x0",
    "mov     rax, qword [rdx+0x8]",
    "mov     qword [rbp-0x58], rdx",
    "mov     rdi, qword [rax]",
    "call    free",
    "mov     rdx, qword [rbp-0x58]",
    "mov     rdi, qword [rbp-0x50]",
    "mov     rax, qword [rdx+0x8]",
    "or      dword [rax+0x8], 0x20",
    "mov     qword [rax], rdi",
    "jmp     0x96a90",
    "mov     qword [rbp-0x70], r12",
    "mov     r8, r13",
    "mov     rbx, r15",
    "xor     r10d, r10d",
    "mov     qword [rbp-0x90], r13",
    "mov     qword [rbp-0x78], rdx",
    "mov     qword [rbp-0x58], r14",
    "mov     r14, r9",
    "nop     dword [rax]",
    "lea     rax, [rel locale_mb_cur_max]",
    "movzx   ecx, byte [r8]",
    "mov     r10d, 0x1",
    "lea     r12, [rbx-0x1]",
    "cmp     dword [rax], 0x1",
    "jle     0x96c78",
    "cmp     al, 0x3d",
    "je      0x96cf0",
    "cmp     r15, rbx",
    "mov     rdx, rbx",
    "mov     byte [r14], cl",
    "cmovae  rdx, r15",
    "mov     rax, rdx",
    "sub     rax, rbx",
    "add     rax, 0x1",
    "cmp     rax, rdx",
    "cmovb   rax, rdx",
    "sub     r12, rdx",
    "add     r8, 0x1",
    "add     r14, 0x1",
    "lea     rbx, [rax+r12]",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x96d68",
    "cmp     r15, rbx",
    "lea     r12, [rbx-0x1]",
    "lea     r11, [r14+0x1]",
    "mov     rdx, rbx",
    "cmovae  rdx, r15",
    "mov     rcx, r12",
    "mov     r13, rdx",
    "sub     r13, rbx",
    "add     r13, 0x1",
    "cmp     r13, rdx",
    "cmovb   r13, rdx",
    "sub     rcx, rdx",
    "add     r13, rcx",
    "cmp     al, 0x5b",
    "je      0x96e38",
    "test    r10d, r10d",
    "jne     0x96cf0",
    "mov     r9, r14",
    "mov     r12, qword [rbp-0x70]",
    "mov     r14, qword [rbp-0x58]",
    "mov     rdx, qword [rbp-0x78]",
    "lea     rax, [rel locale_utf8locale]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x96dd0",
    "cmp     r15, rbx",
    "mov     rdx, rbx",
    "cmovae  rdx, r15",
    "mov     rax, rdx",
    "sub     rax, rbx",
    "mov     rbx, r12",
    "add     rax, 0x1",
    "cmp     rax, rdx",
    "cmovb   rax, rdx",
    "sub     rbx, rdx",
    "add     rbx, rax",
    "movzx   eax, byte [r8]",
    "mov     byte [r14], al",
    "mov     eax, 0x1",
    "mov     rdi, qword [rbp-0x90]",
    "mov     rbx, r8",
    "xor     edx, edx",
    "mov     qword [rbp-0x80], r8",
    "mov     qword [rbp-0x98], r11",
    "sub     rbx, rdi",
    "mov     esi, ebx",
    "call    sub_111360",
    "mov     rdi, qword [rbp-0x80]",
    "mov     esi, ebx",
    "mov     edx, eax",
    "mov     dword [rbp-0x84], eax",
    "call    substring",
    "mov     byte [r14], 0x5c",
    "mov     rdi, qword [rbp-0x98]",
    "mov     rdx, r13",
    "mov     rsi, rax",
    "mov     r12, rax",
    "call    __strcpy_chk",
    "movsxd  rcx, dword [rbp-0x84]",
    "mov     rdi, r13",
    "mov     r8, qword [rbp-0x80]",
    "mov     r11, rax",
    "mov     edx, ecx",
    "lea     r8, [r8+rcx+0x1]",
    "sub     edx, ebx",
    "cmp     r15, r13",
    "mov     qword [rbp-0x80], r8",
    "cmovae  rdi, r15",
    "movsxd  rdx, edx",
    "lea     rsi, [rdx+rdi]",
    "mov     rax, rsi",
    "sub     rax, r13",
    "cmp     rax, rdi",
    "cmovb   rax, rdi",
    "sub     r13, rsi",
    "add     rdx, r11",
    "lea     r14, [rdx+0x2]",
    "add     rax, r13",
    "cmp     r15, rax",
    "mov     rdi, rax",
    "cmovae  rdi, r15",
    "mov     rsi, rdi",
    "sub     rsi, rax",
    "add     rsi, 0x2",
    "cmp     rsi, rdi",
    "cmovb   rsi, rdi",
    "sub     rax, rdi",
    "mov     rdi, r12",
    "lea     rbx, [rax+rsi-0x2]",
    "mov     esi, 0x5d5c",
    "mov     word [rdx], si",
    "call    free",
    "mov     r8, qword [rbp-0x80]",
    "xor     r10d, r10d",
    "jmp     0x96ca5",
    "lea     ecx, [rax-0x21]",
    "cmp     cl, 0x3c",
    "ja      0x96c43",
    "mov     rdx, qword [rbp-0x60]",
    "mov     rcx, qword [rbp-0x68]",
    "mov     rsi, r8",
    "xor     edi, edi",
    "mov     dword [rbp-0x84], r10d",
    "mov     r13, qword [rbp-0x40]",
    "sub     rdx, r8",
    "mov     qword [rbp-0x80], r8",
    "call    mbrtowc",
    "mov     r8, qword [rbp-0x80]",
    "mov     r10d, dword [rbp-0x84]",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0x96d7f",
    "test    cl, cl",
    "js      0x96dd0",
    "movzx   eax, byte [r8]",
    "test    al, al",
    "jne     0x96bd0",
    "lea     rdx, [rel ifs_cmap]",
    "xor     r10d, r10d",
    "cmp     byte [rdx+rax], 0x0",
    "je      0x96c64",
    "mov     rdi, 0x1c00000040000200",
    "mov     edx, 0x1",
    "shl     rdx, cl",
    "test    rdx, rdi",
    "jne     0x96c53",
    "test    rax, rax",
    "mov     ecx, 0x1",
    "cmovne  rcx, rax",
    "xor     eax, eax",
    "jmp     0x96d94",
    "mov     qword [rbp-0x40], r13",
    "jmp     0x96d26",
    "setne   al",
    "movzx   eax, al",
    "lea     rax, [rel locale_mb_cur_max]",
    "movzx   ecx, byte [r8]",
    "cmp     dword [rax], 0x1",
    "jg      0x96d0e",
    "mov     byte [r14], 0x5c",
    "mov     rbx, r13",
    "mov     r14, r11",
    "xor     r10d, r10d",
    "lea     r12, [r13-0x1]",
    "test    edx, 0x80000401",
    "je      0x96c43",
    "cmp     r15, rbx",
    "mov     rsi, rbx",
    "cmovae  rsi, r15",
    "mov     rdx, rsi",
    "sub     rdx, rbx",
    "add     rdx, 0x1",
    "cmp     rdx, rsi",
    "cmovb   rdx, rsi",
    "sub     r12, rsi",
    "lea     rbx, [rdx+r12]",
    "movzx   edx, byte [r8+rax]",
    "mov     byte [r14+rax], dl",
    "add     rax, 0x1",
    "cmp     rcx, rax",
    "jne     0x96d90",
    "cmp     byte [r8+0x1], 0x28",
    "je      0x96c53",
    "lea     r12, [rbx-0x1]",
    "jmp     0x96d56",
    "add     r8, rax",
    "add     r14, rax",
    "jmp     0x96ca5"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}