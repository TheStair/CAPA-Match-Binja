{
  "address": "0x1183f0",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "encrypt data using XXTEA/8b51ac557ada4334b6544ffbf490740a/6611357b470d4f51a55c8b60d2040800",
    "decrypt data using TEA/b2f1d7a7bfa04984a8dca63866a95e23/65029a7be1a74342926ce5af1066d3d1",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "encrypt data using AES MixColumns step/6bd9351b483f4ccc8171068b67c48341",
    "allocate or change RWX memory/f8438e12365d41b4912976c2d37f5e13",
    "encrypt data using TEA/6daa315fd3424f3e9ddc04a16106b42a/a391c789b13342be8944ab433e4f9dba"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x478",
    "mov     dword [rbp-0x408], edx",
    "mov     qword [rbp-0x410], rcx",
    "mov     qword [rbp-0x3c8], rdi",
    "lea     rdi, [rbp-0x380]",
    "mov     dword [rbp-0x404], esi",
    "lea     rsi, [rbp-0x3b8]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    gettimeofday",
    "lea     rsi, [rbp-0x360]",
    "xor     edi, edi",
    "call    getrusage",
    "lea     rsi, [rbp-0x240]",
    "mov     edi, 0xffffffff",
    "call    getrusage",
    "lea     rax, [rel subshell_environment]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x3bc], eax",
    "test    rbx, rbx",
    "je      0x118e90",
    "lea     rax, [rel posixly_correct]",
    "mov     rdi, qword [rbp-0x3c8]",
    "mov     eax, dword [rax]",
    "mov     edi, dword [rdi+0x4]",
    "mov     dword [rbp-0x3e8], eax",
    "mov     dword [rbp-0x3d4], edi",
    "test    eax, eax",
    "je      0x118eef",
    "mov     rbx, qword [rbp-0x3c8]",
    "mov     dword [rbp-0x414], 0x0",
    "mov     eax, dword [rbx+0x4]",
    "mov     dword [rbp-0x3d4], eax",
    "shr     eax, 0x8",
    "and     eax, 0x1",
    "cmp     dword [rbx], 0x4",
    "mov     dword [rbp-0x3e8], eax",
    "je      0x118b70",
    "mov     dword [rbp-0x414], 0x1",
    "jmp     0x1184ad",
    "mov     dword [rbp-0x3e8], 0x0",
    "mov     rax, qword [rbx+0x18]",
    "cmp     qword [rax+0x8], 0x0",
    "jne     0x1184ad",
    "lea     rdi, [rel top_level]",
    "mov     rbx, qword [rbp-0x3c8]",
    "xor     esi, esi",
    "movdqa  xmm1, xmmword [rdi]",
    "movdqa  xmm2, xmmword [rdi+0x10]",
    "movdqa  xmm3, xmmword [rdi+0x20]",
    "movdqa  xmm4, xmmword [rdi+0x30]",
    "movdqa  xmm5, xmmword [rdi+0x40]",
    "movaps  xmmword [rbp-0x100], xmm1",
    "movdqa  xmm6, xmmword [rdi+0x50]",
    "movaps  xmmword [rbp-0xf0], xmm2",
    "movdqa  xmm7, xmmword [rdi+0x60]",
    "mov     rax, qword [rdi+0xc0]",
    "movaps  xmmword [rbp-0xe0], xmm3",
    "movdqa  xmm1, xmmword [rdi+0x70]",
    "movdqa  xmm2, xmmword [rdi+0x80]",
    "movaps  xmmword [rbp-0xd0], xmm4",
    "movdqa  xmm3, xmmword [rdi+0x90]",
    "movdqa  xmm4, xmmword [rdi+0xa0]",
    "movaps  xmmword [rbp-0xc0], xmm5",
    "movdqa  xmm5, xmmword [rdi+0xb0]",
    "movaps  xmmword [rbp-0xb0], xmm6",
    "movaps  xmmword [rbp-0xa0], xmm7",
    "movaps  xmmword [rbp-0x90], xmm1",
    "movaps  xmmword [rbp-0x80], xmm2",
    "movaps  xmmword [rbp-0x70], xmm3",
    "movaps  xmmword [rbp-0x60], xmm4",
    "movaps  xmmword [rbp-0x50], xmm5",
    "mov     qword [rbp-0x40], rax",
    "mov     eax, dword [rbp-0x3d4]",
    "and     eax, 0xfffffe7f",
    "mov     dword [rbx+0x4], eax",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     r13d, eax",
    "test    eax, eax",
    "je      0x118d90",
    "cmp     qword [rax+0x10], 0x0",
    "jne     0x1184ad",
    "mov     rbx, qword [rbp-0x3c8]",
    "mov     ecx, dword [rbp-0x408]",
    "xor     esi, esi",
    "mov     edx, dword [rbp-0x404]",
    "mov     r8, qword [rbp-0x410]",
    "mov     rdi, rbx",
    "call    execute_command_internal",
    "movdqa  xmm0, xmmword [rbp-0x100]",
    "mov     edx, eax",
    "lea     rax, [rel top_level]",
    "mov     dword [rbp-0x3f0], edx",
    "movaps  xmmword [rax], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xf0]",
    "movaps  xmmword [rax+0x10], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xe0]",
    "movaps  xmmword [rax+0x20], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xd0]",
    "movaps  xmmword [rax+0x30], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xc0]",
    "movaps  xmmword [rax+0x40], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xb0]",
    "movaps  xmmword [rax+0x50], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xa0]",
    "movaps  xmmword [rax+0x60], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x90]",
    "movaps  xmmword [rax+0x70], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x80]",
    "movaps  xmmword [rax+0x80], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x70]",
    "movaps  xmmword [rax+0x90], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x60]",
    "movaps  xmmword [rax+0xa0], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x50]",
    "mov     rcx, qword [rbp-0x40]",
    "movaps  xmmword [rax+0xb0], xmm0",
    "mov     qword [rax+0xc0], rcx",
    "mov     eax, dword [rbp-0x3d4]",
    "mov     dword [rbx+0x4], eax",
    "jmp     0x11863b",
    "lea     rdi, [rel top_level]",
    "movdqa  xmm0, xmmword [rbp-0x100]",
    "mov     ebx, dword [rbp-0x3d4]",
    "movaps  xmmword [rdi], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xf0]",
    "movaps  xmmword [rdi+0x10], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xe0]",
    "movaps  xmmword [rdi+0x20], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xd0]",
    "movaps  xmmword [rdi+0x30], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xc0]",
    "movaps  xmmword [rdi+0x40], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xb0]",
    "movaps  xmmword [rdi+0x50], xmm0",
    "movdqa  xmm0, xmmword [rbp-0xa0]",
    "movaps  xmmword [rdi+0x60], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x90]",
    "movaps  xmmword [rdi+0x70], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x80]",
    "movaps  xmmword [rdi+0x80], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x70]",
    "movaps  xmmword [rdi+0x90], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x60]",
    "movaps  xmmword [rdi+0xa0], xmm0",
    "movdqa  xmm0, xmmword [rbp-0x50]",
    "mov     rax, qword [rbp-0x40]",
    "mov     qword [rdi+0xc0], rax",
    "mov     rax, qword [rbp-0x3c8]",
    "movaps  xmmword [rdi+0xb0], xmm0",
    "mov     dword [rax+0x4], ebx",
    "lea     rax, [rel subshell_environment]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x118b50",
    "lea     rax, [rel posixly_correct]",
    "mov     dword [rbp-0x414], 0x1",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0x1184ad",
    "lea     rsi, [rbp-0x3b8]",
    "lea     rdi, [rbp-0x370]",
    "call    gettimeofday",
    "lea     rsi, [rbp-0x2d0]",
    "xor     edi, edi",
    "call    getrusage",
    "lea     rsi, [rbp-0x1b0]",
    "mov     edi, 0xffffffff",
    "call    getrusage",
    "mov     rax, qword [rbp-0x370]",
    "sub     rax, qword [rbp-0x380]",
    "mov     qword [rbp-0x3e0], rax",
    "mov     rcx, qword [rbp-0x368]",
    "mov     qword [rbp-0x3b0], rax",
    "sub     rcx, qword [rbp-0x378]",
    "js      0x118c30",
    "mov     edx, dword [rbp-0x3bc]",
    "cmp     eax, edx",
    "je      0x11863b",
    "jmp     0x118ebd",
    "add     rcx, 0xf4240",
    "sub     rax, 0x1",
    "mov     qword [rbp-0x3a8], rcx",
    "mov     qword [rbp-0x3e0], rax",
    "js      0x118f30",
    "mov     qword [rbp-0x3a8], rcx",
    "mov     esi, r13d",
    "call    __longjmp_chk",
    "{ Does not return }",
    "lea     rax, [rel shellstart]",
    "pxor    xmm0, xmm0",
    "movaps  xmmword [rbp-0x240], xmm0",
    "movdqa  xmm6, xmmword [rax]",
    "movaps  xmmword [rbp-0x230], xmm0",
    "movaps  xmmword [rbp-0x360], xmm0",
    "movaps  xmmword [rbp-0x350], xmm0",
    "movaps  xmmword [rbp-0x380], xmm6",
    "mov     dword [rbp-0x3e4], 0x0",
    "pxor    xmm0, xmm0",
    "mov     qword [rbp-0x3e0], 0x0",
    "movaps  xmmword [rbp-0x3b0], xmm0",
    "jmp     0x118719",
    "mov     qword [rbp-0x3b0], rax",
    "jmp     0x1186a4",
    "mov     r10, qword [rbp-0x1b0]",
    "mov     rcx, qword [rbp-0x1a8]",
    "sub     r10, qword [rbp-0x240]",
    "sub     rcx, qword [rbp-0x238]",
    "jns     0x11874f",
    "add     esi, 0x1",
    "mov     dword [rbp-0x3e4], esi",
    "cmp     esi, 0x3e8",
    "jne     0x118719",
    "mov     rax, 0x431bde82d7b634db",
    "imul    rcx",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x12",
    "sub     rdx, rax",
    "imul    rdx, rdx, 0xf4240",
    "sub     rcx, rdx",
    "movsxd  rax, ecx",
    "mov     edx, ecx",
    "imul    rax, rax, 0x10624dd3",
    "sar     edx, 0x1f",
    "sar     rax, 0x26",
    "sub     eax, edx",
    "mov     dword [rbp-0x3e4], eax",
    "mov     esi, eax",
    "imul    eax, eax, 0x3e8",
    "sub     ecx, eax",
    "cmp     ecx, 0x1f3",
    "jle     0x118719",
    "mov     rdx, qword [rbp-0x2d0]",
    "mov     rax, qword [rbp-0x2c8]",
    "sub     rdx, qword [rbp-0x360]",
    "sub     rax, qword [rbp-0x358]",
    "js      0x118c60",
    "add     rcx, 0xf4240",
    "mov     eax, 0x0",
    "sub     r10, 0x1",
    "cmovs   rcx, rax",
    "cmovs   r10, rax",
    "add     qword [rbp-0x3e0], 0x1",
    "mov     dword [rbp-0x3e4], 0x0",
    "add     rax, 0xf4240",
    "sub     rdx, 0x1",
    "jns     0x118771",
    "add     r10, rdx",
    "add     rcx, rax",
    "jmp     0x118777",
    "sub     rcx, 0xf4240",
    "add     r10, 0x1",
    "mov     qword [rbp-0x398], rcx",
    "mov     qword [rbp-0x3a0], r10",
    "jmp     0x118792",
    "mov     qword [rbp-0x398], rcx",
    "mov     qword [rbp-0x3a0], r10",
    "cmp     rcx, 0xf423f",
    "jg      0x118b28",
    "mov     rax, 0x431bde82d7b634db",
    "imul    rcx",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x12",
    "sub     rdx, rax",
    "imul    rdx, rdx, 0xf4240",
    "sub     rcx, rdx",
    "movsxd  rax, ecx",
    "mov     edx, ecx",
    "imul    rax, rax, 0x10624dd3",
    "sar     edx, 0x1f",
    "sar     rax, 0x26",
    "sub     eax, edx",
    "mov     dword [rbp-0x3ec], eax",
    "mov     esi, eax",
    "imul    eax, eax, 0x3e8",
    "sub     ecx, eax",
    "cmp     ecx, 0x1f3",
    "jle     0x118803",
    "mov     r8, qword [rbp-0x1a0]",
    "sub     r8, qword [rbp-0x230]",
    "mov     qword [rbp-0x380], r8",
    "mov     rcx, qword [rbp-0x198]",
    "sub     rcx, qword [rbp-0x228]",
    "js      0x118ca8",
    "add     esi, 0x1",
    "mov     dword [rbp-0x3ec], esi",
    "cmp     esi, 0x3e8",
    "jne     0x118803",
    "add     rcx, 0xf4240",
    "mov     qword [rbp-0x378], rcx",
    "sub     r8, 0x1",
    "js      0x118f00",
    "mov     qword [rbp-0x378], rcx",
    "mov     dword [rbp-0x3ec], 0x0",
    "add     r10, 0x1",
    "pxor    xmm0, xmm0",
    "xor     ecx, ecx",
    "xor     r8d, r8d",
    "movaps  xmmword [rbp-0x380], xmm0",
    "jmp     0x118833",
    "mov     qword [rbp-0x380], r8",
    "jmp     0x118833",
    "add     rax, 0xf4240",
    "mov     qword [rbp-0x368], rax",
    "sub     rdx, 0x1",
    "js      0x118f18",
    "mov     qword [rbp-0x368], rax",
    "add     r8, rdx",
    "add     rcx, rax",
    "mov     rdx, qword [rbp-0x2c0]",
    "sub     rdx, qword [rbp-0x350]",
    "mov     qword [rbp-0x370], rdx",
    "mov     rax, qword [rbp-0x2b8]",
    "sub     rax, qword [rbp-0x348]",
    "js      0x118c78",
    "pxor    xmm0, xmm0",
    "movaps  xmmword [rbp-0x370], xmm0",
    "jmp     0x118869",
    "mov     qword [rbp-0x370], rdx",
    "add     r8, rdx",
    "add     rcx, rax",
    "jmp     0x118869",
    "sub     rcx, 0xf4240",
    "add     r8, 0x1",
    "mov     qword [rbp-0x388], rcx",
    "mov     qword [rbp-0x390], r8",
    "jmp     0x118884",
    "mov     qword [rbp-0x388], rcx",
    "mov     qword [rbp-0x390], r8",
    "cmp     rcx, 0xf423f",
    "jg      0x118c10",
    "mov     rax, 0x431bde82d7b634db",
    "imul    rcx",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x12",
    "sub     rdx, rax",
    "imul    rdx, rdx, 0xf4240",
    "sub     rcx, rdx",
    "movsxd  rax, ecx",
    "mov     edx, ecx",
    "imul    rax, rax, 0x10624dd3",
    "sar     edx, 0x1f",
    "sar     rax, 0x26",
    "sub     eax, edx",
    "mov     dword [rbp-0x3d8], eax",
    "mov     ebx, eax",
    "imul    eax, eax, 0x3e8",
    "sub     ecx, eax",
    "cmp     ecx, 0x1f3",
    "jle     0x1188f5",
    "lea     rdx, [rbp-0x390]",
    "lea     rsi, [rbp-0x3a0]",
    "mov     qword [rbp-0x400], r8",
    "lea     rdi, [rbp-0x3b0]",
    "mov     qword [rbp-0x3f8], r10",
    "lea     r12, [rel data_122f9a]  {\"real %2R\\nuser %2U\\nsys %2S\"}",
    "call    timeval_to_cpu",
    "mov     ecx, dword [rbp-0x3e8]",
    "mov     r10, qword [rbp-0x3f8]",
    "mov     dword [rbp-0x418], eax",
    "mov     r8, qword [rbp-0x400]",
    "test    ecx, ecx",
    "je      0x118ce8",
    "add     ebx, 0x1",
    "mov     dword [rbp-0x3d8], ebx",
    "cmp     ebx, 0x3e8",
    "jne     0x1188f5",
    "lea     rdi, [rel data_12005b[4]]  {\"TIMEFORMAT\"}",
    "mov     qword [rbp-0x428], r8",
    "mov     qword [rbp-0x420], r10",
    "call    find_variable",
    "mov     r10, qword [rbp-0x420]",
    "mov     r8, qword [rbp-0x428]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0x119017",
    "mov     qword [rbp-0x3d0], 0x40",
    "mov     r15d, 0x40",
    "mov     dword [rbp-0x3d8], 0x0",
    "add     r8, 0x1",
    "lea     rax, [rel posixly_correct]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x119039",
    "mov     qword [rbp-0x460], r8",
    "mov     qword [rbp-0x458], r10",
    "call    get_variable_value",
    "mov     r10, qword [rbp-0x458]",
    "mov     r8, qword [rbp-0x460]",
    "test    rax, rax",
    "mov     r12, rax",
    "je      0x119017",
    "mov     rsi, qword [rbp-0x3d0]",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x490], r8",
    "mov     qword [rbp-0x488], r10",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   eax, byte [r12]",
    "xor     ebx, ebx",
    "test    al, al",
    "je      0x1190e0",
    "lea     r12, [rel data_122f7c]  {\"\\nreal\\t%3lR\\nuser\\t%3lU\\nsys\\t%\u2026\"}",
    "jmp     0x118946",
    "mov     eax, dword [rbp-0x414]",
    "lea     r12, [rel data_122f69]  {\"user\\t%2lU\\nsys\\t%2lS\"}",
    "test    eax, eax",
    "jne     0x118946",
    "cmp     byte [rax], 0x0",
    "jne     0x11918e",
    "mov     rbx, r14",
    "jmp     0x118aea",
    "mov     dword [rbp-0x444], r13d",
    "mov     r13, r12",
    "mov     qword [rbp-0x468], r10",
    "mov     qword [rbp-0x450], r8",
    "jmp     0x1189f7",
    "mov     rdi, rax",
    "mov     qword [rbp-0x480], r8",
    "mov     qword [rbp-0x478], r10",
    "call    strlen",
    "mov     ecx, 0x40",
    "mov     r8, qword [rbp-0x480]",
    "mov     r10, qword [rbp-0x478]",
    "cdq     ",
    "lea     r9d, [rax+0x40]",
    "idiv    ecx",
    "sub     r9d, edx",
    "movsxd  rax, r9d",
    "mov     qword [rbp-0x3d0], rax",
    "mov     r15, rax",
    "jmp     0x118957",
    "test    r13d, r13d",
    "jne     0x1191d3",
    "mov     byte [rbx], 0x0",
    "mov     rbx, qword [rbp-0x440]",
    "mov     rcx, r14",
    "xor     eax, eax",
    "lea     rdx, [rel data_1212aa[4]]  {\"%s\\n\"}",
    "mov     esi, 0x2",
    "mov     rdi, rbx",
    "call    __fprintf_chk",
    "mov     rdi, rbx",
    "call    fflush",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x118d52",
    "cmp     al, 0x25",
    "jne     0x1189c8",
    "mov     rax, qword [rel stderr]",
    "mov     rdi, qword [rbp-0x3d0]",
    "mov     qword [rbp-0x438], r8",
    "mov     qword [rbp-0x430], r10",
    "mov     rax, qword [rax]",
    "mov     qword [rbp-0x440], rax",
    "call    malloc",
    "mov     r10, qword [rbp-0x430]",
    "mov     r8, qword [rbp-0x438]",
    "test    rax, rax",
    "mov     r14, rax",
    "je      0x119158",
    "lea     rdi, [rel top_level]",
    "mov     esi, r13d",
    "call    __longjmp_chk",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x119153",
    "lea     r12d, [rbx+0x1]",
    "cmp     r12d, r15d",
    "jge     0x118bb0",
    "movsx   ecx, byte [r13+0x1]",
    "test    cl, cl",
    "je      0x1189c8",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     eax, dword [rbp-0x3f0]",
    "add     rsp, 0x478",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, r12d",
    "sub     eax, r15d",
    "and     eax, 0xffffffc0",
    "lea     r15d, [r15+rax+0x40]",
    "movsxd  rsi, r15d",
    "mov     qword [rbp-0x3d0], rsi",
    "test    r14, r14",
    "je      0x118cd0",
    "movzx   eax, byte [r13]",
    "mov     byte [r14+rbx], al",
    "movsxd  rbx, r12d",
    "mov     r12, r13",
    "lea     r12, [r13+0x1]",
    "cmp     cl, 0x25",
    "je      0x118e70",
    "mov     rdi, qword [rbp-0x3d0]",
    "call    malloc",
    "mov     r14, rax",
    "jmp     0x118bdc",
    "mov     rdi, r14",
    "call    realloc",
    "mov     r14, rax",
    "mov     r13d, dword [rbp-0x444]",
    "add     rbx, r14",
    "lea     r8d, [rbx+0x1]",
    "cmp     r8d, r15d",
    "jge     0x119045",
    "cmp     cl, 0x50",
    "je      0x118f58",
    "test    r14, r14",
    "jne     0x1189d5",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x3d0]",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     eax, r8d",
    "sub     eax, r15d",
    "and     eax, 0xffffffc0",
    "lea     r15d, [r15+rax+0x40]",
    "movsxd  rsi, r15d",
    "mov     qword [rbp-0x3d0], rsi",
    "test    r14, r14",
    "je      0x1190c1",
    "mov     byte [r14+rbx], cl",
    "movsxd  rbx, r8d",
    "jmp     0x1189e4",
    "movsxd  rax, dword [rbp-0x418]",
    "mov     esi, 0x2",
    "mov     rdi, rax",
    "imul    rax, rax, 0x51eb851f",
    "mov     edx, edi",
    "sar     edx, 0x1f",
    "sar     rax, 0x25",
    "sub     eax, edx",
    "imul    ecx, eax, 0x64",
    "sub     edi, ecx",
    "movsxd  rcx, eax",
    "lea     edx, [rdi+rdi*4]",
    "lea     rdi, [rbp-0x120]",
    "lea     r8d, [rdx+rdx]",
    "xor     edx, edx",
    "call    sub_44260",
    "lea     r13d, [rax+rbx]",
    "cmp     r13d, r15d",
    "jl      0x118a9d",
    "lea     eax, [rcx-0x30]",
    "mov     esi, 0x3",
    "cmp     al, 0x9",
    "ja      0x118a3c",
    "mov     rdi, qword [rbp-0x3d0]",
    "mov     dword [rbp-0x46c], r8d",
    "call    malloc",
    "mov     r8d, dword [rbp-0x46c]",
    "mov     r14, rax",
    "jmp     0x11907b",
    "mov     rdi, r14",
    "mov     dword [rbp-0x448], r8d",
    "call    realloc",
    "mov     r8d, dword [rbp-0x448]",
    "mov     r14, rax",
    "movzx   eax, byte [r12+0x1]",
    "lea     r13, [r12+0x1]",
    "test    al, al",
    "je      0x118ae0",
    "mov     rax, qword [rbp-0x3d0]",
    "lea     rdi, [r14+rbx]",
    "lea     rsi, [rbp-0x120]",
    "cmp     rbx, rax",
    "mov     rdx, rax",
    "cmovae  rdx, rbx",
    "sub     rdx, rbx",
    "movsxd  rbx, r13d",
    "lea     r13, [r12+0x1]",
    "call    __strcpy_chk",
    "movzx   eax, byte [r12+0x1]",
    "test    al, al",
    "jne     0x1189f7",
    "mov     eax, r13d",
    "sub     eax, r15d",
    "and     eax, 0xffffffc0",
    "lea     r15d, [rax+r15+0x40]",
    "movsxd  rsi, r15d",
    "mov     qword [rbp-0x3d0], rsi",
    "test    r14, r14",
    "je      0x1190ad",
    "xor     edx, edx",
    "cmp     cl, 0x6c",
    "jne     0x118a52",
    "lea     esi, [rcx-0x30]",
    "mov     eax, 0x3",
    "movzx   ecx, byte [r13+0x2]",
    "lea     r12, [r13+0x2]",
    "cmp     esi, eax",
    "cmovg   esi, eax",
    "test    r14, r14",
    "je      0x119126",
    "mov     rsi, qword [rbp-0x3d0]",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     dword [rbp-0x470], r8d",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   ecx, byte [r13+0x1]",
    "jmp     0x118e7d",
    "nop     word [rax+rax]",
    "mov     rdi, qword [rbp-0x3d0]",
    "call    malloc",
    "mov     r14, rax",
    "jmp     0x118fcf",
    "mov     rdi, r14",
    "call    realloc",
    "mov     r14, rax",
    "cmp     cl, 0x52",
    "je      0x118ff8",
    "movzx   ecx, byte [r12+0x1]",
    "mov     edx, 0x1",
    "add     r12, 0x1",
    "test    r14, r14",
    "jne     0x118a9d",
    "mov     rsi, qword [rbp-0x3d0]",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     r8d, dword [rbp-0x3e4]",
    "mov     rcx, qword [rbp-0x3e0]",
    "lea     rdi, [rbp-0x120]",
    "call    sub_44260",
    "jmp     0x118a90",
    "cmp     cl, 0x45",
    "je      0x118ff8",
    "lea     r13d, [rax+rbx]",
    "cmp     r13d, r15d",
    "jge     0x118fa3",
    "cmp     cl, 0x55",
    "je      0x11908e",
    "mov     r8d, dword [rbp-0x3ec]",
    "mov     rcx, qword [rbp-0x468]",
    "lea     rdi, [rbp-0x120]",
    "call    sub_44260",
    "jmp     0x118a90",
    "cmp     cl, 0x53",
    "jne     0x1190e8",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_134b68]  {\"TIMEFORMAT: `%c': invalid format\u2026\"}",
    "mov     byte [rbp-0x491], cl",
    "mov     r13d, dword [rbp-0x444]",
    "call    dcgettext",
    "movsx   esi, byte [rbp-0x491]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x118d52",
    "mov     r8d, dword [rbp-0x3d8]",
    "mov     rcx, qword [rbp-0x450]",
    "lea     rdi, [rbp-0x120]",
    "call    sub_44260"
  ]
}