{
  "address": "0xa0c90",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "get file attributes",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0xb8",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    esi, esi",
    "jne     0xa0e70",
    "mov     rax, qword [rel data_168b50]",
    "mov     r12, rdi",
    "mov     rdi, qword [rel data_168b68]",
    "mov     ebx, esi",
    "test    rdi, rdi",
    "je      0xa0cd5",
    "lea     rax, [rel rl_filename_quoting_desired]",
    "xor     r14d, r14d",
    "mov     dword [rax], 0x0",
    "jmp     0xa0efe",
    "movsxd  rdx, dword [rel data_168b48]",
    "lea     r15, [rax+rdx*8]",
    "mov     r12, rdx",
    "mov     rdi, qword [r15]",
    "test    rdi, rdi",
    "je      0xa0f67",
    "movzx   eax, byte [r12]",
    "mov     qword [rel data_168b60], r12",
    "cmp     al, 0x60",
    "je      0xa0f80",
    "call    free",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xa0ffb",
    "call    strlen",
    "mov     r13d, dword [rel data_168b58]",
    "lea     ebx, [r13+0x1]",
    "movsxd  rbx, ebx",
    "add     rbx, rax",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xa1000",
    "add     r12, 0x1",
    "mov     ebx, 0x1",
    "jmp     0xa0cf1",
    "cmp     al, 0x24",
    "je      0xa0fc0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0xb8",
    "mov     rax, r14",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     eax, eax",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rel data_168b60]",
    "movsxd  r8, r13d",
    "cmp     r13d, 0x1",
    "jne     0xa0f30",
    "lea     rax, [rel rl_completion_suppress_quote]",
    "mov     rdi, r12",
    "mov     dword [rel data_168b58], ebx",
    "mov     dword [rax], 0x1",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xa1032",
    "cmp     byte [r12+0x1], 0x28",
    "jne     0xa0cf1",
    "mov     rdx, r8",
    "mov     rcx, rbx",
    "mov     rdi, r14",
    "mov     qword [rbp-0xd8], r8",
    "call    __strncpy_chk",
    "mov     r8, qword [rbp-0xd8]",
    "jmp     0xa0eda",
    "movzx   eax, byte [rsi]",
    "mov     byte [r14], al",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdi, r13",
    "mov     rdx, rbx",
    "mov     r12, r13",
    "call    __strcpy_chk",
    "mov     rdi, qword [rel data_168b50]",
    "mov     qword [rel data_168b68], r13",
    "test    rdi, rdi",
    "je      0xa0d4d",
    "add     r12, 0x2",
    "mov     ebx, 0x2",
    "jmp     0xa0cf1",
    "cmp     rbx, r8",
    "mov     rdx, rbx",
    "mov     rsi, qword [r15]",
    "lea     rdi, [r14+r8]",
    "cmovb   rdx, r8",
    "add     r12d, 0x1",
    "sub     rdx, r8",
    "call    __strcpy_chk",
    "mov     dword [rel data_168b48], r12d",
    "mov     rdi, r12",
    "lea     r13, [rel data_120c34]  {\";|&{(`\"}",
    "call    strlen",
    "lea     rbx, [r12+rax-0x1]",
    "cmp     r12, rbx",
    "jb      0xa0d7d",
    "call    free",
    "movsx   esi, byte [rbx]",
    "cmp     sil, 0x20",
    "je      0xa0d9e",
    "jmp     0xa0fa8",
    "cmp     r12, rbx",
    "jae     0xa0fa8",
    "cmp     sil, 0x9",
    "je      0xa0d9e",
    "lea     rsi, [rel command_word_completion_function]",
    "mov     rdi, r12",
    "call    rl_completion_matches",
    "jmp     0xa0dd6",
    "lea     rdi, [rbx+0x1]",
    "mov     rax, rdi",
    "sub     rax, r12",
    "add     dword [rel data_168b58], eax",
    "movzx   eax, byte [rbx]",
    "cmp     al, 0x20",
    "je      0xa0f90",
    "test    sil, sil",
    "je      0xa0d70",
    "mov     qword [rel data_168b50], rax",
    "test    rax, rax",
    "je      0xa0f50",
    "lea     rsi, [rel rl_filename_completion_function]",
    "call    rl_completion_matches",
    "jmp     0xa0dd6",
    "cmp     al, 0x9",
    "je      0xa0f90",
    "sub     rbx, 0x1",
    "cmp     rbx, r12",
    "je      0xa0fa8",
    "mov     rdi, r13",
    "call    mbschr",
    "test    rax, rax",
    "je      0xa0d70",
    "lea     rax, [rel rl_completion_suppress_append]",
    "mov     dword [rel data_168b48], 0x0",
    "mov     dword [rax], 0x1",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "je      0xa0f50",
    "lea     rsi, [rel command_word_completion_function]",
    "call    rl_completion_matches",
    "cmp     qword [rax+0x8], 0x0",
    "je      0xa0e18",
    "mov     dword [rel data_168b48], 0x0",
    "xor     esi, esi",
    "call    bash_tilde_expand",
    "lea     rsi, [rbp-0xd0]",
    "mov     rdi, rax",
    "mov     rbx, rax",
    "call    stat",
    "test    eax, eax",
    "jne     0xa0fda",
    "lea     rdx, [rel rl_completion_suppress_append]",
    "mov     dword [rel data_168b48], 0x1",
    "mov     dword [rdx], 0x1",
    "jmp     0xa0e80",
    "mov     rdi, rbx",
    "call    free",
    "lea     rdx, [rel rl_completion_suppress_append]",
    "mov     rax, qword [rel data_168b50]",
    "mov     dword [rdx], 0x1",
    "jmp     0xa0e77",
    "mov     eax, dword [rbp-0xb8]",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "jne     0xa0fda",
    "test    rax, rax",
    "je      0xa0f67",
    "mov     rdi, rbx",
    "call    free",
    "lea     rax, [rel rl_completion_append_character]",
    "mov     dword [rax], 0x2f",
    "nop     "
  ]
}