{
  "address": "0x771f0",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "inject pe/a6c687087ead4fcfa30bf9c92c52bdac",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "push    r13",
    "push    r12",
    "mov     r12d, edx",
    "push    rbx",
    "mov     ebx, esi",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    __ctype_get_mb_cur_max",
    "mov     rcx, rsp",
    "lea     rsi, [rax+0x1]",
    "add     rax, 0x10",
    "mov     rdx, rax",
    "and     rax, 0xfffffffffffff000",
    "sub     rcx, rax",
    "and     rdx, 0xfffffffffffffff0",
    "cmp     rsp, rcx",
    "je      0x77256",
    "\u2753\ufe0fand     edx, 0xfff",
    "sub     rsp, rdx",
    "test    rdx, rdx",
    "jne     0x77340",
    "\u2753\ufe0fsub     rsp, 0x1000",
    "or      qword [rsp+0xff8], 0x0",
    "cmp     rsp, rcx",
    "jne     0x77241",
    "or      qword [rsp+rdx-0x8], 0x0",
    "jmp     0x77268",
    "lea     rax, [rel ifs_var]",
    "mov     r15, rsp",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x77292",
    "mov     eax, 0x20",
    "mov     word [r15], ax",
    "and     r12d, 0x8",
    "jne     0x77292",
    "mov     rdi, r14",
    "call    sub_77120",
    "mov     r14, rax",
    "jmp     0x772d6",
    "mov     rbx, r14",
    "test    r14, r14",
    "je      0x772d6",
    "mov     rax, qword [rax+0x8]",
    "test    rax, rax",
    "je      0x77292",
    "mov     rsi, r15",
    "mov     rdi, r14",
    "call    string_list_internal",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x7736f",
    "nop     dword [rax+rax]",
    "cmp     byte [rax], 0x0",
    "jne     0x77310",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     r13, qword [rbx+0x8]",
    "xor     esi, esi",
    "mov     r12, qword [r13]",
    "mov     rdi, r12",
    "call    sub_72bd0",
    "mov     rdi, r12",
    "mov     qword [r13], rax",
    "call    free",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "jne     0x772b0",
    "lea     rax, [rel ifs_firstc_len]",
    "mov     r12, qword [rax]",
    "cmp     r12, 0x1",
    "jne     0x77350",
    "mov     rcx, rsi",
    "lea     rsi, [rel ifs_firstc]",
    "mov     rdx, r12",
    "mov     rdi, rsp",
    "call    __memcpy_chk",
    "mov     byte [rsp+r12], 0x0",
    "jmp     0x7729b",
    "lea     rax, [rel ifs_firstc]",
    "mov     byte [rsp+0x1], 0x0",
    "movzx   eax, byte [rax]",
    "mov     byte [rsp], al",
    "jmp     0x7729b",
    "and     ebx, 0xb",
    "jne     0x77300"
  ]
}