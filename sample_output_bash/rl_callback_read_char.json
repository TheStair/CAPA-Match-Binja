{
  "address": "0x1037c0",
  "rules": [
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "contain loop",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     rax, [rel rl_linefunc]",
    "cmp     qword [rax], 0x0",
    "je      0x103f17",
    "lea     rdi, [rel data_134928]  {\"readline_callback_read_char() ca\u2026\"}",
    "xor     eax, eax",
    "call    _rl_errmsg",
    "call    abort",
    "{ Does not return }",
    "lea     rdi, [rel _rl_top_level]",
    "xor     esi, esi",
    "movdqa  xmm0, xmmword [rdi]",
    "movdqa  xmm1, xmmword [rdi+0x10]",
    "movdqa  xmm2, xmmword [rdi+0x20]",
    "movdqa  xmm3, xmmword [rdi+0x30]",
    "movdqa  xmm4, xmmword [rdi+0x40]",
    "movdqa  xmm5, xmmword [rdi+0x50]",
    "movaps  xmmword [rel data_16ab00], xmm0",
    "movdqa  xmm6, xmmword [rdi+0x60]",
    "movdqa  xmm7, xmmword [rdi+0x70]",
    "movaps  xmmword [rel data_16ab10], xmm1",
    "movdqa  xmm0, xmmword [rdi+0x80]",
    "movdqa  xmm1, xmmword [rdi+0x90]",
    "movaps  xmmword [rel data_16ab20], xmm2",
    "mov     rax, qword [rdi+0xc0]",
    "movdqa  xmm2, xmmword [rdi+0xa0]",
    "movaps  xmmword [rel data_16ab30], xmm3",
    "movdqa  xmm3, xmmword [rdi+0xb0]",
    "movaps  xmmword [rel data_16ab40], xmm4",
    "mov     qword [rel data_16abc0], rax",
    "movaps  xmmword [rel data_16ab50], xmm5",
    "movaps  xmmword [rel data_16ab60], xmm6",
    "movaps  xmmword [rel data_16ab70], xmm7",
    "movaps  xmmword [rel data_16ab80], xmm0",
    "movaps  xmmword [rel data_16ab90], xmm1",
    "movaps  xmmword [rel data_16aba0], xmm2",
    "movaps  xmmword [rel data_16abb0], xmm3",
    "call    __sigsetjmp",
    "endbr64 ",
    "test    eax, eax",
    "jne     0x103a30",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "lea     rax, [rel _rl_want_redisplay]",
    "movdqa  xmm4, xmmword [rel data_16ab00]",
    "movdqa  xmm5, xmmword [rel data_16ab10]",
    "movdqa  xmm6, xmmword [rel data_16ab20]",
    "mov     dword [rax], 0x0",
    "movdqa  xmm7, xmmword [rel data_16ab30]",
    "lea     rax, [rel _rl_top_level]",
    "mov     rdx, qword [rel data_16abc0]",
    "movdqa  xmm0, xmmword [rel data_16ab80]",
    "movdqa  xmm1, xmmword [rel data_16ab90]",
    "mov     qword [rax+0xc0], rdx",
    "movdqa  xmm2, xmmword [rel data_16aba0]",
    "movaps  xmmword [rax], xmm4",
    "movdqa  xmm3, xmmword [rel data_16abb0]",
    "movdqa  xmm4, xmmword [rel data_16ab40]",
    "movaps  xmmword [rax+0x10], xmm5",
    "lea     rdx, [rel rl_readline_state]",
    "movdqa  xmm5, xmmword [rel data_16ab50]",
    "movaps  xmmword [rax+0x20], xmm6",
    "movdqa  xmm6, xmmword [rel data_16ab60]",
    "movaps  xmmword [rax+0x30], xmm7",
    "movdqa  xmm7, xmmword [rel data_16ab70]",
    "movaps  xmmword [rax+0x40], xmm4",
    "movaps  xmmword [rax+0x50], xmm5",
    "movaps  xmmword [rax+0x60], xmm6",
    "movaps  xmmword [rax+0x70], xmm7",
    "movaps  xmmword [rax+0x80], xmm0",
    "movaps  xmmword [rax+0x90], xmm1",
    "movaps  xmmword [rax+0xa0], xmm2",
    "movaps  xmmword [rax+0xb0], xmm3",
    "mov     rax, qword [rdx]",
    "test    eax, 0x4000000",
    "je      0x103b1d",
    "lea     rax, [rel rl_persistent_signal_handlers]",
    "mov     r10d, dword [rax]",
    "test    r10d, r10d",
    "je      0x103e20",
    "lea     rax, [rel rl_persistent_signal_handlers]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x103b2f",
    "or      rax, 0x2000000",
    "mov     qword [rdx], rax",
    "lea     rax, [rel rl_done]",
    "mov     dword [rax], 0x1",
    "call    rl_set_signals",
    "jmp     0x1038bc",
    "lea     r13, [rel _rl_caught_signal]",
    "jmp     0x103993",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "call    rl_clear_signals",
    "mov     eax, dword [r13]",
    "test    eax, eax",
    "jne     0x103c18",
    "mov     edi, dword [r13]",
    "call    _rl_signal_handler",
    "lea     r12, [rel rl_readline_state]",
    "mov     rax, qword [r12]",
    "test    al, 0x80",
    "je      0x1039b2",
    "lea     r12, [rel rl_readline_state]",
    "mov     rax, qword [r12]",
    "test    al, 0x80",
    "jne     0x103c34",
    "test    ah, 0x1",
    "jne     0x103e30",
    "lea     rax, [rel _rl_iscxt]",
    "mov     rbx, qword [rax]",
    "mov     rdi, rbx",
    "call    _rl_search_getchar",
    "mov     esi, dword [rbx+0x6c]",
    "mov     rdi, rbx",
    "call    _rl_isearch_dispatch",
    "test    eax, eax",
    "jle     0x103f00",
    "lea     rax, [rel _rl_nscxt]",
    "mov     rdi, qword [rax]",
    "call    _rl_nsearch_callback",
    "lea     rax, [rel rl_persistent_signal_handlers]",
    "mov     r9d, dword [rax]",
    "test    r9d, r9d",
    "jne     0x103b2f",
    "test    eax, 0x800000",
    "jne     0x1038d0",
    "mov     esi, eax",
    "mov     rdi, rbx",
    "call    _rl_isearch_cleanup",
    "test    eax, eax",
    "jne     0x103b1d",
    "lea     rax, [rel rl_readline_state]",
    "mov     rax, qword [rax]",
    "and     eax, 0x20080",
    "cmp     rax, 0x20000",
    "jne     0x103b1d",
    "jmp     0x103b2a",
    "lea     r14, [rel _rl_callback_data]",
    "lea     r12, [rel _rl_callback_func]",
    "mov     rdi, qword [r14]",
    "mov     r15d, dword [rdi+0x8]",
    "call    qword [r12]",
    "cmp     qword [r12], 0x0",
    "mov     ebx, eax",
    "je      0x103cc0",
    "test    eax, 0x100000",
    "jne     0x103e86",
    "jmp     0x103c59",
    "jmp     0x103eeb",
    "mov     rdi, qword [r14]",
    "test    rdi, rdi",
    "je      0x1038f6",
    "lea     rax, [rel rl_readline_state]",
    "mov     rax, qword [rax]",
    "test    eax, 0x100000",
    "jne     0x103e57",
    "lea     rax, [rel _rl_vimvcxt]",
    "mov     rbx, qword [rax]",
    "call    _rl_bracketed_read_key",
    "mov     dword [rbx+0x20], eax",
    "test    eax, eax",
    "js      0x103ea4",
    "test    ah, 0x4",
    "jne     0x103ec1",
    "call    rl_callback_read_char",
    "jmp     0x103b1d",
    "call    free",
    "mov     qword [r14], 0x0",
    "jmp     0x1038f6",
    "lea     rax, [rel _rl_vimvcxt]",
    "mov     edi, r15d",
    "mov     rsi, qword [rax]",
    "call    _rl_vi_domove_motion_cleanup",
    "call    _rl_internal_char_cleanup",
    "lea     rax, [rel rl_persistent_signal_handlers]",
    "mov     r8d, dword [rax]",
    "test    r8d, r8d",
    "jne     0x103b2f",
    "call    _rl_internal_char_cleanup",
    "lea     rax, [rel rl_readline_state]",
    "mov     rax, qword [rax]",
    "test    ah, 0x4",
    "jne     0x103b1d",
    "mov     rdi, rbx",
    "call    sub_e7360",
    "lea     rax, [rel _rl_argcxt]",
    "mov     edi, dword [rax]",
    "call    _rl_arg_callback",
    "mov     edx, eax",
    "mov     rax, qword [r12]",
    "test    edx, edx",
    "jne     0x103ef5",
    "test    eax, 0x200000",
    "jne     0x103d30",
    "jmp     0x103b2a",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0x103921",
    "lea     rax, [rel rl_done]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0x103b40",
    "call    _rl_internal_char_cleanup",
    "jmp     0x103b1d",
    "test    ah, 0x4",
    "jne     0x103b1d",
    "mov     rdx, rax",
    "and     edx, 0x20400",
    "cmp     rdx, 0x20000",
    "jne     0x103ef5",
    "lea     rax, [rel _rl_kscxt]",
    "mov     rdi, qword [rax]",
    "call    _rl_dispatch_callback",
    "mov     ebx, eax",
    "jmp     0x103d70",
    "lea     r12, [rel _rl_callback_func]",
    "mov     rax, qword [r12]",
    "test    rax, rax",
    "je      0x103de0",
    "test    ebx, ebx",
    "jle     0x103b5b",
    "lea     r12, [rel _rl_want_redisplay]",
    "mov     ecx, dword [r12]",
    "test    ecx, ecx",
    "je      0x103c98",
    "jmp     0x103eb7",
    "mov     rax, qword [r12]",
    "and     eax, 0x200000",
    "cmp     ebx, 0xfffffffe",
    "jae     0x103d48",
    "call    readline_internal_char",
    "mov     ebx, eax",
    "jmp     0x103910",
    "lea     r14, [rel _rl_callback_data]",
    "mov     rdi, qword [r14]",
    "call    rax",
    "cmp     qword [r12], 0x0",
    "mov     ebx, eax",
    "jne     0x103910",
    "mov     edi, ebx",
    "call    readline_internal_teardown",
    "mov     rbx, rax",
    "lea     rax, [rel rl_deprep_term_function]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x103b76",
    "lea     rax, [rel rl_eof_found]",
    "mov     dword [rax], ebx",
    "lea     rax, [rel rl_readline_state]",
    "or      qword [rax], 0x8000000",
    "test    ebx, ebx",
    "jle     0x103982",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "lea     rax, [rel rl_done]",
    "mov     dword [r12], 0x0",
    "mov     edx, dword [rax]",
    "test    ebx, ebx",
    "jle     0x10397a",
    "test    rax, rax",
    "je      0x103d87",
    "test    rax, rax",
    "jne     0x103910",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x103c80",
    "mov     rdi, qword [r14]",
    "test    rdi, rdi",
    "je      0x10390b",
    "call    rl_clear_signals",
    "lea     rax, [rel rl_linefunc]",
    "mov     dword [rel data_16abc8], 0x0",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x103ce0",
    "call    rax",
    "lea     rax, [rel rl_pending_input]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x103be8",
    "lea     rax, [rel rl_eof_found]",
    "mov     dword [rax], ebx",
    "lea     rax, [rel rl_readline_state]",
    "or      qword [rax], 0x8000000",
    "jmp     0x103982",
    "test    edx, edx",
    "jne     0x103b5b",
    "lea     rax, [rel rl_eof_found]",
    "mov     dword [rax], ebx",
    "lea     rax, [rel rl_readline_state]",
    "or      qword [rax], 0x8000000",
    "call    _rl_internal_char_cleanup",
    "lea     rax, [rel _rl_want_redisplay]",
    "mov     dword [rax], 0x1",
    "jmp     0x103910",
    "lea     rax, [rel _rl_kscxt]",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "je      0x103df0",
    "call    free",
    "mov     qword [r14], 0x0",
    "jmp     0x10390b",
    "lea     rax, [rel rl_line_buffer]",
    "mov     rax, qword [rax]",
    "cmp     byte [rax], 0x0",
    "je      0x103982",
    "mov     rdi, rbx",
    "call    rax",
    "lea     rax, [rel rl_line_buffer]",
    "mov     edx, dword [rel data_16abc8]",
    "mov     rax, qword [rax]",
    "cmp     byte [rax], 0x0",
    "jne     0x103da0",
    "mov     eax, dword [rel data_16a508]",
    "cmp     dword [rel data_16a50c], eax",
    "jne     0x103993",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x103c80",
    "test    byte [rdi], 0x1",
    "je      0x103df0",
    "lea     rdx, [rel rl_mark]",
    "mov     qword [rel data_169168], rax",
    "mov     dword [rdx], 0x0",
    "lea     rdx, [rel rl_end]",
    "mov     dword [rdx], 0x0",
    "lea     rdx, [rel rl_point]",
    "mov     dword [rdx], 0x0",
    "mov     byte [rax], 0x0",
    "jmp     0x103bbe",
    "lea     rcx, [rel rl_mark]",
    "mov     qword [rel data_169168], rax",
    "mov     dword [rcx], 0x0",
    "lea     rcx, [rel rl_end]",
    "mov     dword [rcx], 0x0",
    "lea     rcx, [rel rl_point]",
    "mov     dword [rcx], 0x0",
    "mov     byte [rax], 0x0",
    "jmp     0x103bb6",
    "test    edx, edx",
    "jne     0x103982",
    "lea     rax, [rel rl_readline_state]",
    "mov     rax, qword [rax]",
    "test    ah, 0x8",
    "jne     0x103993",
    "lea     rax, [rel rl_done]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "je      0x103932",
    "call    _rl_dispatch_callback",
    "mov     ebx, eax",
    "lea     rax, [rel rl_linefunc]",
    "cmp     qword [rax], 0x0",
    "je      0x103982",
    "jmp     0x103b1d",
    "jmp     0x103b5b",
    "call    sub_1028e0",
    "lea     rax, [rel rl_pending_input]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x103993",
    "nop     dword [rax]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}