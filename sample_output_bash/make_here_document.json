{
  "address": "0x46870",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "write file on Linux",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x48",
    "mov     eax, dword [rdi+0x18]",
    "mov     dword [rbp-0x48], esi",
    "mov     dword [rbp-0x44], eax",
    "sub     eax, 0x4",
    "and     eax, 0xfffffffb",
    "jne     0x46bef",
    "lea     rsi, [rel data_132940]  {\"make_here_document: bad instruct\u2026\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     esi, dword [rbp-0x44]",
    "add     rsp, 0x48",
    "pop     rbx",
    "mov     rdi, rax",
    "pop     r12",
    "xor     eax, eax",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     internal_error",
    "mov     rax, qword [rdi+0x20]",
    "xor     ecx, ecx",
    "mov     r15, rdi",
    "test    byte [rax+0x8], 0x2",
    "mov     r13, qword [rax]",
    "sete    cl",
    "mov     dword [rbp-0x38], ecx",
    "jne     0x46a58",
    "xor     esi, esi",
    "mov     rdi, r13",
    "call    string_quote_removal",
    "mov     qword [rbp-0x50], rax",
    "test    rax, rax",
    "jne     0x468e8",
    "mov     rdi, r13",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x46c75",
    "mov     rbx, qword [rbp-0x50]",
    "xor     r13d, r13d",
    "xor     r12d, r12d",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     dword [rbp-0x34], eax",
    "mov     rax, qword [r15+0x20]",
    "mov     rdi, qword [rax]",
    "call    free",
    "lea     rax, [rel here_doc_first_line]",
    "mov     qword [rbp-0x68], r15",
    "mov     qword [r15+0x28], rbx",
    "xor     ebx, ebx",
    "mov     qword [rbp-0x40], rax",
    "nop     ",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x46c45",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "call    __strcpy_chk",
    "mov     qword [rbp-0x50], r12",
    "mov     r15, qword [rbp-0x68]",
    "mov     rax, qword [rbp-0x40]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel line_number]",
    "add     dword [rax], 0x1",
    "lea     rax, [rel echo_input_at_read]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x46b80",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel here_doc_first_line]",
    "mov     qword [r15+0x28], rbx",
    "mov     byte [rbx], 0x0",
    "mov     qword [rbp-0x40], rax",
    "nop     word [rax+rax]",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x46c5d",
    "mov     byte [r12+rbx], 0x0",
    "mov     rax, qword [rel stderr]",
    "mov     rdi, r15",
    "mov     rsi, qword [rax]",
    "call    fputs",
    "jmp     0x46959",
    "cmp     dword [rbp-0x44], 0x8",
    "movzx   r14d, byte [r15]",
    "je      0x46ac0",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x0",
    "jmp     0x46a31",
    "test    r14b, r14b",
    "je      0x46920",
    "test    r14b, r14b",
    "je      0x46920",
    "mov     rax, qword [r15+0x20]",
    "mov     qword [rax], r12",
    "mov     rax, qword [rbp-0x40]",
    "mov     dword [rax], 0x0",
    "add     rsp, 0x48",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edi, dword [rbp-0x38]",
    "call    read_secondary_line",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x469ff",
    "mov     edx, dword [rbp-0x34]",
    "test    edx, edx",
    "je      0x46be8",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "je      0x46b28",
    "xor     edx, edx",
    "jmp     0x46af9",
    "mov     rax, qword [rbp-0x50]",
    "cmp     byte [rax], r14b",
    "jne     0x46b04",
    "cmp     r14b, 0xa",
    "je      0x46bc5",
    "mov     rax, qword [rbp-0x50]",
    "cmp     byte [rax], r14b",
    "je      0x46ba0",
    "cmp     byte [r15+rdx], 0xa",
    "je      0x46bc5",
    "cmp     r14b, 0x9",
    "jne     0x4696c",
    "movsxd  rdx, dword [rbp-0x34]",
    "mov     rsi, qword [rbp-0x50]",
    "mov     rdi, r15",
    "mov     qword [rbp-0x58], rdx",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x46b04",
    "mov     r15, qword [rbp-0x68]",
    "jmp     0x46a27",
    "lea     rax, [rel parser_state]",
    "mov     eax, dword [rax]",
    "test    ah, 0x80",
    "je      0x46984",
    "movsxd  r14, dword [rbp-0x34]",
    "mov     rsi, rax",
    "mov     rdi, r15",
    "mov     rdx, r14",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x46984",
    "mov     rdi, r15",
    "call    strlen",
    "lea     r14d, [rbx+rax]",
    "mov     rdx, rax",
    "cmp     r14d, r13d",
    "jl      0x469d7",
    "nop     ",
    "mov     rdx, qword [rbp-0x58]",
    "test    r12, r12",
    "je      0x46aa0",
    "lea     rax, [rel shell_eof_token]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0x46984",
    "cmp     byte [r15+r14], 0xa",
    "jne     0x46b32",
    "movsxd  rdi, ebx",
    "mov     rsi, r15",
    "movsxd  rdx, edx",
    "movsxd  rbx, r14d",
    "add     rdi, r12",
    "call    memcpy",
    "mov     edi, dword [rbp-0x38]",
    "call    read_secondary_line",
    "mov     r15, rax",
    "test    rax, rax",
    "jne     0x46934",
    "lea     eax, [r13+rax]",
    "lea     esi, [rdx+0x2]",
    "mov     qword [rbp-0x58], rdx",
    "add     eax, eax",
    "test    r13d, r13d",
    "cmove   eax, esi",
    "movsxd  rsi, eax",
    "mov     qword [rbp-0x60], rsi",
    "mov     r13, rsi",
    "test    r12, r12",
    "je      0x46bd0",
    "movzx   r14d, byte [r15+0x1]",
    "add     r15, 0x1",
    "cmp     r14b, 0x9",
    "je      0x46b10",
    "jmp     0x46967",
    "movsxd  r14, dword [rbp-0x34]",
    "add     r14, r15",
    "mov     rdi, r14",
    "call    strchr",
    "test    rax, rax",
    "je      0x46984",
    "mov     rdi, qword [rbp-0x60]",
    "call    malloc",
    "mov     rdx, qword [rbp-0x58]",
    "mov     r12, rax",
    "jmp     0x469ce",
    "mov     rdi, r12",
    "call    realloc",
    "mov     rdx, qword [rbp-0x58]",
    "mov     r12, rax",
    "mov     rdi, r14",
    "mov     r15, qword [rbp-0x68]",
    "call    shell_ungets",
    "jmp     0x46a03",
    "test    r12, r12",
    "je      0x46c1d",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x60]",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132970]  {\"here-document at line %d delimit\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x50]",
    "mov     esi, dword [rbp-0x48]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_warning"
  ]
}