{
  "address": "0xafe10",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     rax, [rel no_symbolic_links]",
    "lea     r12, [rel the_current_working_directory]",
    "mov     eax, dword [rax]",
    "mov     rbx, qword [r12]",
    "test    eax, eax",
    "je      0xafea0",
    "test    rbx, rbx",
    "jne     0xafe66",
    "test    rbx, rbx",
    "je      0xafe49",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0xaff2b",
    "jmp     0xafe51",
    "mov     qword [r12], 0x0",
    "mov     rdi, rbx",
    "call    free",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "add     rsp, 0x8",
    "mov     rcx, r12",
    "mov     rdx, r12",
    "mov     rsi, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "jmp     __memcpy_chk",
    "xor     esi, esi",
    "xor     edi, edi",
    "call    getcwd",
    "mov     qword [r12], rax",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xafeb0",
    "call    __errno_location",
    "mov     edi, dword [rax]",
    "call    strerror",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133cb8]  {\"getcwd: cannot access parent dir\u2026\"}",
    "xor     edi, edi",
    "mov     r12, rax",
    "call    dcgettext",
    "mov     rbx, rax",
    "test    r13, r13",
    "je      0xafee1",
    "call    get_name_for_error",
    "mov     r13, rax",
    "cmp     byte [r13], 0x0",
    "jne     0xafee9",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133ce8]  {\"%s: error retrieving current dir\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     r9, r12",
    "mov     r8, rbx",
    "mov     rcx, r13",
    "mov     rdx, rax",
    "mov     rax, qword [rel stderr]",
    "mov     esi, 0x2",
    "mov     rdi, qword [rax]",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "add     rsp, 0x8",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    "
  ]
}