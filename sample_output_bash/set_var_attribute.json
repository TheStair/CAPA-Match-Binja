{
  "address": "0xc35f0",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "mov     ebx, esi",
    "sub     rsp, 0x8",
    "test    edx, edx",
    "je      0xc3648",
    "lea     rax, [rel temporary_env]",
    "mov     r12, qword [rax]",
    "test    r12, r12",
    "je      0xc3750",
    "call    find_variable",
    "test    rax, rax",
    "je      0xc3635",
    "xor     esi, esi",
    "mov     rdi, r13",
    "call    sub_502c0",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xc37f0",
    "xor     edx, edx",
    "mov     rsi, r12",
    "call    hash_search",
    "test    rax, rax",
    "je      0xc3750",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     ecx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     edx, ebx",
    "not     edx",
    "and     edx, ecx",
    "or      ebx, ecx",
    "mov     dword [rax+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "xor     esi, esi",
    "mov     rdi, r13",
    "call    find_variable_nameref_for_create",
    "cmp     rax, qword [rel data_157f88]",
    "je      0xc3635",
    "mov     eax, dword [rax+0x28]",
    "test    ah, 0x8",
    "jne     0xc3790",
    "mov     r14, qword [rax+0x10]",
    "mov     qword [rel data_1619d8], r12",
    "test    r14, r14",
    "je      0xc3750",
    "lea     rax, [rel array_needs_making]",
    "add     dword [rax], 0x1",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, r13",
    "call    bind_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xc3635",
    "mov     rdi, r12",
    "call    find_variable_nameref",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xc37f0",
    "mov     edx, dword [r12+0x2c]",
    "test    edx, edx",
    "je      0xc373f",
    "test    byte [r14+0x2a], 0x10",
    "je      0xc3750",
    "mov     eax, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      ah, 0x10",
    "mov     dword [r12+0x28], eax",
    "jmp     0xc373f",
    "mov     eax, dword [rax+0x28]",
    "jmp     0xc376e",
    "or      ebx, eax",
    "mov     dword [r12+0x28], ebx",
    "jmp     0xc3626",
    "or      eax, 0x200000",
    "or      ebx, eax",
    "mov     dword [r12+0x28], eax",
    "mov     dword [r12+0x28], ebx",
    "jmp     0xc3626",
    "mov     r15, qword [r14+0x8]",
    "test    r15, r15",
    "je      0xc37a8",
    "and     ebx, 0x1",
    "je      0xc3635",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xc3884",
    "mov     rdi, r15",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xc386e",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r13], 0x0",
    "jmp     0xc36c8",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r12",
    "mov     rsi, r15",
    "mov     rdi, r13",
    "call    __strcpy_chk",
    "mov     rdi, qword [r14]",
    "xor     edx, edx",
    "mov     rsi, r13",
    "call    bind_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xc3858",
    "add     rsp, 0x8",
    "mov     rdi, r13",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     free",
    "mov     eax, dword [r14+0x28]",
    "and     eax, 0xffefffff",
    "or      dword [r12+0x28], eax",
    "lea     rax, [rel posixly_correct]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0xc3708",
    "mov     ecx, dword [r12+0x2c]",
    "test    ecx, ecx",
    "jne     0xc37d0",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x2c",
    "jg      0xc3726",
    "or      dword [r14+0x28], 0x200000",
    "test    bl, 0x2",
    "jne     0xc3830",
    "or      dword [r14+0x28], ebx",
    "mov     rdi, qword [r14]",
    "call    stupidly_hack_special_variables",
    "mov     rdi, r13",
    "call    free",
    "mov     eax, dword [r12+0x28]",
    "mov     rdi, qword [r14]",
    "call    find_global_variable",
    "cmp     r12, rax",
    "je      0xc3845",
    "or      dword [r14+0x28], 0x200000",
    "mov     eax, dword [r12+0x2c]",
    "test    eax, eax",
    "je      0xc3726",
    "or      dword [r14+0x28], 0x200000",
    "jmp     0xc37d8",
    "or      dword [r12+0x28], 0x200000",
    "jmp     0xc3726"
  ]
}