{
  "address": "0x7a460",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "decompress data using aPLib/38731ecee1994e99b9627ed54594e559",
    "contain loop",
    "parse credit card information/13344f2fc407429f96ab22837d31bdc8",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/0d50c454f5994bb894701c3c95f625c2",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae",
    "search for credit card data/02c50870cbec4ce382e9f19dfd1419be"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13d, r8d",
    "push    r12",
    "mov     r12, rsi",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x78",
    "mov     dword [rbp-0x80], ecx",
    "mov     r15, qword [rbp+0x10]",
    "mov     dword [rbp-0x7c], edx",
    "mov     qword [rbp-0x88], r9",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "and     ecx, 0x3",
    "mov     dword [rbp-0x8c], ecx",
    "je      0x7a538",
    "call    alloc_word_desc",
    "cmp     byte [r12], 0x0",
    "mov     dword [rbp-0x64], 0x0",
    "mov     qword [rbp-0x78], rax",
    "jne     0x7a730",
    "cmp     byte [rsi], 0x0",
    "mov     r14, rsi",
    "jne     0x7a600",
    "mov     eax, dword [rel data_1619c4]",
    "cmp     dword [rbp-0x7c], 0x3d",
    "mov     dword [rbp-0x90], eax",
    "je      0x7ac6b",
    "test    r15, r15",
    "je      0x7a55f",
    "lea     rsi, [rbp-0x68]",
    "mov     edx, 0x800",
    "mov     rdi, r12",
    "mov     dword [rbp-0x68], 0x0",
    "call    sub_702f0",
    "mov     r14, rax",
    "jmp     0x7a4b9",
    "call    alloc_word_desc",
    "mov     dword [rbp-0x64], 0x0",
    "cmp     byte [r14], 0x0",
    "mov     qword [rbp-0x78], rax",
    "jne     0x7a620",
    "mov     dword [rel data_1619c4], 0x1",
    "mov     r14, r12",
    "lea     rax, [rel ifs_is_null]",
    "mov     r14d, r13d",
    "and     r14d, 0x8",
    "mov     r10d, dword [rax]",
    "test    r10d, r10d",
    "jne     0x7acc0",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "je      0x7a786",
    "mov     dword [r15], 0x0",
    "mov     eax, dword [rel data_1619c4]",
    "mov     dword [rel data_1619c4], 0x1",
    "mov     dword [rbp-0x90], eax",
    "mov     eax, r13d",
    "and     eax, 0x8",
    "cmp     eax, 0x1",
    "sbb     eax, eax",
    "and     eax, 0xfffff800",
    "add     eax, 0x4840",
    "cmp     dword [rbp-0x7c], 0x3d",
    "mov     dword [rbp-0x58], eax",
    "je      0x7ac78",
    "test    r15, r15",
    "je      0x7a4df",
    "mov     rdi, r14",
    "call    strlen",
    "lea     rdx, [rax+0x1]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x98], rdx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x98]",
    "test    rax, rax",
    "mov     r13, rax",
    "je      0x7ae81",
    "test    r14d, r14d",
    "je      0x7ad12",
    "test    r14d, r14d",
    "mov     r14d, 0x1",
    "je      0x7ad12",
    "xor     r14d, r14d",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x7ae9e",
    "mov     dword [rbp-0x58], 0x6840",
    "jmp     0x7a658",
    "cmp     r12, r14",
    "je      0x7a55f",
    "mov     dword [r15], 0x0",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdi, r13",
    "mov     rsi, r14",
    "call    __strcpy_chk",
    "mov     esi, dword [rbp-0x80]",
    "xor     r8d, r8d",
    "lea     rcx, [rbp-0x64]",
    "lea     rdi, [rbp-0x60]",
    "mov     edx, 0x1",
    "mov     qword [rbp-0x60], r13",
    "call    sub_83630",
    "mov     r13, rax",
    "lea     rax, [rel data_1619a0]",
    "cmp     r13, rax",
    "lea     rax, [rel data_1619b0]",
    "je      0x7ae5c",
    "mov     eax, 0x4040",
    "jmp     0x7a774",
    "xor     r14d, r14d",
    "jmp     0x7a76f",
    "mov     eax, 0x4840",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x78]",
    "add     rsp, 0x78",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x0",
    "xor     r14d, r14d",
    "mov     rdi, r14",
    "call    free",
    "xor     r9d, r9d",
    "xor     edi, edi",
    "cmp     r13, rax",
    "lea     rcx, [rel last_command_exit_value]",
    "sete    dil",
    "mov     qword [rbp-0x60], r9",
    "add     edi, 0x1",
    "mov     dword [rcx], 0x1",
    "call    sub_85e80",
    "{ Does not return }",
    "cmp     r13, rax",
    "je      0x7ae5c",
    "mov     dword [rel data_1619c4], r14d",
    "mov     r14, r12",
    "mov     dword [rbp-0x58], eax",
    "jmp     0x7a658",
    "mov     r14, rbx",
    "call    __ctype_b_loc",
    "movzx   ecx, byte [rbx+0x1]",
    "mov     rdx, rax",
    "mov     rdx, qword [rdx]",
    "mov     rax, rcx",
    "test    byte [rdx+rcx*2+0x1], 0x4",
    "jne     0x7a8a8",
    "mov     edi, 0x3",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x7aebb",
    "mov     eax, dword [rbp-0x90]",
    "mov     rdi, qword [rbp-0x60]",
    "mov     dword [rel data_1619c4], eax",
    "call    free",
    "test    r15, r15",
    "je      0x7a700",
    "xor     edx, edx",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "call    bind_variable",
    "mov     r15, rax",
    "jmp     0x7a82f",
    "pxor    xmm0, xmm0",
    "lea     rcx, [rbp-0x60]",
    "mov     edx, 0x800",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "movaps  xmmword [rbp-0x50], xmm0",
    "mov     r13d, 0x1",
    "mov     rax, 0x8000000000000000",
    "mov     dword [rbp-0x60], 0xffff",
    "mov     qword [rbp-0x58], rax",
    "call    assign_array_element",
    "mov     r15, rax",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rbp-0xa0], rax",
    "test    al, al",
    "jne     0x7ac36",
    "cmp     cl, 0x5f",
    "je      0x7a8c5",
    "mov     esi, 0x3",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x78]",
    "mov     r11d, 0x7f",
    "mov     word [r14], r11w",
    "or      dword [rax+0x8], 0x40000",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "jne     0x7aaa0",
    "cmp     r12, r14",
    "je      0x7a70d",
    "mov     r8d, dword [rbp-0x64]",
    "test    r8d, r8d",
    "je      0x7a978",
    "test    r15, r15",
    "je      0x7a847",
    "lea     rax, [rel interactive_shell]",
    "mov     r8d, dword [rax]",
    "test    r8d, r8d",
    "jne     0x7a867",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    eax, 0x4002",
    "je      0x7ab50",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "jne     0x7a8d8",
    "lea     rdx, [rel sh_syntaxtab]",
    "mov     esi, 0x1",
    "test    byte [rdx+0x85], 0x8",
    "jne     0x7a8d8",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "jne     0x7a8d8",
    "lea     edx, [rcx-0x30]",
    "cmp     dl, 0x9",
    "jbe     0x7a8a8",
    "mov     rdi, r14",
    "call    dequote_string",
    "mov     r12, rax",
    "jmp     0x7a58c",
    "jmp     0x7a789",
    "test    r13, r13",
    "jne     0x7a99b",
    "mov     rdi, r14",
    "call    free",
    "test    r13, r13",
    "je      0x7ad85",
    "mov     dword [r15], 0x1",
    "nop     ",
    "cmp     r14, rbx",
    "je      0x7a874",
    "lea     rax, [rel posixly_correct]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "jne     0x7ab30",
    "mov     rdi, r14",
    "call    stupidly_hack_special_variables",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x33",
    "jle     0x7ab8f",
    "test    al, 0x2",
    "je      0x7a867",
    "mov     edx, dword [rbp-0x80]",
    "lea     rdi, [rbx+0x1]",
    "mov     ecx, 0x1",
    "call    sub_7a300",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x7a928",
    "lea     rdx, [rel posixly_correct]",
    "mov     r9d, dword [rdx]",
    "test    r9d, r9d",
    "jne     0x7ac59",
    "xor     esi, esi",
    "cmp     al, 0x2a",
    "sete    sil",
    "nop     dword [rax]",
    "lea     rdx, [rel posixly_correct]",
    "mov     r10d, dword [rdx]",
    "test    r10d, r10d",
    "jne     0x7a7b6",
    "mov     rdi, r14",
    "call    free",
    "cmp     byte [rbx], 0x21",
    "jne     0x7a7d0",
    "mov     rax, qword [rbp-0x78]",
    "mov     qword [rax], r14",
    "movzx   r12d, word [rel data_136aa4]",
    "mov     r14, r13",
    "nop     word [rax+rax]",
    "cmp     dword [rbp-0x8c], 0x0",
    "je      0x7a55f",
    "mov     dword [r15], 0x0",
    "cmp     r12, r14",
    "je      0x7a716",
    "xor     eax, eax",
    "cmp     qword [r13], 0x0",
    "setne   al",
    "mov     dword [r15], eax",
    "cmp     r12, r14",
    "je      0x7a99b",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edi, 0x2",
    "mov     dword [rax], 0x2",
    "call    sub_85e80",
    "{ Does not return }",
    "mov     rdi, r14",
    "call    free",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edi, 0x1",
    "mov     dword [rax], 0x1",
    "call    sub_85e80",
    "{ Does not return }",
    "cmp     r14, rbx",
    "je      0x7ab9c",
    "test    r12, r12",
    "je      0x7ab71",
    "lea     rsi, [rel data_133490]  {\"%s: invalid indirect expansion\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "cmp     byte [rax], 0x0",
    "je      0x7a928",
    "cmp     al, 0x40",
    "jne     0x7a8cd",
    "cmp     al, 0x3f",
    "je      0x7ac61",
    "cmp     al, 0x40",
    "je      0x7ac36",
    "cmp     cl, 0x23",
    "je      0x7a5f0",
    "mov     r14, qword [r14]",
    "test    r14, r14",
    "jne     0x7a9b0",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x7a9c6",
    "jmp     0x7a4ec",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x7a716",
    "mov     rdi, r14",
    "call    free",
    "mov     esi, dword [rbp-0x8c]",
    "test    esi, esi",
    "je      0x7ac84",
    "mov     rdi, r14",
    "call    free",
    "test    r13d, r13d",
    "je      0x7ad02",
    "mov     rdi, r12",
    "call    free",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7aeb6",
    "mov     rdi, rax",
    "call    legal_identifier",
    "test    eax, eax",
    "jne     0x7a7d3",
    "mov     esi, 0x1",
    "jmp     0x7a8d8",
    "cmp     al, 0x23",
    "je      0x7ac61",
    "cmp     al, 0x2a",
    "je      0x7ac36",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "sete    sil",
    "jmp     0x7a8d8",
    "cmp     cl, 0x3f",
    "jne     0x7a7b6",
    "mov     rax, qword [r14+0x8]",
    "test    rax, rax",
    "je      0x7aa08",
    "test    r13, r13",
    "je      0x7a716",
    "mov     edi, 0x3",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x7ae1b",
    "cmp     byte [rax], 0x0",
    "jne     0x7aa08",
    "mov     r12d, dword [rbp-0x64]",
    "test    r12d, r12d",
    "je      0x7a55f",
    "xor     esi, esi",
    "mov     rdi, r12",
    "call    sub_72bd0",
    "mov     rsi, qword [rbp-0x78]",
    "mov     rbx, rax",
    "mov     qword [rsi], rax",
    "test    rax, rax",
    "je      0x7a790",
    "cmp     byte [r12], 0x0",
    "je      0x7accd",
    "mov     rdi, r15",
    "call    get_variable_value",
    "mov     r12, rax",
    "jmp     0x7ab8f",
    "mov     rdi, qword [rbp-0x50]",
    "test    rdi, rdi",
    "je      0x7ab88",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    tokenize_array_reference",
    "mov     r13d, eax",
    "test    eax, eax",
    "je      0x7a890",
    "lea     rsi, [rel data_1208f0]  {\"%s: invalid variable name\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, r14",
    "mov     rdi, rax",
    "jmp     0x7a941",
    "nop     word [rax+rax]",
    "cmp     qword [rbp-0x88], 0x0",
    "mov     rax, qword [r13]",
    "je      0x7aabd",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edx, 0x3",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     word [rax], r12w",
    "mov     rdx, qword [r14+0x8]",
    "mov     rdi, qword [rdx]",
    "test    rdi, rdi",
    "je      0x7a9f5",
    "movzx   eax, byte [rax]",
    "test    al, al",
    "je      0x7a790",
    "mov     edi, 0x2",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7ae44",
    "mov     rdi, r12",
    "call    sub_87450",
    "mov     rsi, qword [rbp-0x78]",
    "mov     rbx, rax",
    "mov     qword [rsi], rax",
    "test    rax, rax",
    "je      0x321d3",
    "mov     r12, qword [rbp-0xa0]",
    "call    free",
    "xor     eax, eax",
    "call    report_error",
    "mov     rdi, r14",
    "call    free",
    "mov     rdi, r12",
    "call    free",
    "mov     rdi, qword [rbp-0x78]",
    "call    dispose_word",
    "lea     rax, [rel data_168580]",
    "mov     qword [rbp-0x78], rax",
    "jmp     0x7a790",
    "test    rax, rax",
    "jne     0x7aa4f",
    "mov     ecx, dword [rbp-0x64]",
    "test    ecx, ecx",
    "je      0x7aa39",
    "mov     eax, dword [rdx+0x8]",
    "mov     qword [rdx], r15",
    "and     eax, 0xffdfffff",
    "or      eax, 0x40002",
    "mov     dword [rdx+0x8], eax",
    "call    free",
    "mov     rdx, qword [r14+0x8]",
    "cmp     al, 0x7f",
    "je      0x7ae0f",
    "mov     esi, 0x2",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x78]",
    "mov     ecx, 0x7f",
    "mov     word [rbx], cx",
    "mov     qword [rsi], rbx",
    "movzx   eax, byte [rbx]",
    "test    al, al",
    "je      0x7a790",
    "movzx   eax, byte [0x0]",
    "ud2     ",
    "{ Does not return }",
    "movzx   eax, byte [rax]",
    "test    al, al",
    "je      0x7a790",
    "lea     rax, [rel ifs_is_null]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0x7ab10",
    "mov     ecx, dword [rbp-0x64]",
    "test    rax, rax",
    "je      0x7aac5",
    "mov     edi, dword [rbp-0x80]",
    "test    edi, edi",
    "jne     0x7aab0",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x7a790",
    "and     dword [rsi+0x8], 0xffdfffff",
    "jmp     0x7a790",
    "jmp     0x7abdb",
    "cmp     al, 0x7f",
    "je      0x7ada2",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rdi, r13",
    "call    string_list_internal",
    "mov     r14, rax",
    "mov     rax, qword [rbp-0x78]",
    "or      dword [rax+0x8], 0x8",
    "jmp     0x7aa6b",
    "mov     rdi, r13",
    "call    sub_118260",
    "mov     r14, rax",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rdi, r13",
    "call    string_list_internal",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x7aa6b",
    "test    ecx, ecx",
    "jne     0x7aa60",
    "mov     rax, qword [rbp-0x88]",
    "mov     dword [rax], 0x1",
    "mov     rsi, qword [rbp-0x88]",
    "mov     dword [rsi], 0x1",
    "jmp     0x7adac",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x7abea",
    "and     dword [rsi+0x8], 0xffdfffff",
    "cmp     qword [r13], 0x0",
    "jne     0x7aa80",
    "mov     rdi, r13",
    "call    dispose_words",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "je      0x7a789",
    "mov     ecx, dword [rbp-0x8c]",
    "test    ecx, ecx",
    "jne     0x7ac10",
    "cmp     byte [r14], 0x7f",
    "mov     rax, qword [r13]",
    "je      0x7ad55",
    "mov     rax, qword [rbp-0x78]",
    "mov     edx, dword [rbp-0x8c]",
    "and     dword [rax+0x8], 0xffdfffff",
    "test    edx, edx",
    "jne     0x7abea",
    "cmp     byte [rbx], 0x7f",
    "jne     0x7a790",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x7a790",
    "test    r14, r14",
    "je      0x7a56e",
    "cmp     byte [r14], 0x7f",
    "je      0x7ad1c",
    "cmp     byte [r14+0x1], 0x0",
    "jne     0x7aaee",
    "mov     rax, qword [r13+0x8]",
    "test    byte [rax+0xa], 0x20",
    "je      0x7aa6b",
    "jmp     0x7a790",
    "mov     rax, qword [rbp-0x78]",
    "or      dword [rax+0x8], 0x40000",
    "jmp     0x7a790",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "cmp     byte [r14+0x1], 0x0",
    "mov     r12d, eax",
    "jne     0x7ad3f",
    "mov     rdi, r13",
    "call    dispose_words",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "jne     0x7aaa0",
    "test    rax, rax",
    "jne     0x7ac1a",
    "mov     rax, qword [rbp-0x78]",
    "or      dword [rax+0x8], 0x200000",
    "jmp     0x7aa6b",
    "mov     rdi, r13",
    "call    dispose_words",
    "test    r12d, r12d",
    "jne     0x7aaa0",
    "mov     rax, qword [r13+0x8]",
    "mov     rcx, qword [rax]",
    "cmp     byte [rcx], 0x7f",
    "je      0x7adca",
    "jmp     0x7a789",
    "mov     eax, dword [rbp-0x8c]",
    "test    eax, eax",
    "je      0x7ac1a",
    "jmp     0x7a789",
    "cmp     byte [rcx+0x1], 0x0",
    "jne     0x7ad3f",
    "mov     eax, dword [rbp-0x7c]",
    "sub     eax, 0x2b",
    "and     eax, 0xfffffffd",
    "mov     r12d, eax",
    "jmp     0x7ad2f",
    "test    byte [rax+0xa], 0x4",
    "je      0x7ad3f",
    "mov     rax, qword [rbp-0x78]",
    "or      dword [rax+0x8], 0x40000",
    "mov     rax, qword [rbp-0x88]",
    "test    rax, rax",
    "je      0x7ad3f",
    "mov     edx, dword [rbp-0x64]",
    "test    edx, edx",
    "je      0x7ad3f",
    "xor     r15d, r15d",
    "mov     dword [rax], r15d",
    "jmp     0x7ad3f"
  ]
}