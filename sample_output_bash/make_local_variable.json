{
  "address": "0x54c20",
  "rules": [
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "contain loop",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12d, esi",
    "xor     esi, esi",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x28",
    "lea     rax, [rel expanding_redir]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x54c62",
    "mov     rdi, rbx",
    "call    sub_502c0",
    "mov     rdi, rbx",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x54c7f",
    "lea     rax, [rel assigning_in_environment]",
    "lea     rdx, [rel executing_builtin]",
    "xor     esi, esi",
    "mov     eax, dword [rax]",
    "or      eax, dword [rdx]",
    "setne   sil",
    "call    find_variable",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x55068",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x8",
    "jne     0x54d30",
    "mov     qword [rbp-0x40], 0x0",
    "lea     rcx, [rel shell_variables]",
    "mov     dword [rbp-0x34], 0x0",
    "jmp     0x54cd7",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dl, 0x20",
    "je      0x54d42",
    "call    find_variable",
    "mov     edx, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dl, 0x20",
    "jne     0x54c9c",
    "mov     r13, qword [rcx]",
    "test    r13, r13",
    "je      0x54d0a",
    "lea     rcx, [rel shell_variables]",
    "mov     edi, edx",
    "and     edi, 0x100000",
    "mov     dword [rbp-0x34], edi",
    "mov     rax, qword [rcx]",
    "je      0x54f58",
    "lea     rax, [rel variable_context]",
    "mov     r14, r15",
    "mov     eax, dword [rax]",
    "cmp     dword [r15+0x2c {Elf64_Header::section_header_offset+4.d}], eax",
    "je      0x54f29",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132ba0]  {\"make_local_variable: no function\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "jmp     0x550ad",
    "lea     rax, [rel variable_context]",
    "mov     eax, dword [rax]",
    "nop     dword [rax+rax]",
    "mov     qword [rbp-0x40], 0x0",
    "jmp     0x54cd7",
    "lea     rsi, [rel variable_context]",
    "mov     esi, dword [rsi]",
    "cmp     dword [r15+0x2c {Elf64_Header::section_header_offset+4.d}], esi",
    "jne     0x54cc8",
    "add     rsp, 0x28",
    "mov     rax, r14",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "and     edx, 0x100000",
    "mov     dword [rbp-0x34], edx",
    "je      0x54f40",
    "xor     r14d, r14d",
    "jmp     0x54f29",
    "mov     r13, qword [r13+0x18]",
    "test    r13, r13",
    "jne     0x54cf0",
    "cmp     dword [r13+0x8], eax",
    "je      0x54df0",
    "mov     rax, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     dword [rbp-0x34], 0x1",
    "mov     qword [rbp-0x40], rax",
    "lea     rdi, [rel temporary_env]",
    "mov     rdi, qword [rdi]",
    "cmp     qword [rel data_1619d8], rdi",
    "je      0x54cc8",
    "mov     qword [rbp-0x40], 0x0",
    "lea     rcx, [rel shell_variables]",
    "jmp     0x54cd7",
    "lea     rcx, [rel shell_variables]",
    "test    byte [r13+0xc], 0x4",
    "je      0x54d01",
    "cmp     qword [r13+0x20], 0x0",
    "je      0x55050",
    "and     dh, 0xef",
    "mov     dword [r15+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "test    rax, rax",
    "jne     0x54dad",
    "mov     edi, 0x4",
    "call    hash_create",
    "mov     qword [r13+0x20], rax",
    "jmp     0x54dfb",
    "test    r15, r15",
    "je      0x55028",
    "mov     ecx, dword [rax+0xc]",
    "test    cl, 0x4",
    "je      0x54da0",
    "jmp     0x550f4",
    "mov     rsi, qword [r13+0x20]",
    "mov     rdi, rbx",
    "call    sub_54b40",
    "mov     edx, dword [r13+0xc]",
    "mov     r14, rax",
    "lea     rax, [rel variable_context]",
    "mov     esi, dword [rax]",
    "mov     eax, dword [r14+0x28]",
    "jmp     0x54ef8",
    "mov     edx, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dh, 0x40",
    "jne     0x55088",
    "mov     rax, qword [rax+0x18]",
    "test    rax, rax",
    "je      0x550f4",
    "cmp     esi, dword [rax+0x8]",
    "jne     0x54da0",
    "mov     eax, dword [0xc]",
    "ud2     ",
    "{ Does not return }",
    "or      edx, 0x1",
    "or      eax, 0x20",
    "mov     dword [r13+0xc], edx",
    "mov     dword [r14+0x2c], esi",
    "mov     dword [r14+0x28], eax",
    "cmp     byte [rbx], 0x49",
    "je      0x54fa8",
    "and     edx, 0x2",
    "lea     rsi, [rel data_132be0]  {\"%s: variable may not be assigned\u2026\"}",
    "mov     edx, 0x5",
    "jne     0x550ba",
    "mov     rax, 0xffffffff00000002",
    "and     rax, qword [r15+0x28 {Elf64_Header::section_header_offset}]",
    "cmp     rax, 0x2",
    "je      0x550b5",
    "or      ecx, 0x1",
    "or      edx, 0x20",
    "mov     r14, r15",
    "mov     dword [rax+0xc], ecx",
    "mov     dword [r15+0x2c {Elf64_Header::section_header_offset+4.d}], esi",
    "mov     dword [r15+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "cmp     byte [rbx], 0x49",
    "jne     0x54f29",
    "cmp     byte [rbx+0x1], 0x46",
    "jne     0x54f13",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "jne     0x54f29",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fcf9]  {\"%s: readonly variable\"}",
    "jmp     0x55099",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "and     edx, 0x2",
    "je      0x550ad",
    "mov     rsi, qword [r13+0x20]",
    "mov     rdi, rbx",
    "and     r12d, 0x4",
    "call    sub_54b40",
    "mov     edx, dword [rbp-0x34]",
    "mov     r14, rax",
    "test    edx, edx",
    "jne     0x54fd8",
    "cmp     byte [rbx+0x1], 0x46",
    "jne     0x54f29",
    "cmp     byte [rbx+0x2], 0x53",
    "jne     0x54f13",
    "cmp     qword [r14+0x8], 0x0",
    "jne     0x54f29",
    "mov     rdi, qword [rbp-0x40]",
    "call    strlen",
    "lea     rdx, [rax+0x1]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x48], rdx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x48]",
    "test    rax, rax",
    "mov     r10, rax",
    "je      0x550fd",
    "lea     rcx, [rel localvar_inherit]",
    "mov     edi, r12d",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      edi, dword [rcx]",
    "je      0x54f68",
    "mov     dword [rbp-0x34], 0x1",
    "jmp     0x54fb2",
    "cmp     byte [rbx+0x3], 0x0",
    "jne     0x54f13",
    "or      dword [r14+0x28], 0x1000",
    "mov     qword [rbp-0x50], rax",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x40]",
    "mov     rdi, r10",
    "call    __strcpy_chk",
    "lea     rdx, [rel localvar_inherit]",
    "mov     qword [r14+0x8], rax",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      r12d, dword [rdx]",
    "jmp     0x54ed0",
    "lea     rcx, [rel variable_context]",
    "and     eax, 0x1",
    "mov     edx, dword [r13+0xc]",
    "mov     dword [r14+0x28], eax",
    "mov     esi, dword [rcx]",
    "jmp     0x54ef8",
    "mov     r10, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    al, 0x40",
    "jne     0x54f81",
    "mov     rdi, r14",
    "call    setifs",
    "jmp     0x54f13",
    "test    r12d, r12d",
    "je      0x54f68",
    "xor     esi, esi",
    "mov     rdi, r10",
    "call    hash_copy",
    "lea     rcx, [rel localvar_inherit]",
    "mov     qword [r14+0x8], rax",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      r12d, dword [rcx]",
    "jmp     0x54ed0",
    "test    al, 0x4",
    "jne     0x550c8",
    "lea     rcx, [rel variable_context]",
    "and     ah, 0xf7",
    "movdqu  xmm0, xmmword [r15+0x18 {Elf64_Header::entry}] {Elf64_Header::program_header_offset}",
    "mov     dword [r14+0x28], eax",
    "mov     edx, dword [r13+0xc]",
    "mov     esi, dword [rcx]",
    "movups  xmmword [r14+0x18], xmm0",
    "mov     rdi, r10",
    "call    array_copy",
    "lea     rcx, [rel localvar_inherit]",
    "mov     qword [r14+0x8], rax",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      r12d, dword [rcx]",
    "jmp     0x54ed0",
    "test    r10, r10",
    "je      0x550e7",
    "mov     qword [r14+0x8], 0x0",
    "jmp     0x54ed9",
    "mov     rdi, r10",
    "mov     qword [rbp-0x48], r10",
    "call    strlen",
    "lea     rdx, [rax+0x1]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x40], rdx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x40]",
    "mov     r10, qword [rbp-0x48]",
    "test    rax, rax",
    "mov     r11, rax",
    "je      0x5511f",
    "mov     qword [rbp-0x48], rax",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x50], r10",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r10",
    "mov     rdi, r11",
    "call    __strcpy_chk",
    "lea     rcx, [rel localvar_inherit]",
    "mov     qword [r14+0x8], rax",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "or      r12d, dword [rcx]",
    "nop     word [rax+rax]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}