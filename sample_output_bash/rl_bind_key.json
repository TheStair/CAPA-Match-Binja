{
  "address": "0xecfa0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/811ca4c4f8d549569ea2aaef177bf1ac",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/e07fefb4fc9348cdbcc471f43936d29f",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/19c5b9e7682744d8b574f82a4f55cf68",
    "encrypt data using Curve25519/71854cb5ec3d414da844548a1a695b22",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/71ff62d8869d418e88d129a8b5fcc11b"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x20",
    "mov     rdx, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rdx",
    "xor     edx, edx",
    "mov     edx, edi",
    "cmp     edi, 0xff",
    "ja      0xed01a",
    "mov     rax, qword [rbp-0x18]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xed148",
    "lea     r12, [rel _rl_keymap]",
    "lea     edx, [rdi-0x80]",
    "mov     eax, edi",
    "mov     rcx, qword [r12]",
    "cmp     edx, 0x7f",
    "jbe     0xed040",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x20",
    "mov     eax, edx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel _rl_convert_meta_chars_to_ascii]",
    "movsxd  rdx, dword [rdx]",
    "test    edx, edx",
    "je      0xed090",
    "movsxd  rbx, edi",
    "shl     rbx, 0x4",
    "lea     r8, [rcx+rbx]",
    "movzx   edi, byte [r8]",
    "cmp     dil, 0x1",
    "je      0xed0d8",
    "movsxd  rbx, edi",
    "shl     rbx, 0x4",
    "lea     r8, [rcx+rbx]",
    "movzx   edi, byte [r8]",
    "cmp     dil, 0x1",
    "jne     0xecff6",
    "and     al, 0x7f",
    "cmp     byte [rcx+0x1b0], 0x1",
    "je      0xed120",
    "mov     r8d, 0x1",
    "xor     edx, edx",
    "jmp     0xed06c",
    "cmp     dil, 0x2",
    "je      0xed100",
    "mov     edi, 0x1",
    "cdqe    ",
    "xor     edx, edx",
    "shl     rax, 0x4",
    "add     rax, qword [rcx+0x1b8]",
    "mov     byte [rax], 0x0",
    "mov     qword [rax+0x8], rsi",
    "jmp     0xed01a",
    "mov     byte [rbp-0x1c], 0x1b",
    "mov     r8d, 0x2",
    "mov     edx, 0x1",
    "cmp     eax, 0x5c",
    "je      0xed0e8",
    "mov     rdi, qword [r8+0x8]",
    "test    rdi, rdi",
    "je      0xed000",
    "mov     rax, qword [r12]",
    "add     rbx, rax",
    "mov     byte [rbx], 0x0",
    "mov     qword [rbx+0x8], rsi",
    "lea     rdx, [rel rl_binding_keymap]",
    "mov     qword [rdx], rax",
    "xor     edx, edx",
    "movsxd  rax, edx",
    "lea     edi, [rdx+0x2]",
    "mov     byte [rbp+rax-0x1c], 0x5c",
    "mov     byte [rbp+r8-0x1c], 0x5c",
    "jmp     0xed0b2",
    "test    eax, eax",
    "jne     0xed140",
    "mov     qword [rbp-0x28], rsi",
    "call    free",
    "mov     rsi, qword [rbp-0x28]",
    "jmp     0xed000",
    "movsxd  rax, edi",
    "mov     rdx, rsi",
    "xor     edi, edi",
    "mov     byte [rbp+rax-0x1c], 0x0",
    "lea     rax, [rbp-0x1c]",
    "mov     rsi, rax",
    "call    rl_generic_bind",
    "mov     rax, qword [r12]",
    "jmp     0xed00e",
    "mov     edi, r8d",
    "jmp     0xed0ae",
    "movsxd  rax, edx",
    "lea     edi, [rdx+0x2]",
    "mov     byte [rbp+rax-0x1c], 0x5c",
    "mov     byte [rbp+r8-0x1c], 0x30",
    "jmp     0xed0b2",
    "mov     byte [rbp+rdx-0x1c], al"
  ]
}