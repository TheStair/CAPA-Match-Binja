{
  "address": "0xecfa0",
  "rules": [
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "encrypt data using Curve25519/7d070d905d0942e295bbb2c9df72fc86"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x20",
    "mov     rdx, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rdx",
    "xor     edx, edx",
    "mov     edx, edi",
    "cmp     edi, 0xff",
    "ja      0xed01a",
    "mov     rax, qword [rbp-0x18]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xed148",
    "lea     r12, [rel _rl_keymap]",
    "lea     edx, [rdi-0x80]",
    "mov     eax, edi",
    "mov     rcx, qword [r12]",
    "cmp     edx, 0x7f",
    "jbe     0xed040",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x20",
    "mov     eax, edx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel _rl_convert_meta_chars_to_ascii]",
    "movsxd  rdx, dword [rdx]",
    "test    edx, edx",
    "je      0xed090",
    "movsxd  rbx, edi",
    "shl     rbx, 0x4",
    "lea     r8, [rcx+rbx]",
    "movzx   edi, byte [r8]",
    "cmp     dil, 0x1",
    "je      0xed0d8",
    "movsxd  rbx, edi",
    "shl     rbx, 0x4",
    "lea     r8, [rcx+rbx]",
    "movzx   edi, byte [r8]",
    "cmp     dil, 0x1",
    "jne     0xecff6",
    "and     al, 0x7f",
    "cmp     byte [rcx+0x1b0], 0x1",
    "je      0xed120",
    "mov     r8d, 0x1",
    "xor     edx, edx",
    "jmp     0xed06c",
    "cmp     dil, 0x2",
    "je      0xed100",
    "mov     edi, 0x1",
    "cdqe    ",
    "xor     edx, edx",
    "shl     rax, 0x4",
    "add     rax, qword [rcx+0x1b8]",
    "mov     byte [rax], 0x0",
    "mov     qword [rax+0x8], rsi",
    "jmp     0xed01a",
    "mov     byte [rbp-0x1c], 0x1b",
    "mov     r8d, 0x2",
    "mov     edx, 0x1",
    "cmp     eax, 0x5c",
    "je      0xed0e8",
    "mov     rdi, qword [r8+0x8]",
    "test    rdi, rdi",
    "je      0xed000",
    "mov     rax, qword [r12]",
    "add     rbx, rax",
    "mov     byte [rbx], 0x0",
    "mov     qword [rbx+0x8], rsi",
    "lea     rdx, [rel rl_binding_keymap]",
    "mov     qword [rdx], rax",
    "xor     edx, edx",
    "movsxd  rax, edx",
    "lea     edi, [rdx+0x2]",
    "mov     byte [rbp+rax-0x1c], 0x5c",
    "mov     byte [rbp+r8-0x1c], 0x5c",
    "jmp     0xed0b2",
    "test    eax, eax",
    "jne     0xed140",
    "mov     qword [rbp-0x28], rsi",
    "call    free",
    "mov     rsi, qword [rbp-0x28]",
    "jmp     0xed000",
    "movsxd  rax, edi",
    "mov     rdx, rsi",
    "xor     edi, edi",
    "mov     byte [rbp+rax-0x1c], 0x0",
    "lea     rax, [rbp-0x1c]",
    "mov     rsi, rax",
    "call    rl_generic_bind",
    "mov     rax, qword [r12]",
    "jmp     0xed00e",
    "mov     edi, r8d",
    "jmp     0xed0ae",
    "movsxd  rax, edx",
    "lea     edi, [rdx+0x2]",
    "mov     byte [rbp+rax-0x1c], 0x5c",
    "mov     byte [rbp+r8-0x1c], 0x30",
    "jmp     0xed0b2",
    "mov     byte [rbp+rdx-0x1c], al"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}