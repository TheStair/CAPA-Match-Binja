{
  "address": "0xda520",
  "rules": [
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "push    r12",
    "lea     r12, [rbp-0xb0]",
    "push    rbx",
    "mov     rbx, rdi",
    "mov     rdi, r12",
    "sub     rsp, 0x130",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x28], rax",
    "xor     eax, eax",
    "call    sigemptyset",
    "mov     esi, 0x11",
    "mov     rdi, r12",
    "call    sigaddset",
    "xor     esi, esi",
    "lea     rdi, [rbp-0x140]",
    "call    gettimeofday",
    "test    eax, eax",
    "js      0xda680",
    "test    byte [rbx+0x14], 0x4",
    "jne     0xda6b4",
    "mov     rcx, qword [rbp-0x140]",
    "mov     rax, qword [rbx]",
    "cmp     rcx, rax",
    "jle     0xda5d0",
    "lea     rdi, [rbx+0x30]",
    "mov     esi, 0x1",
    "call    __longjmp_chk",
    "{ Does not return }",
    "mov     eax, 0xffffffff",
    "jmp     0xda5a8",
    "mov     rsi, qword [rbp-0x138]",
    "mov     rdx, qword [rbx+0x8]",
    "je      0xda690",
    "test    byte [rbx+0x14], 0x4",
    "jne     0xda6b4",
    "mov     rdx, qword [rbp-0x28]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xda6af",
    "cmp     rdx, rsi",
    "jle     0xda589",
    "sub     rax, rcx",
    "sub     rdx, rsi",
    "jns     0xda5f4",
    "mov     rax, qword [rbx+0xf8]",
    "test    rax, rax",
    "je      0xda6a8",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x130",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "sub     rdx, rsi",
    "xor     eax, eax",
    "jmp     0xda5f4",
    "imul    rdx, rdx, 0x3e8",
    "mov     r13d, 0xffffffff",
    "lea     r14, [rbp-0x130]",
    "mov     qword [rbp-0x150], rax",
    "mov     ecx, 0x10",
    "mov     rdi, r14",
    "mov     qword [rbp-0x148], rdx",
    "mov     edx, dword [rbx+0x10]",
    "test    edx, edx",
    "cmovns  r13d, edx",
    "xor     eax, eax",
    "rep stosq qword [rdi]",
    "add     r13d, 0x1",
    "test    edx, edx",
    "js      0xda652",
    "sub     rax, 0x1",
    "add     rdx, 0xf4240",
    "xor     eax, eax",
    "jmp     0xda5a8",
    "mov     rdi, rbx",
    "call    rax",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "mov     r9, r12",
    "mov     rsi, r14",
    "lea     r8, [rbp-0x150]",
    "mov     edi, r13d",
    "call    pselect",
    "test    eax, eax",
    "jne     0xda5a8",
    "movsxd  rdi, edx",
    "call    __fdelt_chk",
    "mov     ecx, dword [rbx+0x10]",
    "mov     rdx, rax",
    "mov     eax, 0x1",
    "shl     rax, cl",
    "or      qword [rbp+rdx*8-0x130], rax",
    "jmp     0xda589"
  ]
}