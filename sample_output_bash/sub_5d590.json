{
  "address": "0x5d590",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     rbx, rdi",
    "sub     rsp, 0x18",
    "lea     r12, [rel shell_variables]",
    "lea     r13, [rel global_variables]",
    "mov     r15, qword [r12]  {shell_variables}",
    "mov     r14, qword [r15+0x20]",
    "test    r14, r14",
    "je      0x5d718",
    "cmp     r15, qword [r13]",
    "je      0x5d744  {global_variables}",
    "mov     rsi, qword [rbx+0x8]",
    "mov     rdi, qword [rbx]",
    "xor     ecx, ecx  {0x0}",
    "mov     r8d, 0x220",
    "mov     rdx, r14",
    "call    sub_55a00",
    "test    rax, rax",
    "je      0x5d6e8",
    "mov     edi, 0x400",
    "call    hash_create",
    "mov     qword [r15+0x20], rax",
    "mov     r14, rax",
    "mov     rax, qword [r12]  {shell_variables}",
    "mov     qword [rax+0x20], r14",
    "jmp     0x5d5c7",
    "mov     edi, 0x4",
    "call    hash_create",
    "mov     qword [r15+0x20], rax",
    "mov     r14, rax",
    "jmp     0x5d5c7",
    "mov     rdx, qword [r13]  {global_variables}",
    "mov     eax, dword [rbx+0x28]",
    "cmp     qword [rdx+0x20], r14",
    "je      0x5d762",
    "mov     rcx, qword [r12]  {shell_variables}",
    "mov     rsi, qword [r13]  {global_variables}",
    "mov     edx, dword [rcx+0x8]",
    "mov     dword [rax+0x2c], edx",
    "mov     edx, dword [rbx+0x28]",
    "cmp     r14, qword [rsi+0x20]",
    "je      0x5d678",
    "and     eax, 0xffcfffff",
    "mov     dword [rbx+0x28], eax",
    "jmp     0x5d614",
    "or      eax, 0x200000",
    "mov     dword [rbx+0x28], eax",
    "mov     rax, qword [r12]  {shell_variables}",
    "cmp     qword [rax+0x20], r14",
    "jne     0x5d614",
    "and     edx, 0xffcfffff",
    "mov     dword [rbx+0x28], edx",
    "jmp     0x5d611",
    "or      edx, 0x200000",
    "mov     dword [rbx+0x28], edx",
    "cmp     qword [rcx+0x20], r14",
    "je      0x5d738",
    "mov     rdi, qword [rel data_1599e0]",
    "mov     r12, qword [rbx]",
    "test    rdi, rdi",
    "je      0x5d65d",
    "or      dword [rax+0xc], 0x2",
    "jmp     0x5d614",
    "or      dword [rax+0x28], edx",
    "or      dword [rcx+0xc], 0x2",
    "mov     edx, dword [rbx+0x28]",
    "jmp     0x5d611",
    "add     rsp, 0x18",
    "mov     rdi, rbx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     dispose_variable",
    "movsx   r14d, byte [r12]",
    "lea     r13, [rel data_1599f0]",
    "jmp     0x5d645",
    "movsx   eax, byte [rdi]",
    "sub     eax, r14d",
    "jne     0x5d659",
    "test    eax, eax",
    "jle     0x5d638",
    "mov     rsi, r12",
    "call    strcmp",
    "test    eax, eax",
    "je      0x5d688",
    "mov     rdi, qword [r13]",
    "add     r13, 0x10",
    "test    rdi, rdi",
    "je      0x5d65d",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5d76f",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel tempvar_list]",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "mov     rcx, qword [rax]  {tempvar_list}",
    "lea     rax, [rel tvlist_ind]",
    "movsxd  r15, dword [rax]  {tvlist_ind}",
    "mov     qword [rbp-0x38 {var_40_1}], rcx",
    "lea     edx, [r15+0x1]",
    "mov     dword [rax], edx  {tvlist_ind}",
    "mov     rdx, r13",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x38 {var_40_1}]",
    "mov     qword [rcx+r15*8], r14",
    "jmp     0x5d65d"
  ]
}