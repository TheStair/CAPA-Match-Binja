{
  "address": "0xd76c0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data using aphash/ef28217586414e46ab1e9ea5fafa8c30",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/37fcdffa79f84274a0a7280c1c8f403a",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/2595307ea71d425c8c0b4e2392af2cf7",
    "contain loop",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/ba22e5cbb4214cdaa9e658605c2a045c",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/03953aa079f14ec384dfb3745989fa21"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "movsxd  r14, esi",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "mov     rbx, r14",
    "add     r14, rdi",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "test    edx, edx",
    "jne     0xd7828",
    "call    __ctype_get_mb_cur_max",
    "lea     ebx, [rbx+rbx+0x1]",
    "mov     dword [rbp-0x44], eax",
    "jmp     0xd770d",
    "mov     dword [rbp-0x44], 0x1",
    "add     ebx, 0x3",
    "movsxd  rbx, ebx",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xd7880",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r15], 0x22",
    "lea     rbx, [r15+0x1]",
    "mov     eax, 0x22",
    "mov     word [rbx], ax",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd787b",
    "nop     dword [rax]",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "add     r12, 0x1",
    "mov     byte [rbx], cl",
    "add     rbx, 0x1",
    "movzx   ecx, byte [r12]",
    "test    cl, cl",
    "jne     0xd7738",
    "lea     rax, [rel locale_utf8locale]",
    "mov     eax, dword [rax]",
    "cmp     cl, 0x22",
    "je      0xd77b0",
    "test    r13d, r13d",
    "je      0xd7768",
    "lea     rdx, [rbx+0x1]",
    "mov     byte [rbx], 0x5c",
    "mov     rbx, rdx",
    "test    eax, eax",
    "jne     0xd7768",
    "test    eax, eax",
    "je      0xd77be",
    "cmp     dword [rbp-0x44], 0x1",
    "jle     0xd7768",
    "test    cl, cl",
    "jns     0xd7768",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "jne     0xd7768",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jg      0xd7840",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jle     0xd7768",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "mov     edx, 0x1",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0xd77e8",
    "nop     dword [rax+rax]",
    "mov     rax, qword [rbp-0x40]",
    "mov     rdx, r14",
    "xor     edi, edi",
    "lea     rcx, [rbp-0x40]",
    "sub     rdx, r12",
    "mov     rsi, r12",
    "mov     qword [rbp-0x50], rax",
    "call    mbrtowc",
    "mov     edx, 0x1",
    "test    rax, rax",
    "cmovne  rdx, rax",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0xd785d",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x50], rdx",
    "call    memcpy",
    "mov     rdx, qword [rbp-0x50]",
    "add     r12, rdx",
    "add     rbx, rdx",
    "jmp     0xd772c",
    "mov     rax, qword [rbp-0x50]",
    "mov     edx, 0x1",
    "mov     qword [rbp-0x40], rax",
    "jmp     0xd785d",
    "movzx   ecx, byte [r12]",
    "test    cl, cl",
    "je      0xd777b"
  ]
}