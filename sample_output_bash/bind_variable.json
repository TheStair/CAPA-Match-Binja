{
  "address": "0x56300",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "lea     rax, [rel shell_variables]",
    "mov     qword [rbp-0x38], rdi",
    "mov     qword [rbp-0x48], rsi",
    "cmp     qword [rax], 0x0",
    "mov     dword [rbp-0x4c], edx",
    "je      0x565d0",
    "call    sub_51d30",
    "jmp     0x56331",
    "lea     rax, [rel temporary_env]",
    "mov     rbx, qword [rax]",
    "test    rbx, rbx",
    "je      0x563d0",
    "lea     rax, [rel shell_variables]",
    "mov     rbx, qword [rax]",
    "test    rbx, rbx",
    "je      0x565a1",
    "cmp     qword [rbp-0x48], 0x0",
    "je      0x563d0",
    "lea     rax, [rel global_variables]",
    "mov     r8d, dword [rbp-0x4c]",
    "xor     ecx, ecx",
    "mov     rsi, qword [rbp-0x48]",
    "mov     rdi, qword [rbp-0x38]",
    "mov     rax, qword [rax]",
    "mov     rdx, qword [rax+0x20]",
    "lea     r13, [rel data_162e20]",
    "jmp     0x563fd",
    "mov     rdi, qword [rbp-0x38]",
    "xor     edx, edx",
    "mov     rsi, rbx",
    "call    hash_search",
    "test    rax, rax",
    "je      0x563d0",
    "test    byte [rbx+0xc], 0xc",
    "je      0x563f0",
    "mov     qword [rel data_1619d8], rbx",
    "mov     rbx, qword [rax+0x10]",
    "test    rbx, rbx",
    "je      0x563d0",
    "mov     rbx, qword [rbx+0x18]",
    "test    rbx, rbx",
    "je      0x565a1",
    "mov     r12, qword [rbx+0x20]",
    "mov     rdi, qword [rbp-0x38]",
    "xor     edx, edx",
    "mov     rsi, r12",
    "call    hash_search",
    "test    rax, rax",
    "je      0x563f0",
    "mov     rdi, qword [rbx+0x8]",
    "test    rdi, rdi",
    "je      0x56380",
    "mov     qword [rel data_1619d8], r12",
    "mov     r12, qword [rax+0x10]",
    "mov     qword [rbp-0x40], r12",
    "test    r12, r12",
    "je      0x563f0",
    "mov     rdi, qword [rbp-0x48]",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x565fd",
    "call    free",
    "mov     r15, rbx",
    "test    byte [r12+0x29], 0x8",
    "je      0x565da",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x48]",
    "mov     rdi, r13",
    "mov     rdx, r12",
    "call    __strcpy_chk",
    "mov     rdi, qword [rbx+0x10]",
    "mov     qword [rbx+0x8], r13",
    "test    rdi, rdi",
    "je      0x563d0",
    "mov     r12, qword [rbp-0x40]",
    "jmp     0x56579",
    "mov     r14, rbx",
    "jmp     0x5646a",
    "call    free",
    "mov     qword [rbx+0x10], 0x0",
    "nop     word [rax+rax]",
    "mov     rdx, qword [r15+0x20]",
    "mov     rdi, qword [r12]",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    sub_50500",
    "cmp     rax, r13",
    "jne     0x56448",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sub_55a00",
    "test    rax, rax",
    "je      0x56461",
    "mov     r15, qword [rbp-0x40]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fe5f]  {\"%s: circular name reference\"}",
    "mov     rbx, qword [r15]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "xor     eax, eax",
    "call    internal_warning",
    "lea     rax, [rel shell_variables]",
    "mov     rbx, qword [r15]",
    "cmp     qword [rax], 0x0",
    "je      0x565e0",
    "mov     r14, qword [r14+0x18]",
    "test    r14, r14",
    "je      0x564d8",
    "test    r15, r15",
    "mov     r12, rax",
    "cmovne  r15, r14",
    "test    byte [rax+0x29], 0x8",
    "je      0x56579",
    "call    sub_51d30",
    "jmp     0x564b5",
    "lea     rax, [rel global_variables]",
    "mov     r8d, dword [rbp-0x4c]",
    "xor     ecx, ecx",
    "mov     rdi, rbx",
    "mov     rsi, qword [rbp-0x48]",
    "mov     rax, qword [rax]",
    "mov     rdx, qword [rax+0x20]",
    "jmp     0x565bd",
    "test    byte [r12+0x29], 0x8",
    "je      0x56570",
    "cmp     r12, r13",
    "je      0x5647a",
    "mov     r14, qword [rbp-0x40]",
    "mov     r12, rbx",
    "jmp     0x5650e",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "call    sub_50500",
    "cmp     rax, r13",
    "jne     0x564f0",
    "test    rax, rax",
    "je      0x56500",
    "test    byte [r13+0x29], 0x8",
    "je      0x5647a",
    "mov     r12, qword [r12+0x18]",
    "test    r12, r12",
    "je      0x5658d",
    "test    r15, r15",
    "je      0x564fd",
    "mov     r14, r13",
    "test    byte [r14+0x29], 0x8",
    "jne     0x5652c",
    "mov     r14, rax",
    "mov     r15, r12",
    "mov     rdx, qword [r15+0x20]",
    "mov     rdi, qword [r14]",
    "jmp     0x56581",
    "xor     edx, edx",
    "xor     esi, esi",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0x565ea",
    "mov     rdi, qword [r14+0x8]",
    "test    rdi, rdi",
    "je      0x565f4",
    "mov     rbx, qword [rbx+0x18]",
    "test    rbx, rbx",
    "jne     0x563fd",
    "mov     r8d, dword [rbp-0x4c]",
    "mov     rsi, qword [rbp-0x48]",
    "xor     ecx, ecx",
    "jmp     0x565bd",
    "mov     rdx, qword [r15+0x20]",
    "mov     rdi, qword [r14+0x8]",
    "jmp     0x56581",
    "mov     rdi, qword [r14+0x8]",
    "mov     edx, dword [rbp-0x4c]",
    "xor     ecx, ecx",
    "mov     rsi, qword [rbp-0x48]",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     assign_array_element"
  ]
}