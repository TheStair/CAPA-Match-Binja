{
  "address": "0xcc480",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "contain loop",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "mov     r14d, esi",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x8",
    "test    rdi, rdi",
    "je      0xcc578",
    "lea     r12, [rel data_156088]",
    "lea     rdx, [rel data_11f1dc]  {\"autocd\"}",
    "lea     r15, [rel data_11f1e9]",
    "lea     r13, [rel data_122c8a[0x12]]",
    "lea     rbx, [rel data_11f1e6]",
    "jmp     0xcc5d8",
    "movzx   r15d, byte [rdi]",
    "mov     r13, rdi",
    "mov     eax, 0x61",
    "xor     r12d, r12d  {0x0}",
    "lea     rbx, [rel data_156098]",
    "lea     rsi, [rel data_11f1dc]  {\"autocd\"}",
    "jmp     0xcc4d7",
    "mov     rax, qword [r12]",
    "mov     eax, dword [rax]",
    "test    r14d, r14d",
    "jne     0xcc5a0",
    "cmp     r15b, al",
    "jne     0xcc4c0",
    "test    eax, eax",
    "lea     rax, [rel data_11f1e3]",
    "mov     rcx, rdx",
    "mov     edi, 0x2",
    "cmove   rax, rbx  {data_11f1e6}",
    "lea     rsi, [rel data_11f235]  {\"shopt %s %s\\n\"}",
    "mov     rdx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "test    eax, eax",
    "mov     rcx, r13  {data_122c8a[0x12], \"on\"}",
    "mov     edi, 0x2",
    "cmove   rcx, r15  {data_11f1e9}",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xcc5c6",
    "mov     rsi, qword [rbx]",
    "add     rbx, 0x18",
    "add     r12d, 0x1",
    "test    rsi, rsi",
    "je      0xcc608",
    "mov     rdi, r13",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xcc4c0",
    "add     rsp, 0x8",
    "xor     edi, edi  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     sh_chkwrite",
    "mov     rdx, qword [r12+0x10]",
    "add     r12, 0x18",
    "test    rdx, rdx",
    "je      0xcc52c",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121b34]  {\"%s: invalid shell option name\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "add     rsp, 0x8",
    "mov     eax, 0x1",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "movzx   eax, byte [rsi]",
    "movsxd  r12, r12d",
    "lea     rax, [rel data_156080]",
    "lea     rdx, [r12+r12*2]",
    "mov     rax, qword [rax+rdx*8+0x8]",
    "mov     eax, dword [rax]",
    "test    r14d, r14d",
    "jne     0xcc548",
    "test    eax, eax",
    "mov     rcx, r13",
    "lea     rax, [rel data_11f1e3]",
    "mov     edi, 0x2",
    "lea     rdx, [rel data_11f1e6]",
    "lea     rsi, [rel data_11f235]  {\"shopt %s %s\\n\"}",
    "cmovne  rdx, rax  {data_11f1e3}",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xcc52c",
    "test    eax, eax",
    "mov     rdx, r13",
    "lea     rax, [rel data_122c8a[0x12]]",
    "mov     edi, 0x2",
    "lea     rcx, [rel data_11f1e9]",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "cmovne  rcx, rax  {data_122c8a[0x12], \"on\"}",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk"
  ],
  "high level IL": [
    "if (arg1 == 0)",
    "void** const r12_2 = &data_156088",
    "char const* const i = \"autocd\"",
    "while (i != 0)",
    "int32_t rax_11 = **r12_2",
    "if (arg2 != 0)",
    "void* const rax_8 = &data_11f1e3",
    "if (rax_11 == 0)",
    "rax_8 = &data_11f1e6",
    "__printf_chk(2, \"shopt %s %s\\n\", rax_8, i)",
    "char const* const rcx_5 = \"on\"",
    "if (rax_11 == 0)",
    "rcx_5 = &data_11f1e9",
    "__printf_chk(2, \"%-15s\\t%s\\n\", i, rcx_5)",
    "i = r12_2[2]",
    "r12_2 = &r12_2[3]",
    "char r15_1 = *arg1",
    "char const rax_1 = 0x61",
    "int32_t r12 = 0",
    "char const (** const rbx_1)[0x12] = &data_156098",
    "char const* const rsi = \"autocd\"",
    "while (r15_1 != rax_1 || strcmp(arg1, rsi) != 0)",
    "rsi = *rbx_1",
    "rbx_1 = &rbx_1[3]",
    "r12 += 1",
    "if (rsi == 0)",
    "builtin_error(dcgettext(nullptr, \"%s: invalid shell option name\", 5), 0)",
    "return 1",
    "rax_1 = *rsi",
    "int32_t rax_4 = *(&data_156088)[sx.q(r12) * 3]",
    "if (arg2 != 0)",
    "void* const rdx_3 = &data_11f1e6",
    "if (rax_4 != 0)",
    "rdx_3 = &data_11f1e3",
    "__printf_chk(2, \"shopt %s %s\\n\", rdx_3, arg1)",
    "void* const rcx_1 = &data_11f1e9",
    "if (rax_4 != 0)",
    "rcx_1 = \"on\"",
    "__printf_chk(2, \"%-15s\\t%s\\n\", arg1, rcx_1)",
    "return sh_chkwrite(0) __tailcall"
  ]
}