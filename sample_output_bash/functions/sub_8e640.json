{
  "address": "0x8e640",
  "rules": [
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x248",
    "mov     dword [rbp-0x214], edi",
    "mov     qword [rbp-0x220], rsi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x28], rax",
    "xor     eax, eax",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rbp-0x208], 0x0",
    "mov     edx, dword [rax]",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     dword [rax], edx",
    "movsxd  rax, edi",
    "lea     rdx, [rel data_1611a0]",
    "mov     ecx, dword [rdx+rax*4]",
    "mov     ebx, ecx",
    "mov     dword [rbp-0x218], ecx",
    "and     ebx, 0x1",
    "je      0x8e918",
    "mov     rax, qword [rbp-0x28]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8ebb0",
    "mov     ebx, ecx",
    "and     ebx, 0x40",
    "jne     0x8e940",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x248",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "xor     ebx, ebx",
    "jmp     0x8e918",
    "lea     rdx, [rel trap_list]",
    "mov     rsi, rax",
    "mov     rax, qword [rdx+rax*8]",
    "cmp     rax, qword [rel data_157f80]",
    "mov     qword [rbp-0x228], rax",
    "je      0x8e918",
    "lea     eax, [rsi-0x41]",
    "mov     dword [rbp-0x234], eax",
    "cmp     eax, 0x2",
    "ja      0x8e6ee",
    "lea     rax, [rel running_trap]",
    "mov     edx, dword [rbp-0x218]",
    "lea     rcx, [rel data_1611a0]",
    "mov     rdi, qword [rbp-0x228]",
    "mov     eax, dword [rax]",
    "and     edx, 0xffffffdf",
    "or      edx, 0x10",
    "mov     dword [rbp-0x24c], eax",
    "movsxd  rax, dword [rbp-0x214]",
    "mov     dword [rcx+rax*4], edx",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x8ebb5",
    "and     ecx, 0x10",
    "jne     0x8e918",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x228]",
    "mov     rdx, rbx",
    "mov     rdi, r12",
    "call    __strcpy_chk",
    "mov     eax, dword [rbp-0x214]",
    "lea     rdi, [rel data_11f1a4]  {\"PIPESTATUS\"}",
    "mov     qword [rbp-0x258], r12",
    "lea     edx, [rax+0x1]",
    "lea     rax, [rel running_trap]",
    "mov     dword [rax], edx",
    "lea     rax, [rel interrupt_state]",
    "mov     edx, dword [rax]",
    "mov     dword [rax], 0x0",
    "mov     dword [rbp-0x238], edx",
    "call    find_variable",
    "mov     qword [rbp-0x230], rax",
    "test    rax, rax",
    "je      0x8e7c3",
    "lea     rdi, [rbp-0x130]",
    "call    save_parser_state",
    "lea     rax, [rel subst_assign_varlist]",
    "cmp     dword [rbp-0x214], 0x41",
    "mov     rdx, qword [rax]",
    "mov     qword [rax], 0x0",
    "lea     rax, [rel temporary_env]",
    "mov     qword [rbp-0x240], rdx",
    "mov     rsi, qword [rax]",
    "mov     qword [rax], 0x0",
    "mov     qword [rbp-0x248], rsi",
    "je      0x8e948",
    "mov     rax, qword [rbp-0x230]",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0x8eba0",
    "lea     rax, [rel return_catch_flag]",
    "xor     r13d, r13d",
    "mov     ecx, 0x405",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x204], eax",
    "test    eax, eax",
    "je      0x8e845",
    "mov     edi, 0x1",
    "call    save_pipeline",
    "lea     rax, [rel return_catch_flag]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x204], eax",
    "test    eax, eax",
    "jne     0x8e967",
    "mov     qword [rbp-0x230], 0x0",
    "jmp     0x8e7c3",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x230], rdi",
    "test    rdi, rdi",
    "je      0x8e7c3",
    "lea     r12, [rel evalnest]",
    "mov     eax, dword [r12]",
    "lea     edx, [rax+0x1]",
    "mov     dword [r12], edx",
    "mov     edx, dword [rbp-0x208]",
    "test    edx, edx",
    "je      0x8eb28",
    "lea     rdi, [rel return_catch]",
    "xor     esi, esi",
    "movdqa  xmm0, xmmword [rdi]",
    "movdqa  xmm1, xmmword [rdi+0x10]",
    "movdqa  xmm2, xmmword [rdi+0x20]",
    "movdqa  xmm3, xmmword [rdi+0x30]",
    "movdqa  xmm4, xmmword [rdi+0x40]",
    "movdqa  xmm5, xmmword [rdi+0x50]",
    "movaps  xmmword [rbp-0x200], xmm0",
    "movdqa  xmm6, xmmword [rdi+0x60]",
    "movdqa  xmm7, xmmword [rdi+0x70]",
    "movaps  xmmword [rbp-0x1f0], xmm1",
    "movdqa  xmm0, xmmword [rdi+0x80]",
    "movdqa  xmm1, xmmword [rdi+0x90]",
    "movaps  xmmword [rbp-0x1e0], xmm2",
    "mov     rax, qword [rdi+0xc0]",
    "movdqa  xmm2, xmmword [rdi+0xa0]",
    "movaps  xmmword [rbp-0x1d0], xmm3",
    "movdqa  xmm3, xmmword [rdi+0xb0]",
    "movaps  xmmword [rbp-0x1c0], xmm4",
    "mov     qword [rbp-0x140], rax",
    "movaps  xmmword [rbp-0x1b0], xmm5",
    "movaps  xmmword [rbp-0x1a0], xmm6",
    "movaps  xmmword [rbp-0x190], xmm7",
    "movaps  xmmword [rbp-0x180], xmm0",
    "movaps  xmmword [rbp-0x170], xmm1",
    "movaps  xmmword [rbp-0x160], xmm2",
    "movaps  xmmword [rbp-0x150], xmm3",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     dword [rbp-0x208], eax",
    "jmp     0x8e82d",
    "cmp     dword [rbp-0x234], 0x2",
    "jbe     0x8eb10",
    "call    array_copy",
    "mov     qword [rbp-0x230], rax",
    "mov     rsi, qword [rbp-0x220]",
    "mov     rdi, qword [rbp-0x258]",
    "mov     edx, ecx",
    "call    parse_and_execute",
    "lea     rax, [rel last_command_exit_value]",
    "mov     ebx, dword [rax]",
    "mov     eax, dword [r12]",
    "sub     eax, 0x1",
    "jmp     0x8e86e",
    "lea     rdx, [rel return_catch_value]",
    "mov     ebx, dword [rdx]",
    "cmp     dword [rbp-0x214], 0x41",
    "mov     ecx, 0x405",
    "setne   r13b",
    "jmp     0x8e845",
    "mov     r13d, 0x1",
    "mov     ecx, 0x415",
    "lea     rdx, [rel evalnest]",
    "mov     dword [rdx], eax",
    "test    r13b, r13b",
    "je      0x8e886",
    "lea     rax, [rel subst_assign_varlist]",
    "mov     rdx, qword [rbp-0x240]",
    "lea     rdi, [rbp-0x130]",
    "mov     qword [rax], rdx",
    "call    restore_parser_state",
    "mov     rdi, qword [rbp-0x230]",
    "call    restore_pipestatus_array",
    "lea     rax, [rel temporary_env]",
    "mov     rsi, qword [rbp-0x248]",
    "lea     rdx, [rel data_1611a0]",
    "movsxd  rcx, dword [rbp-0x214]",
    "mov     qword [rax], rsi",
    "mov     eax, dword [rdx+rcx*4]",
    "test    byte [rbp-0x218], 0x10",
    "jne     0x8e8e0",
    "mov     edi, 0x1",
    "call    restore_pipeline",
    "lea     rdx, [rel running_trap]",
    "mov     esi, dword [rbp-0x24c]",
    "mov     dword [rdx], esi",
    "lea     rdx, [rel interrupt_state]",
    "mov     esi, dword [rbp-0x238]",
    "mov     dword [rdx], esi",
    "test    al, 0x20",
    "jne     0x8eb58",
    "and     eax, 0xffffffef",
    "mov     dword [rdx+rcx*4], eax",
    "mov     rdi, qword [rbp-0x228]",
    "call    free",
    "movsxd  rdx, dword [rbp-0x214]",
    "lea     rax, [rel data_1611a0]",
    "and     dword [rax+rdx*4], 0xffffffdf",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x8e906",
    "mov     eax, dword [rbp-0x204]",
    "test    eax, eax",
    "jne     0x8ea30",
    "mov     edi, dword [rax]",
    "mov     eax, dword [rel data_161100]",
    "test    eax, eax",
    "jne     0x8e906",
    "lea     rax, [rel return_catch_flag]",
    "mov     edx, dword [rbp-0x204]",
    "lea     rdi, [rel return_catch]",
    "movdqa  xmm4, xmmword [rbp-0x200]",
    "mov     dword [rax], edx",
    "movdqa  xmm5, xmmword [rbp-0x1f0]",
    "lea     rax, [rel return_catch_value]",
    "movdqa  xmm6, xmmword [rbp-0x1e0]",
    "movaps  xmmword [rdi], xmm4",
    "movdqa  xmm7, xmmword [rbp-0x1d0]",
    "movdqa  xmm0, xmmword [rbp-0x1c0]",
    "movaps  xmmword [rdi+0x10], xmm5",
    "mov     dword [rax], ebx",
    "movdqa  xmm1, xmmword [rbp-0x1b0]",
    "movdqa  xmm2, xmmword [rbp-0x1a0]",
    "movdqa  xmm3, xmmword [rbp-0x190]",
    "movaps  xmmword [rdi+0x20], xmm6",
    "movdqa  xmm4, xmmword [rbp-0x180]",
    "movdqa  xmm5, xmmword [rbp-0x170]",
    "movaps  xmmword [rdi+0x30], xmm7",
    "movdqa  xmm6, xmmword [rbp-0x160]",
    "movdqa  xmm7, xmmword [rbp-0x150]",
    "movaps  xmmword [rdi+0x40], xmm0",
    "mov     rax, qword [rbp-0x140]",
    "movaps  xmmword [rdi+0x50], xmm1",
    "movaps  xmmword [rdi+0x60], xmm2",
    "mov     qword [rdi+0xc0], rax",
    "movaps  xmmword [rdi+0x70], xmm3",
    "movaps  xmmword [rdi+0x80], xmm4",
    "movaps  xmmword [rdi+0x90], xmm5",
    "movaps  xmmword [rdi+0xa0], xmm6",
    "movaps  xmmword [rdi+0xb0], xmm7",
    "mov     eax, dword [rbp-0x208]",
    "test    eax, eax",
    "je      0x8e918",
    "nop     dword [rax]",
    "call    sub_8e2b0",
    "{ Does not return }",
    "mov     esi, 0x1",
    "call    __longjmp_chk",
    "{ Does not return }"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}