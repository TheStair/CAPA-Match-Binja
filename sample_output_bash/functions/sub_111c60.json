{
  "address": "0x111c60",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x48",
    "mov     qword [rbp-0x48], rsi",
    "test    rdi, rdi",
    "je      0x111d92",
    "add     rsp, 0x48",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     ecx, dword [rdi+0xc]",
    "mov     rbx, rdi",
    "test    ecx, ecx",
    "je      0x111d92",
    "or      rsi, rdx",
    "je      0x111d92",
    "mov     eax, dword [rdi+0x8]",
    "test    eax, eax",
    "jle     0x111d92",
    "mov     qword [rbp-0x50], rdx",
    "xor     r13d, r13d",
    "nop     dword [rax+rax]",
    "add     r13, 0x1",
    "cmp     dword [rbx+0x8], r13d",
    "jg      0x111cb0",
    "mov     qword [rbp-0x68], r13",
    "mov     qword [rbp-0x70], rbx",
    "mov     rbx, r12",
    "nop     dword [rax]",
    "mov     rax, qword [rbx]",
    "cmp     qword [rbp-0x50], 0x0",
    "setne   byte [rbp-0x39]",
    "mov     r12, qword [rax+r13*8]",
    "test    r12, r12",
    "je      0x111d84",
    "cmp     byte [rbp-0x39], 0x0",
    "je      0x111d70",
    "call    rcx",
    "test    eax, eax",
    "setne   al",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "jne     0x111cd8",
    "test    al, al",
    "je      0x111d70",
    "mov     rdi, qword [rbx+0x10]",
    "mov     rcx, qword [rbp-0x48]",
    "mov     eax, 0x1",
    "mov     qword [rbp-0x38], rdi",
    "test    rcx, rcx",
    "je      0x111cf5",
    "mov     r13, qword [rbp-0x68]",
    "mov     rbx, qword [rbp-0x70]",
    "mov     rax, qword [rbp-0x50]",
    "mov     r12d, dword [rax+0xc]",
    "mov     r11, qword [rax]",
    "test    r12d, r12d",
    "jle     0x111e1c",
    "xor     r15d, r15d",
    "jmp     0x111db0",
    "mov     rax, qword [rbp-0x38]",
    "mov     qword [rbp-0x58], rbx",
    "mov     r14, r11",
    "xor     r15d, r15d",
    "mov     qword [rbp-0x60], r11",
    "mov     rdi, qword [rax]",
    "movzx   r13d, byte [rdi]",
    "mov     ebx, r13d",
    "mov     r13, rdi",
    "jmp     0x111d45",
    "mov     rax, qword [rbp-0x50]",
    "mov     eax, dword [rax+0x8]",
    "cmp     eax, r15d",
    "jle     0x111de0",
    "mov     rax, qword [r14]",
    "mov     rsi, qword [rax]",
    "cmp     bl, byte [rsi]",
    "jne     0x111d38",
    "lea     edx, [rax+0x10]",
    "mov     rdi, qword [rbp-0x50]",
    "add     eax, 0x11",
    "cdqe    ",
    "mov     dword [rdi+0x8], edx",
    "lea     r12, [rax*8]",
    "test    r11, r11",
    "je      0x111e21",
    "mov     rdx, qword [rbp-0x50]",
    "lea     eax, [r12+0x1]",
    "movsxd  r8, r12d",
    "mov     dword [rdx+0xc], eax",
    "mov     rax, qword [rbp-0x38]",
    "mov     qword [r11+r8*8+0x8], 0x0",
    "mov     qword [r11+r8*8], rax",
    "jmp     0x111d70",
    "add     r15d, 0x1",
    "add     r14, 0x8",
    "cmp     r15d, r12d",
    "je      0x111da8",
    "mov     rdi, r13",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x111d38",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r11, rax",
    "jmp     0x111e0a",
    "mov     rdi, r11",
    "mov     rsi, r12",
    "call    realloc",
    "mov     r11, rax",
    "mov     rbx, qword [rbp-0x58]",
    "mov     r11, qword [rbp-0x60]",
    "mov     rbx, qword [rbp-0x58]",
    "mov     r11, qword [rbp-0x60]",
    "cmp     r15d, r12d",
    "jge     0x111db0",
    "test    r11, r11",
    "je      0x111e2e",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x58], r11",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x50]",
    "mov     qword [rax], r11",
    "mov     r12d, dword [rax+0xc]",
    "jmp     0x111dbc",
    "nop     dword [rax+rax]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}