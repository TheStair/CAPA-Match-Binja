{
  "address": "0x6cac0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "lea     r12, [rbp-0xc0]",
    "push    rbx",
    "mov     ebx, edi",
    "mov     rdi, r12",
    "sub     rsp, 0x138",
    "mov     dword [rbp-0x144], esi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    sigemptyset",
    "mov     esi, 0x11",
    "mov     rdi, r12",
    "call    sigaddset",
    "lea     rax, [rbp-0x140]",
    "mov     r14, rax",
    "mov     rdi, rax",
    "mov     qword [rbp-0x158], rax",
    "call    sigemptyset",
    "mov     rdx, r14",
    "mov     rsi, r12",
    "xor     edi, edi",
    "call    sigprocmask",
    "lea     rax, [rel subshell_environment]",
    "test    byte [rax], 0x4",
    "je      0x6cb55",
    "lea     r12, [rel jobs]",
    "movsxd  rsi, ebx",
    "mov     qword [rbp-0x150], rsi",
    "lea     r13, [rsi*8]",
    "mov     rax, qword [r12]",
    "mov     rax, qword [rax+rsi*8]",
    "mov     eax, dword [rax+0x14]",
    "mov     dword [rbp-0x148], eax",
    "cmp     eax, 0x4",
    "je      0x6d051",
    "lea     rax, [rel shell_pgrp]",
    "lea     rdx, [rel pipeline_pgrp]",
    "mov     eax, dword [rax]",
    "cmp     dword [rdx], eax",
    "je      0x6cfcb",
    "lea     rax, [rel this_command_name]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_12061c]  {\"%s: job has terminated\"}",
    "mov     rbx, qword [rax]",
    "jmp     0x6cfe1",
    "cmp     dword [rbp-0x148], 0x1",
    "jne     0x6cc10",
    "lea     rax, [rel this_command_name]",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x120608]  {\"%s: no current jobs\"}",
    "mov     rbx, qword [rax]",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     ebx, 0xffffffff",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "mov     rsi, qword [rbp-0x158]",
    "xor     edx, edx",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "jmp     0x6cbdf",
    "call    sub_5f5c0",
    "mov     rdi, qword [rbp-0x150]",
    "mov     qword [rbp-0x160], rax",
    "mov     rax, qword [r12]",
    "mov     rax, qword [rax+rdi*8]",
    "mov     edi, dword [rbp-0x144]",
    "and     dword [rax+0x18], 0xfffffffd",
    "test    edi, edi",
    "jne     0x6cca8",
    "mov     r8d, dword [rbp-0x144]",
    "test    r8d, r8d",
    "jne     0x6cc10",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x6d06c",
    "mov     edi, ebx",
    "call    sub_66820",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "mov     rax, qword [rax+rbx*8]",
    "mov     r15, qword [rax+0x8]",
    "or      dword [rax+0x18], 0x1",
    "mov     rax, r15",
    "lea     rdx, [rel posixly_correct]",
    "lea     rcx, [rel data_1204ae[4]]  {\" \"}",
    "mov     esi, dword [rdx]",
    "test    esi, esi",
    "jne     0x6cc75",
    "lea     rax, [rel this_command_name]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133290]  {\"%s: job %d already in background\"}",
    "xor     edi, edi",
    "mov     r12, qword [rax]",
    "call    dcgettext",
    "lea     edx, [rbx+0x1]",
    "mov     rdi, rax",
    "mov     rsi, r12",
    "xor     eax, eax",
    "call    internal_error",
    "mov     rsi, qword [rbp-0x158]",
    "xor     edx, edx",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x138",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdx, qword [r15+0x18]",
    "cmp     qword [r15], rax",
    "mov     rcx, r14",
    "mov     edi, 0x2",
    "cmove   rcx, rbx",
    "lea     rsi, [rel data_11fbd6[2]]  {\"%s%s\"}",
    "test    rdx, rdx",
    "cmove   rdx, rbx",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     rax, qword [r12]",
    "mov     r15, qword [r15]",
    "mov     rdx, qword [rax+r13]",
    "mov     rax, qword [rdx+0x8]",
    "cmp     rax, r15",
    "jne     0x6cce0",
    "mov     ecx, dword [rbp-0x144]",
    "test    ecx, ecx",
    "je      0x6ce28",
    "mov     r15, qword [rax+0x8]",
    "lea     edx, [rbx+0x1]",
    "mov     edi, 0x2",
    "xor     eax, eax",
    "lea     rsi, [rel data_120633]  {\"[%d]%s\"}",
    "call    __printf_chk",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "mov     rax, qword [rax+rbx*8]",
    "mov     rax, qword [rax+0x8]",
    "jmp     0x6ccc9",
    "lea     rdx, [rel js]",
    "lea     rcx, [rel data_11ffae]",
    "cmp     dword [rdx+0x30], ebx",
    "je      0x6cc75",
    "lea     rsi, [rel data_120530]",
    "mov     edi, 0x2",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "mov     rdx, qword [rax+rbx*8]",
    "jmp     0x6cd2a",
    "mov     rbx, qword [rdx]",
    "mov     rdi, qword [rbp-0x160]",
    "mov     rsi, rbx",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x6ce00",
    "lea     rbx, [rel data_122e02]",
    "lea     r14, [rel data_11fc98]",
    "nop     word [rax+rax]",
    "cmp     dword [rdx+0x34], ebx",
    "lea     rcx, [rel data_121583[6]]  {\"- \"}",
    "lea     rdx, [rel data_1204ae[4]]  {\" \"}",
    "cmovne  rcx, rdx",
    "mov     rdi, rbx",
    "call    polite_directory_format",
    "lea     rsi, [rel data_12063a]  {\"\\t(wd: %s)\"}",
    "mov     edi, 0x2",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    __printf_chk",
    "jmp     0x6cd44",
    "mov     edi, 0xa",
    "call    putchar",
    "cmp     dword [rbp-0x148], 0x1",
    "jne     0x6cd98",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "mov     rcx, qword [rax+rbx*8]",
    "mov     rdx, qword [rcx+0x8]",
    "mov     rax, rdx",
    "nop     ",
    "mov     edx, dword [rbp-0x144]",
    "test    edx, edx",
    "jne     0x6ce50",
    "mov     rax, qword [rax]",
    "cmp     rdx, rax",
    "jne     0x6cdb0",
    "mov     dword [rax+0x10], 0x1",
    "call    get_tty_state",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "movdqa  xmm4, xmmword [rel data_1684e0]",
    "movdqa  xmm5, xmmword [rel data_1684f0]",
    "mov     rax, qword [rax+rbx*8]",
    "movdqa  xmm6, xmmword [rel data_168500]",
    "movdqu  xmm7, xmmword [rel data_168500+0xc]",
    "movaps  xmmword [rel data_1684a0], xmm4",
    "mov     edx, dword [rax+0x18]",
    "movaps  xmmword [rel data_1684c0], xmm6",
    "movaps  xmmword [rel data_1684b0], xmm5",
    "mov     ecx, edx",
    "movups  xmmword [rel data_1684c0+0xc], xmm7",
    "and     ecx, 0xffffffdf",
    "and     edx, 0x4",
    "mov     dword [rax+0x18], ecx",
    "jne     0x6d012",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "mov     rax, qword [rax+rbx*8]",
    "and     dword [rax+0x18], 0xfffffffe",
    "cmp     byte [rax+0xc], 0x7f",
    "jne     0x6cdbd",
    "mov     eax, dword [rbp-0x144]",
    "mov     dword [rcx+0x14], 0x1",
    "test    eax, eax",
    "jne     0x6cf40",
    "mov     edi, dword [rax+0x10]",
    "xor     esi, esi",
    "call    give_terminal_to",
    "mov     rax, qword [r12]",
    "mov     rdi, qword [rbp-0x150]",
    "mov     rax, qword [rax+rdi*8]",
    "jmp     0x6ceb4",
    "mov     rcx, qword [rax+0x8]",
    "mov     rax, rcx",
    "jmp     0x6cec3",
    "xor     ebx, ebx",
    "call    get_tty_state",
    "mov     rax, qword [r12]",
    "mov     rbx, qword [rbp-0x150]",
    "movdqa  xmm4, xmmword [rel data_1684e0]",
    "movdqa  xmm5, xmmword [rel data_1684f0]",
    "mov     rax, qword [rax+rbx*8]",
    "movdqa  xmm6, xmmword [rel data_168500]",
    "movdqu  xmm7, xmmword [rel data_168500+0xc]",
    "movaps  xmmword [rel data_1684a0], xmm4",
    "mov     ecx, dword [rax+0x18]",
    "movaps  xmmword [rel data_1684c0], xmm6",
    "movaps  xmmword [rel data_1684b0], xmm5",
    "mov     edx, ecx",
    "movups  xmmword [rel data_1684c0+0xc], xmm7",
    "and     edx, 0xffffffdf",
    "and     ecx, 0x4",
    "mov     dword [rax+0x18], edx",
    "jne     0x6d030",
    "mov     eax, dword [rcx+0x18]",
    "mov     edi, dword [rcx+0x10]",
    "mov     esi, 0x12",
    "and     eax, 0xfffffffe",
    "or      eax, 0x2",
    "mov     dword [rcx+0x18], eax",
    "call    killpg",
    "jmp     0x6cd78",
    "test    rax, rax",
    "je      0x3211e",
    "mov     edi, dword [rax+0x10]",
    "xor     esi, esi",
    "call    give_terminal_to",
    "mov     rax, qword [r12]",
    "mov     rdi, qword [rbp-0x150]",
    "mov     rax, qword [rax+rdi*8]",
    "mov     edx, dword [rax+0x18]",
    "jmp     0x6cfa4",
    "or      edx, 0x2",
    "mov     edi, dword [rax+0x10]",
    "mov     esi, 0x12",
    "mov     dword [rax+0x18], edx",
    "call    killpg",
    "mov     rax, qword [r12]",
    "mov     rdi, qword [rbp-0x150]",
    "mov     rax, qword [rax+rdi*8]",
    "jmp     0x6ceb4",
    "call    sub_668f0",
    "mov     rsi, qword [rbp-0x158]",
    "xor     edx, edx",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "jmp     0x6cbdd",
    "mov     eax, dword [0x8]",
    "ud2     ",
    "{ Does not return }",
    "mov     rdx, qword [rax]",
    "cmp     rcx, rdx",
    "jne     0x6cec0",
    "mov     rax, rdx",
    "mov     ebx, dword [rax+0x8]",
    "mov     rsi, qword [rbp-0x158]",
    "xor     edx, edx",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "mov     edi, ebx",
    "xor     esi, esi",
    "call    wait_for",
    "movdqa  xmm0, xmmword [rel data_1684a0]",
    "movdqa  xmm1, xmmword [rel data_1684b0]",
    "movdqa  xmm2, xmmword [rel data_1684c0]",
    "movdqu  xmm3, xmmword [rel data_1684c0+0xc]",
    "mov     ebx, eax",
    "movaps  xmmword [rel data_1684e0], xmm0",
    "movaps  xmmword [rel data_168500], xmm2",
    "movaps  xmmword [rel data_1684f0], xmm1",
    "movups  xmmword [rel data_168500+0xc], xmm3",
    "call    set_tty_state",
    "jmp     0x6cbdf"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}