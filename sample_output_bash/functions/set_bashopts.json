{
  "address": "0xccad0",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "contain loop",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "lea     rdi, [rel data_11f1dc]  {\"autocd\"}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "xor     r14d, r14d  {0x0}",
    "push    r13 {__saved_r13}",
    "lea     r13, [rbp-0x80 {var_88}]",
    "push    r12 {__saved_r12}",
    "mov     r12, r13 {var_88}",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rel data_156088]",
    "sub     rsp, 0x68",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "nop     dword [rax]",
    "mov     rdi, qword [rbx+0x10]",
    "add     r12, 0x1",
    "add     rbx, 0x18",
    "test    rdi, rdi",
    "jne     0xccb10",
    "call    strlen",
    "mov     byte [r12], 0x1",
    "lea     r14d, [r14+rax+0x1]",
    "mov     rax, qword [rbx]",
    "mov     byte [r12], 0x0",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0xccb2d",
    "add     r14d, 0x1",
    "movsxd  r14, r14d",
    "mov     rdi, r14",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xccc75",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rbx, [rel data_156098]",
    "xor     ecx, ecx  {0x0}",
    "lea     r12, [rel data_11f1dc]  {\"autocd\"}",
    "jmp     0xccb80",
    "cmp     byte [r13], 0x0",
    "je      0xccb70",
    "mov     r12, qword [rbx]",
    "add     r13, 0x1",
    "add     rbx, 0x18",
    "test    r12, r12",
    "je      0xccbd3",
    "movsxd  rdi, ecx",
    "mov     rsi, r12",
    "mov     dword [rbp-0x84 {var_8c_1}], ecx",
    "cmp     r14, rdi",
    "mov     rdx, rdi",
    "cmovae  rdx, r14",
    "add     r13, 0x1",
    "add     rbx, 0x18",
    "sub     rdx, rdi",
    "add     rdi, r15",
    "call    __strcpy_chk",
    "mov     rdi, r12",
    "call    strlen",
    "mov     ecx, dword [rbp-0x84 {var_8c_1}]",
    "mov     r12, qword [rbx-0x18]",
    "add     eax, ecx",
    "lea     ecx, [rax+0x1]",
    "cdqe    ",
    "mov     byte [r15+rax], 0x3a",
    "test    r12, r12",
    "jne     0xccb80",
    "mov     rax, r15",
    "test    ecx, ecx",
    "je      0xccbe4",
    "mov     byte [rax], 0x0",
    "lea     r12, [rel data_121b52]",
    "mov     ebx, 0x1",
    "mov     rdi, r12  {data_121b52, \"BASHOPTS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0xccc10",
    "sub     ecx, 0x1",
    "movsxd  rcx, ecx",
    "lea     rax, [r15+rcx]",
    "xor     edx, edx  {0x0}",
    "mov     rsi, r15",
    "mov     rdi, r12  {data_121b52, \"BASHOPTS\"}",
    "call    bind_variable",
    "mov     edx, dword [rax+0x28]",
    "mov     ecx, edx",
    "or      ecx, 0x2",
    "mov     dword [rax+0x28], ecx",
    "lea     rcx, [rel mark_modified_vars]",
    "mov     ecx, dword [rcx]  {mark_modified_vars}",
    "test    ecx, ecx",
    "je      0xccc39",
    "mov     ebx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     edx, ebx",
    "not     ebx",
    "and     edx, 0xfffffffd",
    "and     ebx, 0x1",
    "mov     dword [rax+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xccc70",
    "test    bl, bl",
    "jne     0xccc60",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x68",
    "mov     rdi, r15",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     free",
    "test    dl, 0x1",
    "je      0xccc39",
    "and     edx, 0xfffffffe",
    "or      edx, 0x2",
    "mov     dword [rax+0x28], edx",
    "jmp     0xccc39"
  ],
  "high level IL": [
    "char const* const i = \"autocd\"",
    "int32_t r14 = 0",
    "void var_88",
    "void* r13 = &var_88",
    "void* r12 = &var_88",
    "void** const rbx = &data_156088",
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "void* rax_2 = *rbx",
    "*r12 = 0",
    "if (*rax_2 != 0)",
    "int32_t rax_3 = strlen(i)",
    "*r12 = 1",
    "r14 = r14 + rax_3 + 1",
    "i = rbx[2]",
    "r12 += 1",
    "rbx = &rbx[3]",
    "do while (i != 0)",
    "int64_t bytes = sx.q(r14 + 1)",
    "char* rax_4 = malloc(bytes)",
    "if (rax_4 == 0)",
    "sub_a7f00()",
    "noreturn",
    "char const (** const rbx_1)[0x12] = &data_156098",
    "int32_t bytes_3 = 0",
    "char const* const r12_1 = \"autocd\"",
    "while (true)",
    "if (*r13 == 0)",
    "r12_1 = *rbx_1",
    "r13 += 1",
    "rbx_1 = &rbx_1[3]",
    "if (r12_1 == 0)",
    "break",
    "int64_t bytes_2 = sx.q(bytes_3)",
    "int64_t bytes_1 = bytes_2",
    "if (bytes u>= bytes_2)",
    "bytes_1 = bytes",
    "r13 += 1",
    "rbx_1 = &rbx_1[3]",
    "__strcpy_chk(&rax_4[bytes_2], r12_1, bytes_1 - bytes_2)",
    "int32_t rax_5 = strlen(r12_1)",
    "r12_1 = rbx_1[-3]",
    "int32_t rax_6 = rax_5 + bytes_3",
    "bytes_3 = rax_6 + 1",
    "rax_4[sx.q(rax_6)] = 0x3a",
    "if (r12_1 == 0)",
    "break",
    "void* rax_8 = rax_4",
    "if (bytes_3 != 0)",
    "rax_8 = &rax_4[sx.q(bytes_3 - 1)]",
    "*rax_8 = 0",
    "char rbx_2 = 1",
    "struct Elf64_Header* rax_9 = find_variable(\"BASHOPTS\")",
    "if (rax_9 != 0)",
    "int32_t rbx_3 = rax_9->section_header_offset.d",
    "rbx_2 = (not.d(rbx_3)).b & 1",
    "rax_9->section_header_offset.d = rbx_3 & 0xfffffffd",
    "void* rax_10 = bind_variable(\"BASHOPTS\", rax_4, 0)",
    "int32_t rdx_4 = *(rax_10 + 0x28)",
    "*(rax_10 + 0x28) = rdx_4 | 2",
    "if (mark_modified_vars != 0 && rbx_2 != 0 && (rdx_4.b & 1) != 0)",
    "*(rax_10 + 0x28) = (rdx_4 & 0xfffffffe) | 2",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return free(rax_4) __tailcall",
    "__stack_chk_fail()",
    "noreturn"
  ]
}