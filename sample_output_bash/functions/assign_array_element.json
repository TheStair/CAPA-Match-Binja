{
  "address": "0x970d0",
  "rules": [
    "hash data using djb2/9bc6b91561f04ebca409510ba6653174",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "hash data using jshash/495bfd597bd14a45826758e92f604bf6",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "encrypt data using Curve25519/a423aa5d0923438c8eac88d5abe4fcd5",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "push    r13",
    "mov     r13, rcx",
    "lea     rcx, [rbp-0x44]",
    "push    r12",
    "push    rbx",
    "mov     ebx, edx",
    "sub     rsp, 0x58",
    "mov     qword [rbp-0x58], rsi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "mov     eax, edx",
    "and     eax, 0x80",
    "setne   sil",
    "mov     dword [rbp-0x60], eax",
    "movzx   esi, sil",
    "shl     esi, 0x5",
    "mov     eax, esi",
    "or      eax, 0x40",
    "and     dh, 0x10",
    "lea     rdx, [rbp-0x40]",
    "cmovne  esi, eax",
    "call    array_variable_name",
    "test    rax, rax",
    "je      0x9732f",
    "xor     r15d, r15d",
    "mov     rdi, rax",
    "mov     r12, rax",
    "call    find_variable",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x97151",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x58",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdx, qword [rbp-0x40]",
    "movzx   eax, byte [rdx]",
    "cmp     al, 0x40",
    "je      0x972f0",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x40",
    "jne     0x972d0",
    "cmp     byte [rdx+0x1], 0x5d",
    "jne     0x97168",
    "cmp     al, 0x2a",
    "je      0x972f0",
    "test    ebx, 0x880",
    "jne     0x97168",
    "mov     edx, dword [rbp-0x44]",
    "cmp     edx, 0x1",
    "jle     0x97300",
    "nop     word [rax+rax]",
    "mov     rdx, qword [rbp-0x40]",
    "movzx   eax, byte [rdx]",
    "cmp     al, 0x40",
    "jne     0x97160",
    "mov     rdi, r12",
    "call    free",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120287]  {\"bad array subscript\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, r14",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    report_error",
    "mov     r8, qword [rbp-0x40]",
    "movsxd  rax, edx",
    "cmp     byte [r8+rax], 0x0",
    "jne     0x97300",
    "nop     dword [rax+rax]",
    "test    r15, r15",
    "je      0x974a8",
    "mov     rsi, r8",
    "xor     ecx, ecx",
    "xor     edi, edi",
    "call    array_expand_index",
    "mov     rsi, rax",
    "jmp     0x9738f",
    "test    byte [r15+0x28 {Elf64_Header::section_header_offset.b}], 0x40",
    "je      0x97360",
    "test    rsi, rsi",
    "js      0x97420",
    "mov     rsi, r8",
    "xor     ecx, ecx",
    "mov     rdi, r15",
    "call    array_expand_index",
    "mov     rsi, rax",
    "test    rax, rax",
    "jns     0x97398",
    "mov     esi, dword [rbp-0x60]",
    "lea     rcx, [r8+rax-0x1]",
    "mov     byte [rcx], 0x0",
    "test    esi, esi",
    "je      0x973e8",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120287]  {\"bad array subscript\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, r14",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    report_error",
    "mov     rdx, qword [rbp-0x58]",
    "mov     ecx, ebx",
    "mov     rdi, r12",
    "mov     qword [rbp-0x58], rsi",
    "call    bind_array_variable",
    "mov     r15, rax",
    "test    r13, r13",
    "je      0x973d8",
    "mov     eax, 0x1",
    "test    byte [r15+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0x9738c",
    "test    r8, r8",
    "je      0x974d0",
    "mov     rdi, r8",
    "mov     qword [rbp-0x78], rcx",
    "mov     qword [rbp-0x70], r8",
    "call    strlen",
    "lea     rdx, [rax+0x1]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x60], rdx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x60]",
    "mov     r8, qword [rbp-0x70]",
    "test    rax, rax",
    "mov     rcx, qword [rbp-0x78]",
    "mov     r10, rax",
    "je      0x97540",
    "mov     rdi, r12",
    "call    free",
    "jmp     0x97332",
    "mov     rsi, qword [rbp-0x58]",
    "mov     eax, 0x1",
    "mov     word [r13], ax",
    "xor     eax, eax",
    "mov     qword [r13+0x8], rsi",
    "test    r15, r15",
    "je      0x973d4",
    "add     rsi, rax",
    "mov     rax, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     rax, qword [rax]",
    "add     rax, 0x1",
    "mov     byte [rcx], 0x5d",
    "jmp     0x97420",
    "cmp     byte [r8], 0x0",
    "je      0x974d0",
    "mov     qword [rbp-0x80], rax",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdi, r10",
    "mov     rsi, r8",
    "mov     qword [rbp-0x60], rcx",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x60]",
    "mov     r10, rax",
    "mov     byte [rcx], 0x5d",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x97519",
    "mov     qword [r13+0x18], rax",
    "mov     rdi, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "call    array_reference",
    "xor     esi, esi",
    "mov     rdi, r8",
    "mov     qword [rbp-0x60], rcx",
    "call    sub_8c420",
    "mov     rcx, qword [rbp-0x60]",
    "mov     r10, rax",
    "mov     byte [rcx], 0x5d",
    "test    rax, rax",
    "jne     0x971fe",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120287]  {\"bad array subscript\"}",
    "mov     qword [rbp-0x58], r10",
    "call    dcgettext",
    "mov     rsi, r14",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    report_error",
    "mov     rdi, qword [rbp-0x58]",
    "call    free",
    "jmp     0x97447",
    "test    r13, r13",
    "je      0x9724f",
    "cmp     byte [r10], 0x0",
    "je      0x974e0",
    "nop     dword [rax]",
    "xor     r15d, r15d",
    "jmp     0x973d8",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    al, 0x2",
    "je      0x97450",
    "mov     rdi, r10",
    "mov     qword [rbp-0x60], r10",
    "call    strlen",
    "lea     r14, [rax+0x1]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     r10, qword [rbp-0x60]",
    "test    rax, rax",
    "mov     rcx, rax",
    "je      0x9751e",
    "test    ah, 0x40",
    "jne     0x97289",
    "test    bl, 0x20",
    "je      0x97269",
    "mov     qword [rbp-0x68], rax",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r10",
    "mov     rdx, r14",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x60], r10",
    "call    __strcpy_chk",
    "mov     r10, qword [rbp-0x60]",
    "mov     qword [rbp-0x68], rax",
    "test    r13, r13",
    "je      0x973d8",
    "mov     rsi, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     rcx, qword [rbp-0x58]",
    "mov     rdi, r15",
    "mov     r8d, ebx",
    "mov     rdx, r10",
    "xor     eax, eax",
    "call    sub_960d0",
    "mov     r15, rax",
    "test    r13, r13",
    "je      0x973d8",
    "lea     rsi, [rel data_11fcf9]  {\"%s: readonly variable\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "test    ah, 0x40",
    "je      0x97459",
    "mov     rax, qword [rbp-0x68]",
    "mov     ecx, 0x2",
    "mov     word [r13], cx",
    "mov     qword [r13+0x10], rax",
    "mov     rbx, qword [rbp-0x68]",
    "mov     edx, 0x2",
    "xor     r15d, r15d",
    "mov     word [r13], dx",
    "mov     qword [r13+0x10], rbx",
    "test    rax, rax",
    "je      0x973d4",
    "xor     eax, eax",
    "jmp     0x973d4",
    "mov     rdi, qword [rbp-0x68]",
    "xor     edx, edx",
    "call    hash_search",
    "test    rax, rax",
    "je      0x974c0",
    "mov     r15, rax",
    "jmp     0x972a4",
    "mov     rax, qword [rax+0x10]",
    "jmp     0x973d4",
    "mov     rsi, qword [r15+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rsi, rsi",
    "je      0x974c0"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}