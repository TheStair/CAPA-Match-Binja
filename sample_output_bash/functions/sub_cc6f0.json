{
  "address": "0xcc6f0",
  "rules": [
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "decrypt data using TEA/e3455f541322464e87e33d73effdac9c/2f647bab2e344493baea90ef9b7387ed",
    "contain loop",
    "encrypt data using TEA/f68c13fdd9924dacbb04fb3766fcc8ea/f4f005346e96448ea67ed2caa193f805",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using XXTEA/c3f2a9482f0d43a8bf071fa39e1b4168/c4ca7bfb577a49f4aa924cd71c1d4bfa"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x18",
    "test    esi, esi",
    "jne     0xcc768",
    "mov     dword [rel data_16087c], 0x0",
    "mov     r13d, esi",
    "mov     r12, rdi",
    "lea     rbx, [rel data_156098]",
    "mov     dword [rel data_160880], 0x0",
    "mov     eax, 0x61",
    "xor     r15d, r15d  {0x0}",
    "lea     rsi, [rel data_11f1dc]  {\"autocd\"}",
    "mov     dword [rel data_16086c], 0x0",
    "mov     dword [rel data_160870], 0x0",
    "mov     dword [rel data_160874], 0x0",
    "mov     dword [rel data_160878], 0x0",
    "mov     dword [rel data_160868], 0x0",
    "movzx   r14d, byte [rdi]",
    "jmp     0xcc7e3",
    "lea     rax, [rel shell_compatibility_level]",
    "mov     r10d, dword [rel data_160880]",
    "mov     ecx, dword [rax]  {shell_compatibility_level}",
    "mov     dword [rbp-0x34 {shell_compatibility_level_1}], ecx",
    "test    r10d, r10d",
    "je      0xcc821",
    "cmp     r14b, al",
    "jne     0xcc7d0",
    "mov     r9d, dword [rel data_16087c]",
    "test    r9d, r9d",
    "je      0xcc840",
    "mov     dword [rax], 0x1f  {shell_compatibility_level}",
    "mov     edi, 0x1f",
    "mov     rsi, qword [rbx]",
    "add     rbx, 0x18",
    "add     r15d, 0x1",
    "test    rsi, rsi",
    "je      0xcc807",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xcc7d0",
    "mov     r8d, dword [rel data_160878]",
    "test    r8d, r8d",
    "jne     0xcc870",
    "mov     dword [rax], 0x20  {shell_compatibility_level}",
    "mov     edi, 0x20",
    "jmp     0xcc730",
    "mov     dword [rsi], r13d",
    "mov     r10d, dword [rel data_160880]",
    "lea     rax, [rel shell_compatibility_level]",
    "test    r10d, r10d",
    "jne     0xcc725",
    "movzx   eax, byte [rsi]",
    "movsxd  r15, r15d",
    "lea     rax, [rel data_156080]",
    "lea     rdx, [r15+r15*2]",
    "mov     rsi, qword [rax+rdx*8+0x8]",
    "mov     dword [rax], 0x28  {shell_compatibility_level}",
    "mov     edi, 0x28",
    "jmp     0xcc730",
    "mov     edi, dword [rel data_160874]",
    "test    edi, edi",
    "je      0xcc880",
    "call    itos",
    "xor     edx, edx  {0x0}",
    "lea     rdi, [rel data_120091]  {\"BASH_COMPAT\"}",
    "mov     rbx, rax",
    "mov     rsi, rax",
    "call    bind_variable",
    "mov     rdi, rbx",
    "call    free",
    "add     rsp, 0x18",
    "xor     eax, eax  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     esi, dword [rel data_160870]",
    "test    esi, esi",
    "jne     0xcc8a4",
    "mov     dword [rax], 0x29  {shell_compatibility_level}",
    "mov     edi, 0x29",
    "jmp     0xcc730",
    "mov     dword [rax], 0x2a  {shell_compatibility_level}",
    "mov     edi, 0x2a",
    "jmp     0xcc730",
    "mov     ecx, dword [rel data_16086c]",
    "test    ecx, ecx",
    "je      0xcc8b4",
    "mov     edx, dword [rel data_160868]",
    "test    edx, edx",
    "je      0xcc8ce",
    "mov     dword [rax], 0x2b  {shell_compatibility_level}",
    "mov     edi, 0x2b",
    "jmp     0xcc730",
    "cmp     dword [rbp-0x34 {shell_compatibility_level_1}], 0x2c",
    "jle     0xcc8e0",
    "mov     dword [rax], 0x2c  {shell_compatibility_level}",
    "mov     edi, 0x2c",
    "jmp     0xcc730",
    "mov     dword [rax], 0x34  {shell_compatibility_level}",
    "mov     edi, 0x34",
    "jmp     0xcc730",
    "movsxd  rdi, dword [rax]  {shell_compatibility_level}",
    "cmp     edi, 0x33",
    "jle     0xcc730"
  ],
  "high level IL": [
    "uint64_t shell_compatibility_level_2",
    "if (arg2 != 0)",
    "char const (** const rbx_2)[0x12] = &data_156098",
    "char const rax_3 = 0x61",
    "int32_t r15_1 = 0",
    "char const (* rsi_1)[0x12] = \"autocd\"",
    "__builtin_memset(&data_160868, 0, 0x1c)",
    "char r14_1 = *arg1",
    "while (true)",
    "if (r14_1 == rax_3 && strcmp(arg1, rsi_1) == 0)",
    "rsi_1 = (&data_156088)[sx.q(r15_1) * 3]",
    "break",
    "rsi_1 = *rbx_2",
    "rbx_2 = &rbx_2[3]",
    "r15_1 += 1",
    "if (rsi_1 == 0)",
    "break",
    "rax_3 = *rsi_1",
    "*rsi_1 = arg2",
    "if (data_160880 == 0)",
    "goto label_cc828",
    "shell_compatibility_level = 0x1f",
    "shell_compatibility_level_2 = 0x1f",
    "uint32_t shell_compatibility_level_1 = shell_compatibility_level",
    "if (data_160880 == 0)",
    "label_cc828:",
    "if (data_16087c != 0)",
    "shell_compatibility_level = 0x20",
    "shell_compatibility_level_2 = 0x20",
    "if (data_160878 != 0)",
    "shell_compatibility_level = 0x28",
    "shell_compatibility_level_2 = 0x28",
    "if (data_160874 != 0)",
    "shell_compatibility_level = 0x29",
    "shell_compatibility_level_2 = 0x29",
    "if (data_160870 != 0)",
    "shell_compatibility_level = 0x2a",
    "shell_compatibility_level_2 = 0x2a",
    "if (data_16086c != 0)",
    "shell_compatibility_level = 0x2b",
    "shell_compatibility_level_2 = 0x2b",
    "if (data_160868 == 0)",
    "if (shell_compatibility_level_1 s> 0x2c)",
    "shell_compatibility_level_2 = sx.q(shell_compatibility_level)",
    "if (shell_compatibility_level_1 s<= 0x2c || shell_compatibility_level_2.d s> 0x33)",
    "shell_compatibility_level = 0x34",
    "shell_compatibility_level_2 = 0x34",
    "shell_compatibility_level = 0x2c",
    "shell_compatibility_level_2 = 0x2c",
    "shell_compatibility_level = 0x1f",
    "shell_compatibility_level_2 = 0x1f",
    "char* rax_1 = itos(shell_compatibility_level_2)",
    "bind_variable(\"BASH_COMPAT\", rax_1, 0)",
    "free(rax_1)",
    "return 0"
  ]
}