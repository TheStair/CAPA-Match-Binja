{
  "address": "0xb4d60",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "link function at runtime on Linux",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "contain loop",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802",
    "PEB access/684066f105bd43c0a5be1ea6f2b60301"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {var_10}",
    "push    r14 {__saved_r14}",
    "lea     r14, [rel data_12132b]",
    "push    r13 {__saved_r13}",
    "lea     r13, [rel jump_table_13726c]",
    "push    r12 {__saved_r12}",
    "mov     r12, rdi",
    "push    rbx {__saved_rbx}",
    "xor     ebx, ebx  {0x0}",
    "sub     rsp, 0x38",
    "lea     rax, [rel loptend]",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     qword [rax], 0x0  {loptend}",
    "lea     rax, [rel lcurrent]",
    "mov     qword [rax], 0x0  {lcurrent}",
    "lea     r12, [rel restricted]",
    "lea     rax, [rel loptend]",
    "mov     edi, dword [r12]  {restricted}",
    "mov     r14, qword [rax]  {loptend}",
    "test    edi, edi",
    "je      0xb4f30",
    "cmp     eax, 0xffffff9d",
    "je      0xb4f20",
    "test    r14, r14",
    "jne     0xb5018",
    "test    bl, 0x6",
    "jne     0xb5105",
    "call    builtin_help",
    "jmp     0xb4ded",
    "sub     eax, 0x61",
    "cmp     eax, 0x12",
    "ja      0xb4de8",
    "test    bl, 0x10",
    "jne     0xb4f39",
    "mov     r12d, 0x3",
    "test    bl, 0x1",
    "je      0xb5068",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121073]  {\"restricted\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "mov     edx, 0x1",
    "jmp     0xb4df2",
    "test    r14, r14",
    "je      0xb4f39",
    "mov     edx, 0x102",
    "{Case 0x1-0x2, 0x4, 0x6-0xc, 0xe, 0x10-0x11}",
    "call    builtin_usage",
    "movsxd  rax, dword [r13+rax*4]",
    "add     rax, r13",
    "jmp     rax",
    "mov     edx, ebx",
    "and     edx, 0x4",
    "je      0xb5160",
    "xor     r12d, r12d  {0x0}",
    "test    bl, 0x8",
    "setne   r12b",
    "add     r12d, 0x1",
    "jmp     0xb4f48",
    "lea     r13, [rel num_shell_builtins]",
    "mov     eax, r12d",
    "or      eax, 0x4",
    "and     ebx, 0x20",
    "mov     esi, dword [r13]  {num_shell_builtins}",
    "cmovne  r12d, eax",
    "test    esi, esi",
    "jle     0xb5000",
    "add     rsp, 0x38",
    "mov     eax, edx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {var_10}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "test    bl, 0x10",
    "jne     0xb4f39",
    "{Case 0x12}",
    "mov     rsi, r14  {data_12132b, \"adnpsf:\"}",
    "mov     rdi, r12",
    "or      ebx, 0x20",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "jne     0xb4dc9",
    "{Case 0xf}",
    "or      ebx, 0x10",
    "jmp     0xb4db9",
    "{Case 0xd}",
    "or      ebx, 0x8",
    "jmp     0xb4db9",
    "{Case 0x5}",
    "lea     rax, [rel list_optarg]",
    "or      ebx, 0x4",
    "mov     r15, qword [rax]  {list_optarg}",
    "jmp     0xb4db9",
    "{Case 0x3}",
    "or      ebx, 0x2",
    "jmp     0xb4db9",
    "{Case 0x0}",
    "or      ebx, 0x1",
    "jmp     0xb4db9",
    "test    bl, 0x2",
    "je      0xb4e58",
    "xor     esi, esi  {0x0}",
    "test    bl, 0x8",
    "mov     rdx, r15",
    "mov     rdi, r14",
    "setne   sil",
    "add     esi, 0x1",
    "mov     eax, esi",
    "or      eax, 0x4",
    "and     ebx, 0x20",
    "cmovne  esi, eax",
    "call    sub_b1e10",
    "xor     edx, edx  {0x0}",
    "test    eax, eax",
    "lea     rax, [rel it_builtins]",
    "setne   dl",
    "or      dword [rax], 0x2  {it_builtins}",
    "jmp     0xb4df2",
    "add     rsp, 0x38",
    "xor     edi, edi  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {var_10}",
    "pop     rbp {__saved_rbp}",
    "jmp     sh_chkwrite",
    "mov     r15d, r12d",
    "lea     r14, [rel shell_builtins]",
    "xor     ebx, ebx  {0x0}",
    "and     r15d, 0x4",
    "jmp     0xb4f9a",
    "mov     eax, ebx",
    "xor     edx, edx  {0x0}",
    "and     ebx, 0x8",
    "sar     eax, 0x3",
    "mov     dword [rbp-0x38 {var_40_1}], edx  {0x0}",
    "and     eax, 0x4",
    "or      eax, 0x9",
    "mov     dword [rbp-0x40 {var_48_1}], eax",
    "jmp     0xb4e96",
    "nop     dword [rax+rax]",
    "mov     rsi, r14  {data_12132b, \"adnpsf:\"}",
    "mov     rdi, r12",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xb4e20",
    "mov     dword [rbp-0x54 {var_5c_1}], edx",
    "nop     dword [rax]",
    "lea     rax, [rbx+rbx*2]",
    "shl     rax, 0x4",
    "add     rax, qword [r14]  {shell_builtins}",
    "cmp     qword [rax+0x8], 0x0",
    "je      0xb4f90",
    "mov     rax, qword [r14+0x8]",
    "mov     esi, 0x1",
    "mov     r13, qword [rax]",
    "mov     rdi, r13",
    "call    builtin_address_internal",
    "test    rax, rax",
    "je      0xb509b",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x40 {var_48}]",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "mov     r12d, dword [rax+0x10]",
    "and     r12d, 0x4",
    "jne     0xb5356",
    "add     rbx, 0x1",
    "cmp     dword [r13], ebx",
    "jle     0xb5000  {num_shell_builtins}",
    "mov     edx, dword [rax+0x10]",
    "test    dl, 0x2",
    "jne     0xb4f90",
    "mov     r15, qword [r14]",
    "mov     qword [r14], 0x0",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     esi, dword [rbp-0x40 {var_48_1}]",
    "call    sub_b1e10",
    "mov     qword [r14], r15",
    "test    eax, eax",
    "lea     rax, [rel it_builtins]",
    "je      0xb50fa",
    "mov     edx, dword [rax+0x10]",
    "test    ebx, ebx",
    "jne     0xb4e70",
    "mov     r14, qword [r14]",
    "test    r14, r14",
    "jne     0xb5170",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_12134c]  {\"%s: not dynamically loaded\"}",
    "lea     r15, [rel num_shell_builtins]",
    "mov     r13, qword [rax+0x28]",
    "movsxd  rdx, dword [r15]  {num_shell_builtins}",
    "test    edx, edx",
    "jle     0xb51f4",
    "test    r15d, r15d",
    "je      0xb4f80",
    "or      dword [rax], 0x2  {it_builtins}",
    "mov     r14, r15",
    "jmp     0xb4e8d",
    "or      dword [rax], 0x2  {it_builtins}",
    "mov     rax, qword [r14+0x8]",
    "mov     edx, 0x5",
    "xor     edi, edi  {0x0}",
    "lea     rsi, [rel data_121057]  {\"%s: not a shell builtin\"}",
    "mov     r14, r15",
    "mov     r13, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, r13",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "mov     dword [rbp-0x38 {var_40_1}], 0x1",
    "jmp     0xb4e8d",
    "and     edx, 0xfffffffe",
    "mov     ecx, dword [r12]  {restricted}",
    "test    ecx, ecx",
    "je      0xb4ecb",
    "mov     rax, qword [r14+0x8]",
    "mov     esi, 0x1",
    "mov     rax, qword [rax]",
    "mov     rdi, rax",
    "mov     qword [rbp-0x40 {var_48}], rax",
    "call    builtin_address_internal",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121057]  {\"%s: not a shell builtin\"}",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xb5362",
    "lea     rax, [rel it_builtins]",
    "mov     edx, dword [rbp-0x54 {var_5c_1}]",
    "or      dword [rax], 0x2  {it_builtins}",
    "jmp     0xb4df2",
    "mov     rdi, qword [rbp-0x40 {var_48}]",
    "call    strlen",
    "movsxd  r10, eax",
    "lea     rcx, [r10+0x11]",
    "mov     qword [rbp-0x50 {var_58_1}], r10",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x48 {var_50_1}], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x48 {var_50_1}]",
    "mov     r10, qword [rbp-0x50 {var_58_1}]",
    "test    rax, rax",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "je      0xb5402",
    "lea     rax, [rel shell_builtins]",
    "lea     rcx, [rdx+rdx*2]",
    "shl     rcx, 0x4",
    "mov     rax, qword [rax]  {shell_builtins}",
    "add     rax, 0x28",
    "add     rcx, rax",
    "nop     dword [rax]",
    "test    r12b, 0x1",
    "jne     0xb4fd0",
    "test    dl, 0x8",
    "je      0xb4f90",
    "test    r14, r14",
    "je      0xb512c",
    "mov     edx, dword [rbp-0x38 {var_40_1}]",
    "jmp     0xb4df2",
    "or      edx, 0x1",
    "jmp     0xb4e73",
    "test    dl, 0x1",
    "je      0xb5134",
    "mov     rsi, rcx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x40 {var_48}]",
    "mov     rdi, qword [rbp-0x38 {var_40}]",
    "mov     rdx, rcx",
    "mov     qword [rbp-0x50 {var_58_2}], r10",
    "mov     qword [rbp-0x48 {var_50_2}], rcx",
    "call    __strcpy_chk",
    "mov     r10, qword [rbp-0x50 {var_58_2}]",
    "mov     rcx, qword [rbp-0x48 {var_50_2}]",
    "lea     rsi, [rel data_121367]  {\"_builtin_unload\"}",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "mov     edx, 0x10",
    "cmp     r10, rcx",
    "cmovae  rcx, r10",
    "lea     rdi, [rax+r10]",
    "sub     rcx, r10",
    "call    __memcpy_chk",
    "mov     rsi, qword [rbp-0x38 {var_40}]",
    "mov     rdi, r13",
    "call    dlsym",
    "test    rax, rax",
    "je      0xb5283",
    "xor     edx, edx  {0x0}",
    "cmp     r13, qword [rax]",
    "sete    dl",
    "add     rax, 0x30",
    "add     r12d, edx",
    "cmp     rax, rcx",
    "jne     0xb51e0",
    "and     edx, 0x1",
    "jne     0xb5080",
    "and     edx, 0x1",
    "je      0xb4fdf",
    "test    r12b, 0x1",
    "jne     0xb4fd0",
    "mov     dword [rax+0x10], edx",
    "lea     rax, [rel it_enabled]",
    "mov     r14, qword [r14]",
    "or      dword [rax], 0x2  {it_enabled}",
    "lea     rax, [rel it_disabled]",
    "or      dword [rax], 0x2  {it_disabled}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121073]  {\"restricted\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "mov     dword [rbp-0x38 {var_40_1}], 0x1",
    "mov     r14, qword [r14]",
    "jmp     0xb4e8d",
    "mov     rdi, qword [rbp-0x38 {var_40}]",
    "call    free",
    "cmp     r12d, 0x1",
    "je      0xb5380",
    "mov     rdi, qword [rbp-0x40 {var_48}]",
    "call    rax",
    "mov     rdx, qword [rax]",
    "lea     rsi, [rel data_121333]  {\"enable %s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xb4f90",
    "test    r12b, 0x2",
    "je      0xb4f90",
    "mov     rdx, qword [rax]",
    "lea     rsi, [rel data_12133e]  {\"enable -n %s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xb4f90",
    "nop     dword [rax+rax]",
    "test    r12b, 0x2",
    "je      0xb4f90",
    "mov     rdi, r13",
    "call    dlclose",
    "test    eax, eax",
    "je      0xb5296",
    "lea     rax, [rel shell_builtins]",
    "mov     rcx, rbx",
    "mov     r12, qword [rax]  {shell_builtins}",
    "mov     qword [rbp-0x38 {var_40}], rax  {shell_builtins}",
    "mov     rax, 0xaaaaaaaaaaaaaaab",
    "sub     rcx, r12",
    "sar     rcx, 0x4",
    "imul    rcx, rax",
    "mov     eax, dword [r15]  {num_shell_builtins}",
    "lea     ebx, [rax+rax*2]",
    "shl     ebx, 0x4",
    "mov     qword [rbp-0x40 {var_48}], rcx",
    "movsxd  rbx, ebx",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x40 {var_48}]",
    "test    rax, rax",
    "mov     r13, rax",
    "je      0xb53e1",
    "jmp     0xb4f86",
    "call    dlerror",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121377]  {\"%s: cannot delete: %s\"}",
    "mov     rbx, rax",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x40 {var_48}]",
    "mov     rdx, rbx",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xb5377",
    "xor     eax, eax  {0x0}",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "movsxd  rax, ecx",
    "lea     r9, [rax+rax*2]",
    "shl     r9, 0x4",
    "test    ecx, ecx",
    "jne     0xb53be",
    "mov     dword [rbp-0x54 {var_5c_1}], 0x1",
    "jmp     0xb5338",
    "mov     rdx, r9",
    "mov     rsi, r12",
    "mov     rdi, r13",
    "mov     qword [rbp-0x48 {var_50_3}], rcx",
    "mov     qword [rbp-0x40 {var_48}], r9",
    "call    memcpy",
    "mov     rcx, qword [rbp-0x48 {var_50_3}]",
    "mov     r9, qword [rbp-0x40 {var_48}]",
    "jmp     0xb52f7",
    "mov     ebx, dword [r15]  {num_shell_builtins}",
    "lea     rdi, [r13+r9]",
    "lea     rsi, [r12+r9+0x30]",
    "mov     eax, ebx",
    "sub     eax, ecx",
    "cdqe    ",
    "lea     rdx, [rax+rax*2]",
    "shl     rdx, 0x4",
    "call    memcpy",
    "cmp     r12, qword [rel data_157ea0]",
    "je      0xb532b  {data_157ea0}",
    "mov     rax, qword [rbp-0x38 {var_40}]  {shell_builtins}",
    "sub     ebx, 0x1",
    "mov     dword [r15], ebx  {num_shell_builtins}",
    "mov     qword [rax], r13  {shell_builtins}",
    "mov     rdi, r12",
    "call    free",
    "mov     ebx, dword [r15]  {num_shell_builtins}"
  ],
  "high level IL": [
    "uint64_t var_10 = arg2",
    "int32_t rbx = 0",
    "__builtin_memset(&data_168d30, 0, 0x18)",
    "data_168d28 = 1",
    "label_b4dbf:",
    "int32_t rax_1 = internal_getopt(arg1, \"adnpsf:\")",
    "if (rax_1 != 0xffffffff)",
    "while (true)",
    "if (rax_1 == 0xffffff9d)",
    "builtin_help()",
    "uint64_t rax_2 = zx.q(rax_1 - 0x61)",
    "if (rax_2.d u<= 0x12)",
    "switch (rax_2)",
    "case 0",
    "rbx |= 1",
    "goto label_b4dbf",
    "case 3",
    "rbx |= 2",
    "goto label_b4dbf",
    "case 5",
    "rbx |= 4",
    "arg2 = list_optarg",
    "goto label_b4dbf",
    "case 0xd",
    "rbx |= 8",
    "goto label_b4dbf",
    "case 0xf",
    "rbx |= 0x10",
    "goto label_b4dbf",
    "case 0x12",
    "rbx |= 0x20",
    "rax_1 = internal_getopt(arg1, \"adnpsf:\")",
    "if (rax_1 == 0xffffffff)",
    "break",
    "continue",
    "builtin_usage()",
    "return 0x102",
    "int64_t* loptend_1 = loptend",
    "int32_t rdx_1",
    "if (restricted == 0)",
    "if (loptend_1 == 0 || (rbx.b & 0x10) != 0)",
    "label_b4f39:",
    "int32_t r12_1 = 3",
    "if ((rbx.b & 1) == 0)",
    "int32_t r12_2",
    "r12_2.b = (rbx.b & 8) != 0",
    "r12_1 = r12_2 + 1",
    "if ((rbx & 0x20) != 0)",
    "r12_1 |= 4",
    "if (num_shell_builtins s> 0)",
    "int64_t rbx_3 = 0",
    "int64_t rax_16 = rbx_3 * 0x30 + shell_builtins",
    "if (*(rax_16 + 8) != 0)",
    "int32_t rdx_5 = *(rax_16 + 0x10)",
    "if ((rdx_5.b & 2) == 0)",
    "if ((r12_1 & 4) == 0)",
    "if ((r12_1.b & 1) != 0)",
    "label_b4fd0:",
    "if ((rdx_5 & 1) != 0)",
    "__printf_chk(2, \"enable %s\\n\", *rax_16)",
    "if ((r12_1.b & 2) != 0)",
    "__printf_chk(2, \"enable -n %s\\n\", *rax_16)",
    "label_b4f86:",
    "if ((rdx_5 & 1) == 0)",
    "__printf_chk(2, \"enable -n %s\\n\", *rax_16)",
    "if ((rdx_5.b & 8) != 0)",
    "if ((r12_1.b & 1) != 0)",
    "goto label_b4fd0",
    "if ((r12_1.b & 2) != 0)",
    "goto label_b4f86",
    "rbx_3 += 1",
    "do while (num_shell_builtins s> rbx_3.d)",
    "return sh_chkwrite(0) __tailcall",
    "int32_t rdx_10 = rbx & 4",
    "if (rdx_10 == 0)",
    "if ((rbx.b & 2) == 0)",
    "goto label_b4e62",
    "int32_t var_5c_1 = rdx_10",
    "char* rax_29 = *loptend_1[1]",
    "int32_t var_48",
    "var_48.q = rax_29",
    "int64_t rax_30 = builtin_address_internal(rax_29, 1)",
    "if (rax_30 == 0)",
    "builtin_error(dcgettext(nullptr, \"%s: not a shell builtin\", 5), 0)",
    "var_5c_1 = 1",
    "int32_t r12_4 = *(rax_30 + 0x10) & 4",
    "if (r12_4 != 0)",
    "builtin_error(dcgettext(nullptr, \"%s: not dynamically loaded\", 5), 0)",
    "var_5c_1 = 1",
    "int64_t r13_3 = *(rax_30 + 0x28)",
    "int64_t num_shell_builtins_1 = sx.q(num_shell_builtins)",
    "if (num_shell_builtins_1.d s> 0)",
    "int64_t* j = shell_builtins + 0x28",
    "int32_t rdx_14",
    "rdx_14.b = r13_3 == *j",
    "j = &j[6]",
    "r12_4 += rdx_14",
    "do while (j != &j[num_shell_builtins_1 * 6])",
    "int64_t r10_2 = sx.q(strlen(var_48.q))",
    "int64_t rax_33 = malloc(r10_2 + 0x11)",
    "int32_t var_40",
    "var_40.q = rax_33",
    "if (rax_33 == 0)",
    "sub_a7f00()",
    "noreturn",
    "__strcpy_chk(var_40.q, var_48.q, r10_2 + 0x11)",
    "uint64_t rcx_8 = r10_2 + 0x11",
    "if (r10_2 u>= rcx_8)",
    "rcx_8 = r10_2",
    "__memcpy_chk(var_40.q + r10_2, \"_builtin_unload\", 0x10, rcx_8 - r10_2)",
    "int64_t rax_35 = dlsym(r13_3, var_40.q)",
    "if (rax_35 != 0)",
    "rax_35(var_48.q)",
    "free(var_40.q)",
    "int32_t rax_43",
    "if (r12_4 == 1)",
    "rax_43 = dlclose(r13_3)",
    "if (r12_4 != 1 || rax_43 == 0)",
    "uint64_t shell_builtins_1 = shell_builtins",
    "var_40.q = &shell_builtins",
    "var_48.q = ((rax_30 - shell_builtins_1) s>> 4) * -0x5555555555555555",
    "uint64_t rax_37 = malloc(sx.q(num_shell_builtins * 0x30))",
    "int64_t rcx_14 = var_48.q",
    "if (rax_37 == 0)",
    "sub_a7f00()",
    "noreturn",
    "int64_t r9_3 = sx.q(rcx_14.d) * 0x30",
    "if (rcx_14.d != 0)",
    "var_48.q = r9_3",
    "memcpy(rax_37, shell_builtins_1, r9_3)",
    "r9_3 = var_48.q",
    "uint32_t num_shell_builtins_2 = num_shell_builtins",
    "memcpy(rax_37 + r9_3, shell_builtins_1 + r9_3 + 0x30, sx.q(num_shell_builtins_2 - rcx_14.d) * 0x30)",
    "if (shell_builtins_1 != &static_shell_builtins)",
    "free(shell_builtins_1)",
    "num_shell_builtins_2 = num_shell_builtins",
    "num_shell_builtins = num_shell_builtins_2 - 1",
    "shell_builtins = rax_37",
    "dlerror()",
    "builtin_error(dcgettext(nullptr, \"%s: cannot delete: %s\", 5), 0)",
    "var_5c_1 = 1",
    "loptend_1 = *loptend_1",
    "do while (loptend_1 != 0)",
    "rdx_1 = var_5c_1",
    "it_builtins |= 2",
    "int32_t rsi_3",
    "rsi_3.b = (rbx.b & 8) != 0",
    "int32_t rsi_4 = rsi_3 + 1",
    "if ((rbx & 0x20) != 0)",
    "rsi_4 |= 4",
    "rdx_1.b = sub_b1e10(loptend_1, rsi_4.b, arg2) != 0",
    "it_builtins |= 2",
    "if ((rbx.b & 6) != 0)",
    "builtin_error(dcgettext(nullptr, \"restricted\", 5), 0)",
    "rdx_1 = 1",
    "if (loptend_1 == 0 || (rbx.b & 0x10) != 0)",
    "goto label_b4f39",
    "label_b4e62:",
    "int32_t var_40_1 = 0",
    "char* r13_1 = *loptend_1[1]",
    "int64_t rax_11 = builtin_address_internal(r13_1, 1)",
    "if (rax_11 == 0)",
    "int64_t* loptend_2 = *loptend_1",
    "*loptend_1 = 0",
    "int32_t rax_23 = sub_b1e10(loptend_1, ((rbx s>> 3).b & 4) | 9, r13_1)",
    "*loptend_1 = loptend_2",
    "if (rax_23 == 0)",
    "it_builtins |= 2",
    "loptend_1 = loptend_2",
    "it_builtins |= 2",
    "int64_t* rax_24 = loptend_1[1]",
    "loptend_1 = loptend_2",
    "*rax_24",
    "builtin_error(dcgettext(nullptr, \"%s: not a shell builtin\", 5), 0)",
    "var_40_1 = 1",
    "int32_t rdx_3 = *(rax_11 + 0x10)",
    "int32_t rdx_2",
    "if ((rbx & 8) != 0)",
    "rdx_2 = rdx_3 & 0xfffffffe",
    "label_b4e73:",
    "*(rax_11 + 0x10) = rdx_2",
    "loptend_1 = *loptend_1",
    "it_enabled |= 2",
    "it_disabled |= 2",
    "if (restricted == 0 || (rdx_3.b & 1) != 0)",
    "rdx_2 = rdx_3 | 1",
    "goto label_b4e73",
    "builtin_error(dcgettext(nullptr, \"restricted\", 5), 0)",
    "var_40_1 = 1",
    "loptend_1 = *loptend_1",
    "do while (loptend_1 != 0)",
    "rdx_1 = var_40_1",
    "return zx.q(rdx_1)"
  ]
}