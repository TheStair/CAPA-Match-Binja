{
  "address": "0xd80c0",
  "rules": [
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/4f0637c1ae9b445ca3ec93a4b4e0bb6d",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/bee29d5f30484915bb6e92fdf1038d2c",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/9710d9ee76a4466b954966f2a98c40ba",
    "encrypt data using HC-128/e8f9b1d76e624bf6b554df630e614cdc",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/bfdff12b2adb42709a78f0e77631902b",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/af1fc90a7adf4a2ea648cfac1c599984",
    "contain loop",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/2602c80a9b3846b9ae92e2e83b13e866",
    "hash data using aphash/416ed7212e694999bd9567d4aa818bae",
    "PEB access/684066f105bd43c0a5be1ea6f2b60301"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdi",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     qword [rbp-0x50], rsi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    strlen",
    "lea     ebx, [rax*4+0x4]",
    "movsxd  rbx, ebx",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     qword [rbp-0x48], rax",
    "test    rax, rax",
    "je      0xd8360",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x48]",
    "movzx   ebx, byte [r15]",
    "mov     edx, 0x2724",
    "mov     word [rax], dx",
    "lea     r12, [rax+0x2]",
    "test    bl, bl",
    "je      0xd81c9",
    "mov     eax, 0x27",
    "mov     word [r12], ax",
    "mov     rax, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0xd81ea",
    "lea     r14, [rel jump_table_138660]",
    "nop     word [rax+rax]",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd8374",
    "mov     rcx, qword [rbp-0x48]",
    "add     r12, 0x1",
    "sub     r12, rcx",
    "mov     dword [rax], r12d",
    "cmp     bl, 0x5c",
    "je      0xd8210",
    "cmp     bl, 0x6",
    "jle     0xd8170",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x48]",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "{Case 0x20}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, ebx",
    "jmp     0xd81b0",
    "nop     dword [rax]",
    "{Case 0x7-0x13, 0x15-0x1f}",
    "mov     eax, ebx",
    "lea     rdx, [rel is_basic_table]",
    "mov     ecx, ebx",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0xd82bb",
    "lea     eax, [rbx-0x7]",
    "cmp     al, 0x20",
    "ja      0xd8170",
    "mov     byte [rax], dl",
    "lea     r12, [rax+0x1]",
    "mov     rax, r15",
    "call    __ctype_get_mb_cur_max",
    "lea     rdi, [rbp-0x3c]",
    "xor     ecx, ecx",
    "mov     rsi, r15",
    "mov     rdx, rax",
    "call    mbrtowc",
    "mov     r13, rax",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0xd8313",
    "call    __ctype_b_loc",
    "movzx   ecx, bl",
    "mov     edx, ebx",
    "mov     rsi, qword [rax]",
    "mov     rax, r12",
    "test    byte [rsi+rcx*2+0x1], 0x40",
    "je      0xd82da",
    "movzx   eax, al",
    "movsxd  rax, dword [r14+rax*4]",
    "add     rax, r14",
    "jmp     rax",
    "cmp     bl, 0x27",
    "jg      0xd8160",
    "mov     edi, dword [rbp-0x3c]",
    "call    iswprint",
    "test    eax, eax",
    "je      0xd82da",
    "mov     eax, ebx",
    "mov     byte [r12], 0x5c",
    "add     r12, 0x4",
    "shr     al, 0x6",
    "add     eax, 0x30",
    "mov     byte [r12-0x3], al",
    "mov     eax, ebx",
    "and     ebx, 0x7",
    "shr     al, 0x3",
    "and     eax, 0x7",
    "add     eax, 0x30",
    "mov     byte [r12-0x2], al",
    "lea     eax, [rbx+0x30]",
    "mov     byte [r12-0x1], al",
    "mov     rax, r15",
    "jmp     0xd81b9",
    "nop     dword [rax]",
    "{Case 0x14}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x45",
    "jmp     0xd81b0",
    "{Case 0x6}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x72",
    "jmp     0xd81b0",
    "{Case 0x5}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x66",
    "jmp     0xd81b0",
    "{Case 0x4}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x76",
    "jmp     0xd81b0",
    "{Case 0x3}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x6e",
    "jmp     0xd81b0",
    "{Case 0x1}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x62",
    "jmp     0xd81b0",
    "{Case 0x0}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x61",
    "jmp     0xd81b0",
    "{Case 0x2}",
    "mov     byte [r12], 0x5c",
    "lea     rax, [r12+0x1]",
    "mov     edx, 0x74",
    "jmp     0xd81b0",
    "test    r13, r13",
    "je      0xd81c9",
    "movzx   ebx, byte [rax+0x1]",
    "lea     r15, [rax+0x1]",
    "test    bl, bl",
    "jne     0xd8138",
    "cmp     r13, 0x1",
    "je      0xd8356",
    "mov     edx, ebx",
    "mov     rax, r12",
    "jmp     0xd81b0",
    "test    r13d, r13d",
    "jle     0xd834c",
    "lea     rax, [r15+r13-0x1]",
    "jmp     0xd81b9",
    "lea     ebx, [r13-0x1]",
    "mov     rdi, r12",
    "mov     rsi, r15",
    "add     rbx, 0x1",
    "mov     rdx, rbx",
    "add     r12, rbx",
    "call    memcpy"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}