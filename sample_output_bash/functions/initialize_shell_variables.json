{
  "address": "0x593b0",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "hash data with CRC32/a62eba34c54041488d4eb8afa76fce3c",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "decompress data using aPLib/c6c954600822435a9c47b62afd183d7b",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "log keystrokes via raw input data/5b32ff98460e406e86dc2ef8d82ba1a5",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "get current PID on Linux",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "mov     r13, rdi",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0xd8",
    "mov     dword [rbp-0x90 {var_98}], esi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "lea     rax, [rel __lsan::GetUserBegin]",
    "movq    xmm1, rax",
    "lea     rax, [rel sub_51390]",
    "movq    xmm2, rax",
    "lea     rax, [rel __sanitizer_get_estimated_allocated_size]",
    "movhps  xmm1, qword [rel data_154e90]",
    "movq    xmm0, rax",
    "lea     rax, [rel sub_4f850]",
    "movhps  xmm2, qword [rel data_154e90]",
    "movaps  xmmword [rbp-0xe0 {var_e8}], xmm1",
    "movq    xmm3, rax",
    "lea     rax, [rel sub_51250]",
    "movaps  xmmword [rbp-0xd0 {var_d8}], xmm2",
    "movq    xmm4, rax",
    "lea     rax, [rel sub_51290]",
    "punpcklqdq xmm3, xmm0",
    "movq    xmm5, rax",
    "punpcklqdq xmm4, xmm0",
    "movaps  xmmword [rbp-0xc0 {var_c8}], xmm3",
    "punpcklqdq xmm5, xmm0",
    "movaps  xmmword [rbp-0xb0 {var_b8}], xmm4",
    "movaps  xmmword [rbp-0xa0 {var_a8}], xmm5",
    "call    sub_51d30",
    "test    r13, r13",
    "je      0x594a9",
    "call    set_pwd",
    "lea     rax, [rel dollar_vars]",
    "lea     rdi, [rel data_120a17[0x12]]  {\"_\"}",
    "mov     rsi, qword [rax]  {dollar_vars}",
    "call    set_if_not",
    "call    getpid",
    "lea     rdx, [rel dollar_dollar_pid]",
    "lea     rsi, [rel data_132ca0]  {\"/usr/local/sbin:/usr/local/bin:/\u2026\"}",
    "lea     rdi, [rel data_121266]  {\"PATH\"}",
    "mov     dword [rdx], eax  {dollar_dollar_pid}",
    "call    set_if_not",
    "lea     rsi, [rel data_11f286]  {\"dumb\"}",
    "lea     rdi, [rel data_1206c6[3]]  {\"TERM\"}",
    "call    set_if_not",
    "lea     r13, [rel interactive_shell]",
    "mov     eax, dword [r13]  {interactive_shell}",
    "test    eax, eax",
    "jne     0x5a109",
    "mov     r15, qword [r13]",
    "add     r13, 0x8",
    "mov     r12, r13",
    "test    r15, r15",
    "je      0x594a9",
    "lea     rax, [rel primary_prompt]",
    "lea     rdi, [rel data_11f28b]",
    "mov     rsi, qword [rax]  {primary_prompt}",
    "call    set_if_not",
    "lea     rax, [rel secondary_prompt]",
    "lea     rdi, [rel data_11f28f]",
    "mov     rsi, qword [rax]  {secondary_prompt}",
    "call    set_if_not",
    "jmp     0x5950b",
    "lea     r12, [rel current_user]",
    "mov     r11d, dword [r12+0x4]  {data_1584a4}",
    "test    r11d, r11d",
    "je      0x59ec8",
    "nop     dword [rax]",
    "xor     edx, edx  {0x0}",
    "lea     rsi, [rel data_11ffae]",
    "lea     rdi, [rel data_11faf2]",
    "call    bind_variable",
    "jmp     0x59533",
    "lea     rsi, [rel data_11ffae]",
    "lea     rdi, [rel data_11faf2]",
    "call    set_if_not",
    "movsx   eax, byte [rbx]",
    "add     rbx, 0x1",
    "test    eax, eax",
    "jne     0x59488",
    "xor     edx, edx  {0x0}",
    "lea     rsi, [rel data_120c5d[7]]  {\" \\t\\n\"}",
    "lea     rdi, [rel data_11ffb1]",
    "call    bind_variable",
    "mov     rdi, rax",
    "call    setifs",
    "lea     rsi, [rel data_11ffb5]  {\"x86_64\"}",
    "lea     rdi, [rel data_11ffbc]  {\"HOSTTYPE\"}",
    "call    set_if_not",
    "lea     rsi, [rel data_11f0a2[0xa]]  {\"linux-gnu\"}",
    "lea     rdi, [rel data_11ffc5]  {\"OSTYPE\"}",
    "call    set_if_not",
    "lea     rsi, [rel data_11f0a2]  {\"x86_64-pc-linux-gnu\"}",
    "lea     rdi, [rel data_11ffcc]  {\"MACHTYPE\"}",
    "call    set_if_not",
    "lea     rax, [rel current_host_name]",
    "lea     rdi, [rel data_11ffd5]  {\"HOSTNAME\"}",
    "mov     rsi, qword [rax]  {current_host_name}",
    "call    set_if_not",
    "mov     r10d, dword [r13]  {interactive_shell}",
    "test    r10d, r10d",
    "je      0x595f4",
    "mov     edi, 0x1",
    "call    adjust_shell_level",
    "call    set_ppid",
    "lea     rdi, [rel data_11ffe8]  {\"BASH_ARGV0\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5961e",
    "lea     rax, [rel posixly_correct]",
    "lea     rbx, [rel data_11ff73]",
    "mov     r9d, dword [rax]  {posixly_correct}",
    "lea     rax, [rel data_11ff6f]",
    "test    r9d, r9d",
    "cmovne  rbx, rax  {data_11ff6f}",
    "lea     rax, [rel shell_variables]",
    "cmp     qword [rax], 0x0",
    "je      0x5a553  {shell_variables}",
    "cmp     eax, 0x3d",
    "je      0x59cd8",
    "mov     r15, qword [r12]",
    "add     r12, 0x8",
    "test    r15, r15",
    "jne     0x59480",
    "lea     rbx, [rel data_12076f[9]]",
    "xor     edx, edx  {0x0}",
    "lea     rdi, [rel data_11fe98]  {\"OPTIND\"}",
    "mov     rsi, rbx  {data_12076f[9], \"1\"}",
    "call    bind_variable",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx  {data_12076f[9], \"1\"}",
    "lea     rdi, [rel data_11fff3]  {\"OPTERR\"}",
    "or      dword [rax+0x28], 0x10",
    "lea     rax, [rel sh_optind]",
    "mov     dword [rax], 0x0  {sh_optind}",
    "lea     rax, [rel sh_badopt]",
    "mov     dword [rax], 0x0  {sh_badopt}",
    "call    bind_variable",
    "lea     r15, [rel login_shell]",
    "lea     rax, [rel sh_opterr]",
    "cmp     dword [r15], 0x1",
    "mov     dword [rax], 0x1  {sh_opterr}",
    "je      0x5a09f",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x80",
    "jne     0x5a3f2",
    "call    sub_51d30",
    "jmp     0x595d8",
    "lea     r15, [rel data_11ffde]",
    "mov     rdi, r15  {data_11ffde, \"MAILCHECK\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a52d",
    "mov     r13, rbx",
    "sub     r13, r15",
    "mov     eax, r13d",
    "sub     eax, 0x1",
    "je      0x5949c",
    "mov     rbx, r15",
    "jmp     0x59491",
    "lea     rax, [rel posixly_correct]",
    "mov     r8d, dword [rax]  {posixly_correct}",
    "test    r8d, r8d",
    "je      0x5a4f6",
    "lea     r15, [rel shell_name]",
    "mov     rbx, qword [r15]  {shell_name}",
    "movzx   eax, byte [rbx]",
    "cmp     al, 0x2f",
    "je      0x5a4c0",
    "mov     rsi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "xor     ecx, ecx  {0x0}",
    "xor     edx, edx  {0x0}",
    "mov     rdi, rax",
    "call    sub_4f710",
    "jmp     0x5961e",
    "lea     rax, [rel global_variables]",
    "xor     r8d, r8d  {0x0}",
    "mov     rsi, rbx",
    "mov     rdi, r15  {data_11ffde, \"MAILCHECK\"}",
    "mov     ecx, 0x1",
    "mov     rax, qword [rax]  {global_variables}",
    "mov     rdx, qword [rax+0x20]",
    "call    sub_55a00",
    "jmp     0x595f0",
    "or      dword [rax+0x28], 0x10",
    "movsxd  r14, eax",
    "mov     ecx, dword [rbp-0x90 {var_98}]",
    "lea     rax, [r15+r14]",
    "mov     byte [rax], 0x0",
    "mov     qword [rbp-0x88 {var_90_3}], rax",
    "lea     rax, [rel read_but_dont_execute]",
    "or      ecx, dword [rax]  {read_but_dont_execute}",
    "movzx   eax, byte [r15]",
    "jne     0x59d18",
    "lea     rbx, [rel data_11f154]",
    "mov     rdi, rbx  {data_11f154, \"HOME\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a692",
    "lea     rax, [rel shell_name]",
    "mov     rbx, qword [rax]  {shell_name}",
    "cmp     byte [rbx], 0x2f",
    "je      0x5a4c0",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     r15, [rax+0x1]",
    "mov     rdi, r15",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5a7d1",
    "cmp     al, 0x2e",
    "jne     0x596a6",
    "cmp     al, 0x53",
    "je      0x59e20",
    "cmp     al, 0x42",
    "je      0x59ee2",
    "mov     rsi, qword [r12+0x20]  {data_1584c0}",
    "test    rsi, rsi",
    "je      0x5a6ab",
    "cmp     dword [r15], 0x1",
    "je      0x5a0b2  {login_shell}",
    "mov     r14, qword [r12+0x18]  {data_1584b8}",
    "test    r14, r14",
    "je      0x5a609",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, rbx",
    "mov     rdx, r15",
    "mov     rdi, r14",
    "mov     rbx, r14",
    "call    __strcpy_chk",
    "jmp     0x596d2",
    "mov     esi, 0x24",
    "mov     rdi, rbx",
    "call    sub_a9b40",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5a44d",
    "cmp     byte [rbx+0x1], 0x2f",
    "je      0x5a55d",
    "lea     rsi, [rel data_11ffa4]  {\"SHELLOPTS\"}",
    "mov     rdi, r15",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x59d20",
    "xor     r14d, r14d  {0x0}",
    "mov     edx, 0xa",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11ff94]  {\"BASH_FUNC_\"}",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x59d20",
    "cmp     qword [r12+0x10], 0x0",
    "jne     0x5a69c  {data_1584b0}",
    "xor     edx, edx  {0x0}",
    "mov     rdi, rbx  {data_11f154, \"HOME\"}",
    "call    bind_variable",
    "jmp     0x5a50e",
    "jmp     0x59683",
    "cmp     qword [r12+0x10], 0x0",
    "jne     0x5a0d3  {data_1584b0}",
    "mov     rdi, r14",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x5a6e3",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11fffa]  {\"BASH\"}",
    "call    bind_variable",
    "mov     rdi, rbx",
    "lea     rbx, [rel data_1200b3[8]]",
    "call    free",
    "mov     rdi, rbx  {data_1200b3[8], \"SHELL\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a20a",
    "mov     rdi, qword [r15]  {shell_name}",
    "call    file_status",
    "test    al, 0x2",
    "je      0x5a0c5",
    "mov     rdi, rax",
    "call    full_pathname",
    "mov     rdi, r14",
    "mov     rbx, rax",
    "call    free",
    "lea     rdi, [rel data_11fb41[3]]  {\"PWD\"}",
    "call    find_variable",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x5a659",
    "lea     rdi, [rel data_11ffa4]  {\"SHELLOPTS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x59d20",
    "lea     r14, [rel invalid_env]",
    "mov     rdx, qword [r14]  {invalid_env}",
    "test    rdx, rdx",
    "je      0x5a3d0",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx",
    "mov     rdi, r15",
    "call    bind_variable",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x59ea0",
    "lea     r14, [r15+r14-0x2]",
    "cmp     byte [r14], 0x25",
    "jne     0x59d20",
    "call    sub_347e0",
    "mov     rsi, qword [r12+0x20]  {data_1584c0}",
    "jmp     0x5a69c",
    "call    sub_347e0",
    "mov     r14, qword [r12+0x18]  {data_1584b8}",
    "jmp     0x5a0d3",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r14",
    "mov     rdi, r15",
    "mov     rbx, r15",
    "call    __strcpy_chk",
    "jmp     0x596d2",
    "mov     rsi, qword [r12+0x18]  {data_1584b8}",
    "test    rsi, rsi",
    "je      0x5a624",
    "cmp     byte [rel data_162b40], 0x0",
    "lea     rbx, [rel data_162b40]",
    "je      0x5a1bd",
    "lea     rdi, [rel data_11fb41[3]]  {\"PWD\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a476",
    "mov     r15, qword [r15]  {shell_name}",
    "mov     rdi, r15",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5a7e7",
    "call    get_variable_value",
    "mov     qword [rbp-0xe8 {var_f0_2}], rax",
    "test    rax, rax",
    "je      0x5a659",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     r14d, edx",
    "and     edx, 0xfffffffd",
    "shr     r14d, 0x1",
    "mov     dword [rax+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "and     r14d, 0x1",
    "jmp     0x59d23",
    "mov     edi, 0x40",
    "call    hash_create",
    "mov     qword [r14], rax  {invalid_env}",
    "mov     rdx, rax",
    "jmp     0x59deb",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0x1",
    "mov     rsi, rbx",
    "mov     rdi, r15",
    "call    sub_55a00",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x59ea0",
    "mov     rax, qword [rbp-0x88 {var_90_3}]",
    "add     r12, 0x8",
    "mov     byte [rax], 0x3d",
    "mov     r15, qword [r12-0x8]",
    "test    r15, r15",
    "jne     0x59480",
    "mov     eax, dword [rax+0x28]",
    "mov     edx, eax",
    "or      eax, 0x8003",
    "or      edx, 0x8001",
    "test    r14d, r14d",
    "cmove   eax, edx",
    "mov     dword [r13+0x28], eax",
    "cmp     byte [r14+0x1], 0x25",
    "jne     0x59d20",
    "cmp     qword [r12+0x10], 0x0",
    "jne     0x5a218  {data_1584b0}",
    "xor     edx, edx  {0x0}",
    "mov     rdi, rbx  {data_1200b3[8], \"SHELL\"}",
    "call    bind_variable",
    "jmp     0x59703",
    "sub     rsp, 0x8",
    "mov     ecx, 0x20",
    "mov     rdi, rbx  {data_162b40}",
    "mov     edx, 0x2",
    "lea     rax, [rel data_12000c]  {\"release\"}",
    "lea     r9, [rel data_11f14a]",
    "mov     esi, 0x20",
    "push    rax {var_118}  {data_12000c, \"release\"}",
    "lea     r8, [rel data_11ffff]  {\"%s.%d(%d)-%s\"}",
    "xor     eax, eax  {0x0}",
    "push    0x1 {var_120}",
    "push    0x15 {var_128}",
    "call    __snprintf_chk",
    "add     rsp, 0x20",
    "jmp     0x59717",
    "mov     rsi, rbx  {data_162b40}",
    "lea     rdi, [rel data_120014]  {\"BASH_VERSION\"}",
    "lea     r15, [rbp-0x60 {var_68}]",
    "xor     edx, edx  {0x0}",
    "call    bind_variable",
    "lea     rbx, [rel data_120021]",
    "mov     rdi, rbx  {data_120021, \"BASH_VERSINFO\"}",
    "call    unbind_variable_noref",
    "mov     rdi, rbx  {data_120021, \"BASH_VERSINFO\"}",
    "call    make_new_array_variable",
    "mov     esi, 0x2e",
    "mov     rdi, r15 {var_68}",
    "mov     rbx, qword [rax+0x8]",
    "mov     r14, rax",
    "mov     dword [rbp-0x60 {var_68}], 0x322e35",
    "call    strchr",
    "xor     ecx, ecx  {0x0}",
    "test    rax, rax",
    "je      0x5976c",
    "mov     rdi, qword [r15]  {shell_name}",
    "mov     rsi, rax",
    "call    make_absolute",
    "mov     rbx, rax",
    "mov     rax, qword [r15]  {shell_name}",
    "cmp     byte [rax], 0x2e",
    "jne     0x596d2",
    "mov     rdi, rax",
    "call    get_variable_value",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r15",
    "mov     rdi, r14",
    "mov     rbx, r14",
    "call    __strcpy_chk",
    "jmp     0x596d2",
    "mov     rdi, rax",
    "call    strlen",
    "movsxd  r14, eax",
    "mov     rax, qword [r15]  {shell_name}",
    "mov     rdi, rax",
    "mov     qword [rbp-0x88 {var_90_4}], rax",
    "call    strlen",
    "lea     rax, [r14+rax+0x1]",
    "mov     rdi, rax",
    "mov     qword [rbp-0x90 {var_98}], rax",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x5a6bf",
    "mov     rdi, r15",
    "call    legal_identifier",
    "test    eax, eax",
    "je      0x59dd8",
    "or      dword [rax+0x28], 0x9001",
    "jmp     0x59d66",
    "jmp     0x594a9",
    "mov     rdi, r15",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5a77c",
    "cmp     byte [r14+0x2], 0x0",
    "jne     0x59d20",
    "call    sub_347e0",
    "mov     rsi, qword [r12+0x18]  {data_1584b8}",
    "jmp     0x5a218",
    "mov     rdx, r15 {var_68}",
    "xor     esi, esi  {0x0}",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x88 {var_90_1}], rcx",
    "call    array_insert",
    "mov     rdx, qword [rbp-0x88 {var_90_1}]",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "call    array_insert",
    "lea     r10, [rbp-0x6c {var_74}]",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0xc",
    "mov     rdx, r10 {var_74}",
    "mov     esi, 0xa",
    "mov     edi, 0x15",
    "mov     qword [rbp-0x88 {var_90_2}], r10 {var_74}",
    "call    fmtulong",
    "mov     esi, 0x2",
    "mov     rdi, rbx",
    "mov     rdx, rax",
    "call    array_insert",
    "mov     rdx, qword [rbp-0x88 {var_90_2}]",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0xc",
    "mov     esi, 0xa",
    "mov     edi, 0x1",
    "call    fmtulong",
    "mov     esi, 0x3",
    "mov     rdi, rbx",
    "mov     rdx, rax",
    "call    array_insert",
    "lea     rdx, [rel data_12000c]  {\"release\"}",
    "mov     esi, 0x4",
    "mov     rdi, rbx",
    "call    array_insert",
    "mov     esi, 0x5",
    "lea     rdx, [rel data_11f0a2]  {\"x86_64-pc-linux-gnu\"}",
    "mov     rdi, rbx",
    "call    array_insert",
    "lea     rax, [rel command_execution_string]",
    "or      dword [r14+0x28], 0x2",
    "mov     rsi, qword [rax]  {command_execution_string}",
    "test    rsi, rsi",
    "je      0x59841",
    "mov     byte [rax], 0x0",
    "lea     rcx, [rax+0x1]",
    "mov     esi, 0x3",
    "mov     rdi, rbx",
    "call    sh_canonpath",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x596d2",
    "mov     rsi, qword [rbp-0x90 {var_98}]",
    "xor     eax, eax  {0x0}",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     r15, qword [rbp-0x90 {var_98}]",
    "mov     rsi, qword [rbp-0xe8 {var_f0_2}]",
    "mov     rdi, rbx",
    "mov     rdx, r15",
    "call    __strcpy_chk",
    "cmp     r14, r15",
    "mov     rax, r15",
    "lea     rdi, [rbx+r14]",
    "cmovae  rax, r14",
    "mov     rsi, qword [rbp-0x88 {var_90_4}]",
    "mov     rdx, rax",
    "add     rsi, 0x1",
    "sub     rdx, r14",
    "call    __strcpy_chk",
    "jmp     0x596d2",
    "lea     rax, [rel array_needs_making]",
    "mov     dword [rax], 0x1  {array_needs_making}",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r15",
    "mov     rdx, rbx",
    "mov     rdi, r14",
    "add     r12, 0x8",
    "call    __strcpy_chk",
    "mov     qword [r13+0x10], r14",
    "mov     r15, qword [r12-0x8]",
    "test    r15, r15",
    "jne     0x59480",
    "cmp     byte [rbx], 0x28",
    "jne     0x59d20",
    "lea     rdi, [rel data_11f1ed]  {\"POSIXLY_CORRECT\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a433",
    "xor     edx, edx  {0x0}",
    "lea     rdi, [rel data_12002f]  {\"BASH_EXECUTION_STRING\"}",
    "call    bind_variable",
    "mov     rdi, rbx",
    "mov     rbx, r15",
    "call    free",
    "jmp     0x596d2",
    "jmp     0x594a9",
    "mov     edx, 0x4",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11ff9f]  {\"() {\"}",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x59d20",
    "lea     rdi, [rel data_11f1fd]  {\"POSIX_PEDANTIC\"}",
    "call    find_variable",
    "test    rax, rax",
    "jne     0x59856",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x80",
    "jne     0x5a1fd",
    "mov     byte [r14], 0x0",
    "sub     r13d, 0xd",
    "lea     rax, [r15+0xa]",
    "mov     rdi, rbx",
    "movsxd  r13, r13d",
    "mov     qword [rbp-0xe8 {var_f0_1}], rax",
    "mov     qword [rbp-0xf8 {var_100_1}], r13",
    "call    strlen",
    "mov     qword [rbp-0x100 {var_108_1}], rax",
    "cdqe    ",
    "lea     rax, [r13+rax+0x2]",
    "mov     rdi, rax",
    "mov     qword [rbp-0xf0 {var_f8_1}], rax",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x5a7b7",
    "jmp     0x59860",
    "mov     rdi, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "call    sv_strict_posix",
    "jmp     0x59860",
    "lea     rbx, [rel remember_on_history]",
    "mov     edi, dword [rbx]  {remember_on_history}",
    "test    edi, edi",
    "je      0x598ab",
    "mov     rsi, qword [rbp-0xf0 {var_f8_1}]",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rcx, qword [rbp-0xf0 {var_f8_1}]",
    "mov     rdx, qword [rbp-0xf8 {var_100_1}]",
    "mov     rdi, r13",
    "mov     rsi, qword [rbp-0xe8 {var_f0_1}]",
    "call    __memcpy_chk",
    "mov     rax, qword [rbp-0xf8 {var_100_1}]",
    "mov     rcx, qword [rbp-0xf0 {var_f8_1}]",
    "mov     rsi, rbx",
    "mov     edx, dword [rbp-0x100 {var_108_1}]",
    "mov     byte [r13+rax], 0x20",
    "add     rax, 0x1",
    "cmp     rcx, rax",
    "lea     rdi, [r13+rax]",
    "cmovb   rcx, rax",
    "add     edx, 0x1",
    "movsxd  rdx, edx",
    "sub     rcx, rax",
    "call    __memcpy_chk",
    "mov     rdi, qword [rbp-0xe8 {var_f0_1}]",
    "mov     esi, 0x2f",
    "call    strchr",
    "test    rax, rax",
    "jne     0x5a7aa",
    "call    seedrand",
    "call    seedrand32",
    "mov     ecx, dword [r13]  {interactive_shell}",
    "test    ecx, ecx",
    "jne     0x5a13a",
    "lea     rax, [rel posixly_correct]",
    "lea     rdi, [rel data_11ff84]  {\"~/.bash_history\"}",
    "mov     esi, dword [rax]  {posixly_correct}",
    "lea     rax, [rel data_11ff76]",
    "test    esi, esi",
    "cmovne  rdi, rax  {data_11ff76, \"~/.sh_history\"}",
    "xor     esi, esi  {0x0}",
    "call    bash_tilde_expand",
    "lea     rdi, [rel data_11f075]  {\"HISTFILE\"}",
    "mov     r14, rax",
    "mov     rsi, rax",
    "call    set_if_not",
    "mov     rdi, r14",
    "call    free",
    "mov     rdi, r13",
    "call    free",
    "jmp     0x5a03d",
    "lea     rax, [rel posixly_correct]",
    "mov     eax, dword [rax]  {posixly_correct}",
    "test    eax, eax",
    "je      0x5a029",
    "lea     rdi, [rel data_120045]  {\"IGNOREEOF\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a63f",
    "mov     edi, dword [r12]  {current_user}",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0xb",
    "mov     rdx, r15 {var_68}",
    "mov     esi, 0xa",
    "lea     r13, [rel data_12006a[1]]",
    "call    fmtulong",
    "mov     rdi, r13  {data_12006a[1], \"UID\"}",
    "mov     rbx, rax",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a41d",
    "lea     rax, [rel shell_functions]",
    "mov     rdi, qword [rbp-0xe8 {var_f0_1}]",
    "xor     edx, edx  {0x0}",
    "mov     r13, qword [rax]  {shell_functions}",
    "mov     rsi, r13",
    "call    hash_search",
    "test    rax, rax",
    "je      0x5a6f9",
    "mov     rsi, qword [rbp-0xe8 {var_f0_1}]",
    "mov     edx, 0x185",
    "mov     rdi, r13",
    "call    parse_and_execute",
    "mov     rdi, qword [rbp-0xe8 {var_f0_1}]",
    "call    legal_identifier",
    "test    eax, eax",
    "je      0x5a7aa",
    "lea     rdi, [rel data_11f6c6]  {\"ignoreeof\"}",
    "call    find_variable",
    "test    rax, rax",
    "jne     0x5a14f",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x80",
    "jne     0x5a520",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx",
    "mov     rdi, r13  {data_12006a[1], \"UID\"}",
    "call    bind_variable",
    "or      dword [rax+0x28], 0x12",
    "jmp     0x598f5",
    "mov     eax, dword [r12+0x4]  {data_1584a4}",
    "cmp     eax, dword [r12]",
    "je      0x5991a  {current_user}",
    "lea     r13, [rel invalid_env]",
    "cmp     qword [r13], 0x0",
    "je      0x5a797  {invalid_env}",
    "mov     qword [rel data_1619d8], r13",
    "mov     r13, qword [rax+0x10]",
    "test    r13, r13",
    "je      0x5a6f9",
    "jmp     0x5a159",
    "mov     rdi, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "call    sv_ignoreeof",
    "jmp     0x5a159",
    "mov     edx, dword [r13]  {interactive_shell}",
    "test    edx, edx",
    "je      0x598c1",
    "lea     r12, [rel data_12006a]",
    "mov     rdi, r12  {data_12006a, \"EUID\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a407",
    "mov     edi, eax",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0xb",
    "mov     rdx, r15 {var_68}",
    "mov     esi, 0xa",
    "call    fmtulong",
    "mov     rbx, rax",
    "mov     edi, 0x40",
    "call    hash_create",
    "mov     qword [r13], rax  {invalid_env}",
    "jmp     0x5a70b",
    "mov     rdx, qword [r13]  {invalid_env}",
    "xor     r8d, r8d  {0x0}",
    "mov     ecx, 0x1",
    "mov     rsi, rbx",
    "mov     rdi, r15",
    "call    sub_55a00",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x59e64",
    "lea     rax, [rel array_needs_making]",
    "or      dword [r13+0x28], 0x8001",
    "mov     dword [rax], 0x1  {array_needs_making}",
    "mov     byte [r14], 0x25",
    "jmp     0x59d73",
    "mov     eax, dword [rbx]  {remember_on_history}",
    "test    eax, eax",
    "je      0x598c1",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx",
    "mov     rdi, r12  {data_12006a, \"EUID\"}",
    "call    bind_variable",
    "or      dword [rax+0x28], 0x12",
    "jmp     0x59932",
    "lea     rdi, [rel data_12006f]  {\"BASH_LOADABLES_PATH\"}",
    "lea     rsi, [rel data_132d10]  {\"/usr/local/lib/bash:/usr/lib/bas\u2026\"}",
    "call    set_if_not",
    "lea     rdi, [rel data_120083]  {\"BASH_XTRACEFD\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x59960",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132ce0]  {\"error importing function definit\u2026\"}",
    "xor     edi, edi  {0x0}",
    "mov     dword [rax], 0x1  {last_command_exit_value}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0xe8 {var_f0_1}]",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    report_error",
    "mov     byte [r14], 0x25",
    "nop     dword [rax]",
    "or      dword [rax+0x28], 0x9001",
    "lea     rax, [rel array_needs_making]",
    "mov     edx, 0x5",
    "xor     edi, edi  {0x0}",
    "lea     rsi, [rel data_132ce0]  {\"error importing function definit\u2026\"}",
    "mov     dword [rax], 0x1  {array_needs_making}",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rax], 0x1  {last_command_exit_value}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0xe8 {var_f0_1}]",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    report_error",
    "mov     byte [r14], 0x25",
    "jmp     0x59d73",
    "mov     rax, qword [rbp-0x88 {var_90_3}]",
    "mov     byte [rax], 0x3d",
    "test    byte [r13+0x28], 0x8",
    "jne     0x5949c",
    "lea     rdi, [rel data_12004f]  {\"HISTCONTROL\"}",
    "call    sv_history_control",
    "lea     rdi, [rel data_159820]",
    "call    setup_ignore_patterns",
    "lea     rdi, [rel data_12005b]  {\"HISTTIMEFORMAT\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a1a7",
    "lea     rdi, [rel data_120091]  {\"BASH_COMPAT\"}",
    "call    sv_shcompat",
    "lea     rdi, [rel data_12009d]  {\"FUNCNEST\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a098",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x80",
    "jne     0x5a3e5",
    "xor     edx, edx  {0x0}",
    "test    rax, rax",
    "lea     rax, [rel history_write_timestamps]",
    "setne   dl",
    "mov     dword [rax], edx  {history_write_timestamps}",
    "jmp     0x598c1",
    "lea     rdx, [rel history_comment_char]",
    "cmp     byte [rdx], 0x0",
    "jne     0x5a1a7  {history_comment_char}",
    "xor     edx, edx  {0x0}",
    "jmp     0x59999",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rbp-0x78 {var_80}]",
    "call    legal_number",
    "test    eax, eax",
    "je      0x5a098",
    "mov     rdi, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "call    sv_xtracefd",
    "jmp     0x59960",
    "mov     byte [rdx], 0x23  {history_comment_char}",
    "lea     rax, [rel funcnest_max]",
    "lea     r12, [rel data_1200d1[5]]",
    "mov     rdi, r12  {data_1200d1[5], \"SECONDS\"}",
    "mov     dword [rax], edx  {funcnest_max}",
    "call    find_variable",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x599dc",
    "mov     edx, dword [rbp-0x78 {var_80}]",
    "xor     edx, edx  {0x0}",
    "mov     rsi, rbx",
    "lea     rbx, [rel data_120104]",
    "mov     rdi, r12  {data_1200d1[5], \"SECONDS\"}",
    "call    bind_variable",
    "lea     rcx, [rel sub_510c0]",
    "xor     esi, esi  {0x0}",
    "lea     rdx, [rel sub_52110]",
    "movq    xmm6, rdx",
    "movq    xmm0, rcx",
    "xor     edx, edx  {0x0}",
    "punpcklqdq xmm0, xmm6",
    "lea     rdi, [rel data_11ffe8]  {\"BASH_ARGV0\"}",
    "movups  xmmword [rax+0x18], xmm0",
    "call    bind_variable",
    "lea     rcx, [rel sub_4f500]",
    "xor     esi, esi  {0x0}",
    "lea     rdx, [rel sub_4f710]",
    "movq    xmm7, rdx",
    "movq    xmm0, rcx",
    "xor     edx, edx  {0x0}",
    "punpcklqdq xmm0, xmm7",
    "lea     rdi, [rel data_1200a6]  {\"BASH_COMMAND\"}",
    "movups  xmmword [rax+0x18], xmm0",
    "call    bind_variable",
    "lea     rcx, [rel sub_4f5c0]",
    "xor     edx, edx  {0x0}",
    "xor     esi, esi  {0x0}",
    "mov     qword [rax+0x18], rcx  {sub_4f5c0}",
    "lea     rdi, [rel data_1200b3]  {\"BASH_SUBSHELL\"}",
    "mov     qword [rax+0x20], 0x0",
    "call    bind_variable",
    "lea     rcx, [rel sub_51210]",
    "xor     esi, esi  {0x0}",
    "lea     rdx, [rel sub_51ef0]",
    "movq    xmm6, rdx",
    "movq    xmm0, rcx",
    "xor     edx, edx  {0x0}",
    "punpcklqdq xmm0, xmm6",
    "lea     rdi, [rel data_1200c1[1]]  {\"RANDOM\"}",
    "movups  xmmword [rax+0x18], xmm0",
    "call    bind_variable",
    "lea     rcx, [rel sub_51140]",
    "xor     esi, esi  {0x0}",
    "lea     rdx, [rel sub_52020]",
    "or      dword [rax+0x28], 0x10",
    "movq    xmm7, rdx",
    "xor     edx, edx  {0x0}",
    "movq    xmm0, rcx",
    "lea     rdi, [rel data_1200c1]  {\"SRANDOM\"}",
    "punpcklqdq xmm0, xmm7",
    "movups  xmmword [rax+0x18], xmm0",
    "call    bind_variable",
    "lea     rcx, [rel sub_51180]",
    "xor     edx, edx  {0x0}",
    "xor     esi, esi  {0x0}",
    "or      dword [rax+0x28], 0x10",
    "lea     rdi, [rel data_11f306[5]]  {\"LINENO\"}",
    "mov     qword [rax+0x18], rcx  {sub_51180}",
    "mov     qword [rax+0x20], 0x0",
    "call    bind_variable",
    "lea     rcx, [rel sub_51350]",
    "xor     esi, esi  {0x0}",
    "lea     rdx, [rel sub_51f60]",
    "or      dword [rax+0x28], 0x40000",
    "movq    xmm6, rdx",
    "xor     edx, edx  {0x0}",
    "movq    xmm0, rcx",
    "lea     rdi, [rel data_1200c9]  {\"BASHPID\"}",
    "punpcklqdq xmm0, xmm6",
    "movups  xmmword [rax+0x18], xmm0",
    "call    bind_variable",
    "xor     edx, edx  {0x0}",
    "xor     esi, esi  {0x0}",
    "lea     rdi, [rel data_1200d1]  {\"EPOCHSECONDS\"}",
    "or      dword [rax+0x28], 0x10",
    "movdqa  xmm7, xmmword [rbp-0xa0 {var_a8}]",
    "movups  xmmword [rax+0x18], xmm7",
    "call    bind_variable",
    "movdqa  xmm1, xmmword [rbp-0xb0 {var_b8}]",
    "xor     edx, edx  {0x0}",
    "lea     rdi, [rel data_1200de]  {\"EPOCHREALTIME\"}",
    "or      dword [rax+0x28], 0x40000",
    "xor     esi, esi  {0x0}",
    "movups  xmmword [rax+0x18], xmm1",
    "call    bind_variable",
    "xor     edx, edx  {0x0}",
    "xor     esi, esi  {0x0}",
    "lea     rdi, [rel data_1200ec]  {\"HISTCMD\"}",
    "or      dword [rax+0x28], 0x40000",
    "movdqa  xmm2, xmmword [rbp-0xc0 {var_c8}]",
    "movups  xmmword [rax+0x18], xmm2",
    "call    bind_variable",
    "lea     rcx, [rel sub_512d0]",
    "xor     edx, edx  {0x0}",
    "xor     esi, esi  {0x0}",
    "or      dword [rax+0x28], 0x10",
    "lea     rdi, [rel data_1200f4]  {\"COMP_WORDBREAKS\"}",
    "mov     qword [rax+0x18], rcx  {sub_512d0}",
    "mov     qword [rax+0x20], 0x0",
    "call    bind_variable",
    "lea     rdx, [rel sub_4f680]",
    "lea     rcx, [rel sub_521f0]",
    "mov     rdi, rbx  {data_120104, \"DIRSTACK\"}",
    "movq    xmm0, rcx",
    "movq    xmm3, rdx",
    "punpcklqdq xmm0, xmm3",
    "movups  xmmword [rax+0x18], xmm0",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a3a3",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rel data_162e70]",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x599d8",
    "mov     rdi, rbx  {data_120104, \"DIRSTACK\"}",
    "call    make_new_array_variable",
    "lea     rdx, [rel sub_522f0]",
    "lea     rcx, [rel sub_54440]",
    "movq    xmm0, rcx",
    "movq    xmm4, rdx",
    "punpcklqdq xmm0, xmm4",
    "movups  xmmword [rax+0x18], xmm0",
    "jmp     0x59bf3",
    "lea     rbx, [rel data_12010d]",
    "mov     rdi, rbx  {data_12010d, \"GROUPS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a378",
    "mov     rbx, qword [rbx+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rel data_162e70], 0x0",
    "mov     rdi, rbx  {data_12010d, \"GROUPS\"}",
    "call    make_new_array_variable",
    "lea     rcx, [rel sub_54580]",
    "movq    xmm0, rcx",
    "or      dword [rax+0x28], 0x4000",
    "movhps  xmm0, qword [rel data_154e90]",
    "movups  xmmword [rax+0x18], xmm0",
    "jmp     0x59c0b",
    "lea     rbx, [rel data_120114]",
    "mov     rdi, rbx  {data_120114, \"BASH_ARGC\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a358",
    "mov     rdi, rbx  {data_120114, \"BASH_ARGC\"}",
    "call    make_new_array_variable",
    "movdqa  xmm5, xmmword [rbp-0xd0 {var_d8}]",
    "or      dword [rax+0x28], 0x6000",
    "movups  xmmword [rax+0x18], xmm5",
    "jmp     0x59c23",
    "lea     rbx, [rel data_12011e]",
    "mov     rdi, rbx  {data_12011e, \"BASH_ARGV\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a338",
    "mov     rdi, rbx  {data_12011e, \"BASH_ARGV\"}",
    "call    make_new_array_variable",
    "movdqa  xmm4, xmmword [rbp-0xd0 {var_d8}]",
    "or      dword [rax+0x28], 0x6000",
    "movups  xmmword [rax+0x18], xmm4",
    "jmp     0x59c3b",
    "lea     rbx, [rel data_11f2fa]",
    "mov     rdi, rbx  {data_11f2fa, \"BASH_SOURCE\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a318",
    "mov     rdi, rbx  {data_11f2fa, \"BASH_SOURCE\"}",
    "call    make_new_array_variable",
    "movdqa  xmm5, xmmword [rbp-0xe0 {var_e8}]",
    "or      dword [rax+0x28], 0x6000",
    "movups  xmmword [rax+0x18], xmm5",
    "jmp     0x59c53",
    "lea     rbx, [rel data_11f306]",
    "mov     rdi, rbx  {data_11f306, \"BASH_LINENO\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a2f8",
    "mov     rdi, rbx  {data_11f306, \"BASH_LINENO\"}",
    "call    make_new_array_variable",
    "movdqa  xmm4, xmmword [rbp-0xe0 {var_e8}]",
    "or      dword [rax+0x28], 0x6000",
    "movups  xmmword [rax+0x18], xmm4",
    "jmp     0x59c6b",
    "lea     rbx, [rel data_120128]",
    "mov     rdi, rbx  {data_120128, \"BASH_CMDS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a2a5",
    "lea     rax, [rel global_variables]",
    "mov     rdi, rbx  {data_120128, \"BASH_CMDS\"}",
    "mov     rax, qword [rax]  {global_variables}",
    "mov     rsi, qword [rax+0x20]",
    "call    sub_54b40",
    "mov     edi, 0x400",
    "mov     rbx, rax",
    "call    hash_create",
    "lea     rcx, [rel sub_54760]",
    "or      dword [rbx+0x28], 0x20040",
    "mov     qword [rbx+0x8], rax",
    "lea     rax, [rel sub_54780]",
    "movq    xmm0, rcx",
    "movq    xmm5, rax",
    "punpcklqdq xmm0, xmm5",
    "movups  xmmword [rbx+0x18], xmm0",
    "jmp     0x59c83",
    "lea     rbx, [rel data_120132]",
    "mov     rdi, rbx  {data_120132, \"BASH_ALIASES\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a252",
    "lea     rax, [rel global_variables]",
    "mov     rdi, rbx  {data_120132, \"BASH_ALIASES\"}",
    "mov     rax, qword [rax]  {global_variables}",
    "mov     rsi, qword [rax+0x20]",
    "call    sub_54b40",
    "mov     edi, 0x400",
    "mov     rbx, rax",
    "call    hash_create",
    "lea     rcx, [rel sub_549d0]",
    "or      dword [rbx+0x28], 0x20040",
    "mov     qword [rbx+0x8], rax",
    "lea     rax, [rel sub_549f0]",
    "movq    xmm0, rcx",
    "movq    xmm6, rax",
    "punpcklqdq xmm0, xmm6",
    "movups  xmmword [rbx+0x18], xmm0",
    "jmp     0x59c9b",
    "lea     rbx, [rel data_11f2f1]",
    "mov     rdi, rbx  {data_11f2f1, \"FUNCNAME\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x5a227",
    "mov     rdi, rbx  {data_11f2f1, \"FUNCNAME\"}",
    "call    make_new_array_variable",
    "lea     rcx, [rel sub_4f4a0]",
    "movq    xmm0, rcx",
    "or      dword [rax+0x28], 0x5000",
    "movhps  xmm0, qword [rel data_154e90]",
    "movups  xmmword [rax+0x18], xmm0",
    "jmp     0x59cb3",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x5a792",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}"
  ],
  "high level IL": [
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "uint128_t zmm1 = __lsan::GetUserBegin | __bid64_copy << 0x40",
    "int64_t (* zmm0)(int64_t arg1) = __sanitizer_get_estimated_allocated_size",
    "uint128_t zmm2 = sub_51390 | __bid64_copy << 0x40",
    "uint128_t zmm3 = _mm_unpacklo_epi64(zx.o(sub_4f850), zmm0)",
    "uint128_t zmm4 = _mm_unpacklo_epi64(zx.o(sub_51250), zmm0)",
    "int32_t temp0_2[0x4] = _mm_unpacklo_epi64(zx.o(sub_51290), zmm0)",
    "sub_51d30()",
    "if (arg1 != 0)",
    "char* i = *arg1",
    "void* r12_1 = &arg1[1]",
    "while (i != 0)",
    "label_59480:",
    "char* i_1 = i",
    "while (true)",
    "int32_t rax_1 = sx.d(*i_1)",
    "i_1 = &i_1[1]",
    "if (rax_1 == 0)",
    "break",
    "if (rax_1 == 0x3d)",
    "int32_t r13_3 = i_1.d - i.d",
    "if (r13_3 == 1)",
    "goto label_5949c",
    "int64_t r14_4 = sx.q(r13_3 - 1)",
    "void* rax_53 = &i[r14_4]",
    "*rax_53 = 0",
    "char rax_54 = *i",
    "char** r13_4",
    "if ((arg2 | read_but_dont_execute) != 0 || rax_54 != 0x42)",
    "int32_t r14_5",
    "if (rax_54 == 0x53)",
    "if (strcmp(i, \"SHELLOPTS\") != 0)",
    "goto label_59d20",
    "struct Elf64_Header* rax_64 = find_variable(\"SHELLOPTS\")",
    "if (rax_64 == 0)",
    "goto label_59d20",
    "int32_t rdx_13 = rax_64->section_header_offset.d",
    "rax_64->section_header_offset.d = rdx_13 & 0xfffffffd",
    "r14_5 = rdx_13 u>> 1 & 1",
    "label_59d20:",
    "r14_5 = 0",
    "if (legal_identifier(i) != 0)",
    "char** rax_56 = bind_variable(i, i_1, 0)",
    "r13_4 = rax_56",
    "if (rax_56 == 0)",
    "goto label_59ea7",
    "int32_t rax_57 = rax_56[5].d",
    "int32_t rax_58 = rax_57 | 0x8003",
    "if (r14_5 == 0)",
    "rax_58 = rax_57 | 0x8001",
    "r13_4[5].d = rax_58",
    "goto label_59d6d",
    "int64_t* invalid_env_1 = invalid_env",
    "if (invalid_env_1 == 0)",
    "int64_t* invalid_env_2 = hash_create(0x40)",
    "invalid_env = invalid_env_2",
    "invalid_env_1 = invalid_env_2",
    "char** rax_62 = sub_55a00(i, i_1, invalid_env_1, 1, 0)",
    "r13_4 = rax_62",
    "if (rax_62 == 0)",
    "goto label_59ea7",
    "rax_62[5].d |= 0x9001",
    "label_59d6d:",
    "array_needs_making = 1",
    "label_59d7a:",
    "*rax_53 = 0x3d",
    "if ((r13_4[5].b & 8) != 0)",
    "goto label_5949c",
    "uint64_t rbx_6 = strlen(i) + 1",
    "char* rax_61 = malloc(rbx_6)",
    "if (rax_61 == 0)",
    "sub_a7f00()",
    "noreturn",
    "r12_1 += 8",
    "__strcpy_chk(rax_61, i, rbx_6)",
    "r13_4[2] = rax_61",
    "i = *(r12_1 - 8)",
    "if (i != 0)",
    "goto label_59480",
    "goto label_594a9",
    "if (strncmp(\"BASH_FUNC_\", i, 0xa) != 0 || i[r14_4 - 2] != 0x25 || i[r14_4 - 1] != 0x25 || i[r14_4] != 0 || *i_1 != 0x28)",
    "goto label_59d20",
    "if (strncmp(\"() {\", i_1, 4) != 0)",
    "goto label_59d20",
    "i[r14_4 - 2] = 0",
    "uint64_t r13_6 = sx.q(r13_3 - 0xd)",
    "int32_t rax_70 = strlen(i_1)",
    "int64_t rax_73 = malloc(r13_6 + sx.q(rax_70) + 2)",
    "if (rax_73 == 0)",
    "sub_a7f00()",
    "noreturn",
    "__memcpy_chk(rax_73, &i[0xa], r13_6, r13_6 + sx.q(rax_70) + 2)",
    "uint64_t rcx_6 = r13_6 + sx.q(rax_70) + 2",
    "*(rax_73 + r13_6) = 0x20",
    "if (rcx_6 u< r13_6 + 1)",
    "rcx_6 = r13_6 + 1",
    "__memcpy_chk(rax_73 + r13_6 + 1, i_1, sx.q(rax_70 + 1), rcx_6 - (r13_6 + 1))",
    "char* rax_76 = strchr(&i[0xa], 0x2f)",
    "int32_t rax_78",
    "if (rax_76 == 0 && posixly_correct != 0)",
    "rax_78 = legal_identifier(&i[0xa])",
    "if (rax_76 != 0 || (posixly_correct != 0 && rax_78 == 0))",
    "free(rax_73)",
    "parse_and_execute(rax_73, &i[0xa], 0x185)",
    "int64_t* shell_functions_1 = shell_functions",
    "void** rax_79 = hash_search(&i[0xa], shell_functions_1, 0)",
    "if (rax_79 != 0)",
    "data_1619d8 = shell_functions_1",
    "r13_4 = rax_79[2]",
    "if (rax_79 != 0 && r13_4 != 0)",
    "r13_4[5].d |= 0x8001",
    "array_needs_making = 1",
    "i[r14_4 - 2] = 0x25",
    "goto label_59d7a",
    "if (invalid_env == 0)",
    "invalid_env = hash_create(0x40)",
    "char** rax_119 = sub_55a00(i, i_1, invalid_env, 1, 0)",
    "r13_4 = rax_119",
    "if (rax_119 != 0)",
    "rax_119[5].d |= 0x9001",
    "array_needs_making = 1",
    "last_command_exit_value = 1",
    "report_error(dcgettext(nullptr, \"error importing function definit\u2026\", 5), 0)",
    "i[r14_4 - 2] = 0x25",
    "goto label_59d7a",
    "last_command_exit_value = 1",
    "report_error(dcgettext(nullptr, \"error importing function definit\u2026\", 5), 0)",
    "i[r14_4 - 2] = 0x25",
    "label_59ea7:",
    "r12_1 += 8",
    "*rax_53 = 0x3d",
    "i = *(r12_1 - 8)",
    "if (i != 0)",
    "goto label_59480",
    "goto label_594a9",
    "label_5949c:",
    "i = *r12_1",
    "r12_1 += 8",
    "label_594a9:",
    "set_pwd()",
    "set_if_not(\"_\", dollar_vars)",
    "dollar_dollar_pid = getpid()",
    "set_if_not(\"PATH\", \"/usr/local/sbin:/usr/local/bin:/\u2026\")",
    "set_if_not(\"TERM\", \"dumb\")",
    "if (interactive_shell != 0)",
    "set_if_not(\"PS1\", primary_prompt)",
    "set_if_not(\"PS2\", secondary_prompt)",
    "if (data_1584a4 == 0)",
    "bind_variable(\"PS4\", \"+ \", 0)",
    "set_if_not(\"PS4\", \"+ \")",
    "setifs(bind_variable(\"IFS\", \" \\t\\n\", 0))",
    "set_if_not(\"HOSTTYPE\", \"x86_64\")",
    "set_if_not(\"OSTYPE\", \"linux-gnu\")",
    "set_if_not(\"MACHTYPE\", \"x86_64-pc-linux-gnu\")",
    "set_if_not(\"HOSTNAME\", current_host_name)",
    "if (interactive_shell != 0)",
    "void* const rbx_1 = &data_11ff73",
    "if (posixly_correct != 0)",
    "rbx_1 = &data_11ff6f",
    "if (shell_variables == 0)",
    "sub_51d30()",
    "char** rax_5 = find_variable(\"MAILCHECK\")",
    "if (rax_5 == 0)",
    "rax_5 = sub_55a00(\"MAILCHECK\", rbx_1, *(global_variables + 0x20), 1, 0)",
    "rax_5[5].d |= 0x10",
    "adjust_shell_level(1)",
    "set_ppid()",
    "struct Elf64_Header* rax_6 = find_variable(\"BASH_ARGV0\")",
    "if (rax_6 != 0 && (rax_6->section_header_offset:1.b & 0x80) != 0)",
    "char* rsi_23",
    "rsi_23.b = rax_6->ident.abi_version",
    "rsi_23:1.b = rax_6->ident.pad[0]",
    "rsi_23:2.b = rax_6->ident.pad[1]",
    "rsi_23:3.b = rax_6->ident.pad[2]",
    "rsi_23:4.b = rax_6->ident.pad[3]",
    "rsi_23:5.b = rax_6->ident.pad[4]",
    "rsi_23:6.b = rax_6->ident.pad[5]",
    "rsi_23:7.b = rax_6->ident.pad[6]",
    "sub_4f710(rax_6, rsi_23)",
    "void* rax_7 = bind_variable(\"OPTIND\", \"1\", 0)",
    "*(rax_7 + 0x28) |= 0x10",
    "sh_optind = 0",
    "sh_badopt = 0",
    "bind_variable(\"OPTERR\", \"1\", 0)",
    "bool cond:0 = login_shell == 1",
    "sh_opterr = 1",
    "if (cond:0 && posixly_correct == 0 && find_variable(\"HOME\") == 0)",
    "char* rsi_33 = data_1584c0",
    "if (rsi_33 == 0 && data_1584b0 == 0)",
    "sub_347e0()",
    "rsi_33 = data_1584c0",
    "bind_variable(\"HOME\", rsi_33, 0)",
    "char* rbx_2",
    "uint64_t shell_name_2",
    "if (cond:0 && (posixly_correct != 0 || login_shell == 1))",
    "shell_name_2 = shell_name",
    "if (*shell_name_2 == 0x2f)",
    "goto label_5a4c8",
    "label_5a0c5:",
    "char* r14_10 = data_1584b8",
    "if (r14_10 == 0 && data_1584b0 == 0)",
    "sub_347e0()",
    "r14_10 = data_1584b8",
    "uint64_t rbx_7 = strlen(r14_10) + 1",
    "char* rax_81 = malloc(rbx_7)",
    "if (rax_81 == 0)",
    "sub_a7f00()",
    "noreturn",
    "rbx_2 = rax_81",
    "__strcpy_chk(rax_81, r14_10, rbx_7)",
    "shell_name_2 = shell_name",
    "char rax_8 = *shell_name_2",
    "if (rax_8 == 0x2f)",
    "label_5a4c8:",
    "uint64_t r15_3 = strlen(shell_name_2) + 1",
    "char* rax_107 = malloc(r15_3)",
    "if (rax_107 == 0)",
    "sub_a7f00()",
    "noreturn",
    "rbx_2 = rax_107",
    "__strcpy_chk(rax_107, shell_name_2, r15_3)",
    "if (rax_8 != 0x2e || *(shell_name_2 + 1) != 0x2f)",
    "char* rax_9 = sub_a9b40(shell_name_2, 0x24)",
    "if (rax_9 == 0)",
    "if ((file_status(shell_name) & 2) == 0)",
    "goto label_5a0c5",
    "char* rax_102 = find_variable(\"PWD\")",
    "if (rax_102 != 0)",
    "rax_102 = get_variable_value(rax_102)",
    "rbx_2 = make_absolute(shell_name, rax_102)",
    "if (*shell_name == 0x2e)",
    "char* rax_105 = sh_canonpath(rbx_2, 3)",
    "if (rax_105 != 0)",
    "char* rdi_46 = rbx_2",
    "rbx_2 = rax_105",
    "free(rdi_46)",
    "rbx_2 = full_pathname(rax_9)",
    "free(rax_9)",
    "struct Elf64_Header* rax_110 = find_variable(\"PWD\")",
    "char* rax_111",
    "if (rax_110 != 0)",
    "rax_111 = get_variable_value(rax_110)",
    "if (rax_110 == 0 || rax_111 == 0)",
    "char* shell_name_3 = shell_name",
    "uint64_t rbx_10 = strlen(shell_name_3) + 1",
    "char* rax_116 = malloc(rbx_10)",
    "if (rax_116 == 0)",
    "sub_a7f00()",
    "noreturn",
    "rbx_2 = rax_116",
    "__strcpy_chk(rax_116, shell_name_3, rbx_10)",
    "uint64_t destlen_2 = sx.q(strlen(rax_111))",
    "char* shell_name_1 = shell_name",
    "uint64_t bytes = destlen_2 + strlen(shell_name_1) + 1",
    "int32_t var_98",
    "var_98.q = bytes",
    "char* rax_114 = malloc(bytes)",
    "rbx_2 = rax_114",
    "if (rax_114 == 0)",
    "sub_a7f00()",
    "noreturn",
    "uint64_t destlen = var_98.q",
    "__strcpy_chk(rbx_2, rax_111, destlen)",
    "uint64_t destlen_1 = destlen",
    "if (destlen_2 u>= destlen)",
    "destlen_1 = destlen_2",
    "__strcpy_chk(&rbx_2[destlen_2], &shell_name_1[1], destlen_1 - destlen_2)",
    "bind_variable(\"BASH\", rbx_2, 0)",
    "free(rbx_2)",
    "if (find_variable(\"SHELL\") == 0)",
    "char* rsi_20 = data_1584b8",
    "if (rsi_20 == 0 && data_1584b0 == 0)",
    "sub_347e0()",
    "rsi_20 = data_1584b8",
    "bind_variable(\"SHELL\", rsi_20, 0)",
    "if (data_162b40 == 0)",
    "__snprintf_chk(&data_162b40, 0x20, 2, 0x20, \"%s.%d(%d)-%s\", &data_11f14a, 0x15, 1, \"release\")",
    "bind_variable(\"BASH_VERSION\", &data_162b40, 0)",
    "unbind_variable_noref(\"BASH_VERSINFO\")",
    "char** rax_12 = make_new_array_variable(\"BASH_VERSINFO\")",
    "int64_t* rbx_3 = rax_12[1]",
    "int32_t var_68 = 0x322e35",
    "char* rax_13 = strchr(&var_68, 0x2e)",
    "void* rcx_1 = nullptr",
    "if (rax_13 != 0)",
    "*rax_13 = 0",
    "rcx_1 = &rax_13[1]",
    "array_insert(rbx_3, 0, &var_68)",
    "array_insert(rbx_3, 1, rcx_1)",
    "void var_74",
    "array_insert(rbx_3, 2, fmtulong(0x15, 0xa, &var_74, 0xc, 0))",
    "array_insert(rbx_3, 3, fmtulong(1, 0xa, &var_74, 0xc, 0))",
    "array_insert(rbx_3, 4, \"release\")",
    "array_insert(rbx_3, 5, \"x86_64-pc-linux-gnu\")",
    "rax_12[5].d |= 2",
    "uint64_t command_execution_string_1 = command_execution_string",
    "if (command_execution_string_1 != 0)",
    "bind_variable(\"BASH_EXECUTION_STRING\", command_execution_string_1, 0)",
    "struct Elf64_Header* rax_16 = find_variable(\"POSIXLY_CORRECT\")",
    "if (rax_16 == 0)",
    "rax_16 = find_variable(\"POSIX_PEDANTIC\")",
    "if (rax_16 != 0)",
    "goto label_59856",
    "label_59856:",
    "if ((rax_16->section_header_offset:1.b & 0x80) != 0)",
    "char* rdi_39",
    "rdi_39.b = rax_16->ident.signature[0]",
    "rdi_39:1.b = rax_16->ident.signature[1]",
    "rdi_39:2.b = rax_16->ident.signature[2]",
    "rdi_39:3.b = rax_16->ident.signature[3]",
    "rdi_39:4.b = rax_16->ident.file_class",
    "rdi_39:5.b = rax_16->ident.encoding",
    "rdi_39:6.b = rax_16->ident.version",
    "rdi_39:7.b = rax_16->ident.os",
    "sv_strict_posix(rdi_39)",
    "if (remember_on_history != 0)",
    "char const* const rdi_13 = \"~/.bash_history\"",
    "if (posixly_correct != 0)",
    "rdi_13 = \"~/.sh_history\"",
    "char* rax_17 = bash_tilde_expand(rdi_13, 0)",
    "set_if_not(\"HISTFILE\", rax_17)",
    "free(rax_17)",
    "seedrand()",
    "seedrand32()",
    "if (interactive_shell != 0)",
    "struct Elf64_Header* rax_82 = find_variable(\"IGNOREEOF\")",
    "if (rax_82 == 0)",
    "rax_82 = find_variable(\"ignoreeof\")",
    "if (rax_82 != 0)",
    "goto label_5a14f",
    "label_5a14f:",
    "if ((rax_82->section_header_offset:1.b & 0x80) != 0)",
    "char* rdi_50",
    "rdi_50.b = rax_82->ident.signature[0]",
    "rdi_50:1.b = rax_82->ident.signature[1]",
    "rdi_50:2.b = rax_82->ident.signature[2]",
    "rdi_50:3.b = rax_82->ident.signature[3]",
    "rdi_50:4.b = rax_82->ident.file_class",
    "rdi_50:5.b = rax_82->ident.encoding",
    "rdi_50:6.b = rax_82->ident.version",
    "rdi_50:7.b = rax_82->ident.os",
    "sv_ignoreeof(rdi_50)",
    "if (interactive_shell != 0 && remember_on_history != 0)",
    "sv_history_control()",
    "setup_ignore_patterns(&data_159820)",
    "struct Elf64_Header* rax_84 = find_variable(\"HISTTIMEFORMAT\")",
    "if (rax_84 != 0 && history_comment_char == 0)",
    "history_comment_char = 0x23",
    "uint32_t rdx_21",
    "rdx_21.b = rax_84 != 0",
    "history_write_timestamps = rdx_21",
    "char* rbx_4 = fmtulong(zx.q(current_user), 0xa, &var_68, 0xb, 0)",
    "if (find_variable(\"UID\") == 0)",
    "void* rax_100 = bind_variable(\"UID\", rbx_4, 0)",
    "*(rax_100 + 0x28) |= 0x12",
    "int32_t rax_20 = data_1584a4",
    "if (rax_20 != current_user)",
    "rbx_4 = fmtulong(zx.q(rax_20), 0xa, &var_68, 0xb, 0)",
    "if (find_variable(\"EUID\") == 0)",
    "void* rax_99 = bind_variable(\"EUID\", rbx_4, 0)",
    "*(rax_99 + 0x28) |= 0x12",
    "set_if_not(\"BASH_LOADABLES_PATH\", \"/usr/local/lib/bash:/usr/lib/bas\u2026\")",
    "struct Elf64_Header* rax_23 = find_variable(\"BASH_XTRACEFD\")",
    "if (rax_23 != 0 && (rax_23->section_header_offset:1.b & 0x80) != 0)",
    "char* rdi_40",
    "rdi_40.b = rax_23->ident.signature[0]",
    "rdi_40:1.b = rax_23->ident.signature[1]",
    "rdi_40:2.b = rax_23->ident.signature[2]",
    "rdi_40:3.b = rax_23->ident.signature[3]",
    "rdi_40:4.b = rax_23->ident.file_class",
    "rdi_40:5.b = rax_23->ident.encoding",
    "rdi_40:6.b = rax_23->ident.version",
    "rdi_40:7.b = rax_23->ident.os",
    "sv_xtracefd(rdi_40)",
    "sv_shcompat(\"BASH_COMPAT\")",
    "struct Elf64_Header* rax_24 = find_variable(\"FUNCNEST\")",
    "uint32_t var_80",
    "int32_t rax_25",
    "if (rax_24 != 0)",
    "char* rdi_17",
    "rdi_17.b = rax_24->ident.abi_version",
    "rdi_17:1.b = rax_24->ident.pad[0]",
    "rdi_17:2.b = rax_24->ident.pad[1]",
    "rdi_17:3.b = rax_24->ident.pad[2]",
    "rdi_17:4.b = rax_24->ident.pad[3]",
    "rdi_17:5.b = rax_24->ident.pad[4]",
    "rdi_17:6.b = rax_24->ident.pad[5]",
    "rdi_17:7.b = rax_24->ident.pad[6]",
    "rax_25 = legal_number(rdi_17, &var_80)",
    "uint32_t rdx_9",
    "if (rax_24 == 0 || rax_25 == 0)",
    "rdx_9 = 0",
    "rdx_9 = var_80",
    "funcnest_max = rdx_9",
    "struct Elf64_Header* rax_26 = find_variable(\"SECONDS\")",
    "struct Elf64_Header* rbx_5 = rax_26",
    "if (rax_26 != 0)",
    "char* rdi_18",
    "rdi_18.b = rax_26->ident.abi_version",
    "rdi_18:1.b = rax_26->ident.pad[0]",
    "rdi_18:2.b = rax_26->ident.pad[1]",
    "rdi_18:3.b = rax_26->ident.pad[2]",
    "rdi_18:4.b = rax_26->ident.pad[3]",
    "rdi_18:5.b = rax_26->ident.pad[4]",
    "rdi_18:6.b = rax_26->ident.pad[5]",
    "rdi_18:7.b = rax_26->ident.pad[6]",
    "if (legal_number(rdi_18, &data_162e70) == 0)",
    "data_162e70 = 0",
    "rbx_5.b = rbx_5->ident.abi_version",
    "rbx_5:1.b = rbx_5->ident.pad[0]",
    "rbx_5:2.b = rbx_5->ident.pad[1]",
    "rbx_5:3.b = rbx_5->ident.pad[2]",
    "rbx_5:4.b = rbx_5->ident.pad[3]",
    "rbx_5:5.b = rbx_5->ident.pad[4]",
    "rbx_5:6.b = rbx_5->ident.pad[5]",
    "rbx_5:7.b = rbx_5->ident.pad[6]",
    "void* rax_28 = bind_variable(\"SECONDS\", rbx_5, 0)",
    "*(rax_28 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_510c0), sub_52110)",
    "void* rax_29 = bind_variable(\"BASH_ARGV0\", nullptr, 0)",
    "*(rax_29 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_4f500), sub_4f710)",
    "void* rax_30 = bind_variable(\"BASH_COMMAND\", nullptr, 0)",
    "*(rax_30 + 0x18) = sub_4f5c0",
    "*(rax_30 + 0x20) = 0",
    "void* rax_31 = bind_variable(\"BASH_SUBSHELL\", nullptr, 0)",
    "*(rax_31 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_51210), sub_51ef0)",
    "void* rax_32 = bind_variable(\"RANDOM\", nullptr, 0)",
    "*(rax_32 + 0x28) |= 0x10",
    "*(rax_32 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_51140), sub_52020)",
    "void* rax_33 = bind_variable(\"SRANDOM\", nullptr, 0)",
    "*(rax_33 + 0x28) |= 0x10",
    "*(rax_33 + 0x18) = sub_51180",
    "*(rax_33 + 0x20) = 0",
    "void* rax_34 = bind_variable(\"LINENO\", nullptr, 0)",
    "*(rax_34 + 0x28) |= 0x40000",
    "*(rax_34 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_51350), sub_51f60)",
    "void* rax_35 = bind_variable(\"BASHPID\", nullptr, 0)",
    "*(rax_35 + 0x28) |= 0x10",
    "*(rax_35 + 0x18) = temp0_2",
    "void* rax_36 = bind_variable(\"EPOCHSECONDS\", nullptr, 0)",
    "*(rax_36 + 0x28) |= 0x40000",
    "*(rax_36 + 0x18) = zmm4",
    "void* rax_37 = bind_variable(\"EPOCHREALTIME\", nullptr, 0)",
    "*(rax_37 + 0x28) |= 0x40000",
    "*(rax_37 + 0x18) = zmm3",
    "void* rax_38 = bind_variable(\"HISTCMD\", nullptr, 0)",
    "*(rax_38 + 0x28) |= 0x10",
    "*(rax_38 + 0x18) = sub_512d0",
    "*(rax_38 + 0x20) = 0",
    "void* rax_39 = bind_variable(\"COMP_WORDBREAKS\", nullptr, 0)",
    "*(rax_39 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_521f0), sub_4f680)",
    "if (find_variable(\"DIRSTACK\") == 0)",
    "char** rax_98 = make_new_array_variable(\"DIRSTACK\")",
    "*(rax_98 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_54440), sub_522f0)",
    "if (find_variable(\"GROUPS\") == 0)",
    "char** rax_97 = make_new_array_variable(\"GROUPS\")",
    "rax_97[5].d |= 0x4000",
    "*(rax_97 + 0x18) = sub_54580 | __bid64_copy << 0x40",
    "if (find_variable(\"BASH_ARGC\") == 0)",
    "char** rax_96 = make_new_array_variable(\"BASH_ARGC\")",
    "rax_96[5].d |= 0x6000",
    "*(rax_96 + 0x18) = zmm2",
    "if (find_variable(\"BASH_ARGV\") == 0)",
    "char** rax_95 = make_new_array_variable(\"BASH_ARGV\")",
    "rax_95[5].d |= 0x6000",
    "*(rax_95 + 0x18) = zmm2",
    "if (find_variable(\"BASH_SOURCE\") == 0)",
    "char** rax_94 = make_new_array_variable(\"BASH_SOURCE\")",
    "rax_94[5].d |= 0x6000",
    "*(rax_94 + 0x18) = zmm1",
    "if (find_variable(\"BASH_LINENO\") == 0)",
    "char** rax_93 = make_new_array_variable(\"BASH_LINENO\")",
    "rax_93[5].d |= 0x6000",
    "*(rax_93 + 0x18) = zmm1",
    "if (find_variable(\"BASH_CMDS\") == 0)",
    "char** rax_91 = sub_54b40(\"BASH_CMDS\", *(global_variables + 0x20))",
    "int64_t* rax_92 = hash_create(0x400)",
    "rax_91[5].d |= 0x20040",
    "rax_91[1] = rax_92",
    "*(rax_91 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_54760), sub_54780)",
    "if (find_variable(\"BASH_ALIASES\") == 0)",
    "char** rax_88 = sub_54b40(\"BASH_ALIASES\", *(global_variables + 0x20))",
    "int64_t* rax_89 = hash_create(0x400)",
    "rax_88[5].d |= 0x20040",
    "rax_88[1] = rax_89",
    "*(rax_88 + 0x18) = _mm_unpacklo_epi64(zx.o(sub_549d0), sub_549f0)",
    "if (find_variable(\"FUNCNAME\") == 0)",
    "char** rax_86 = make_new_array_variable(\"FUNCNAME\")",
    "rax_86[5].d |= 0x5000",
    "*(rax_86 + 0x18) = sub_4f4a0 | __bid64_copy << 0x40",
    "if (rax == *(fsbase + 0x28))",
    "return rax - *(fsbase + 0x28)",
    "__stack_chk_fail()",
    "noreturn"
  ]
}