{
  "address": "0x7ce90",
  "rules": [
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/4f0637c1ae9b445ca3ec93a4b4e0bb6d",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/bee29d5f30484915bb6e92fdf1038d2c",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/9710d9ee76a4466b954966f2a98c40ba",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/85d53756af1244948e9b515ea3abe5ce",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/af1fc90a7adf4a2ea648cfac1c599984",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "hash data using aphash/2602c80a9b3846b9ae92e2e83b13e866",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x98",
    "mov     qword [rbp-0x78], rsi",
    "mov     dword [rbp-0xac], ecx",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "test    rdi, rdi",
    "je      0x7d526",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7d8c9",
    "mov     r13, rdi",
    "mov     edi, dword [rbp-0xac]",
    "mov     r12, rdx",
    "mov     eax, edi",
    "and     edi, 0x100",
    "mov     dword [rbp-0x70], edi",
    "mov     rdi, qword [rbp-0x78]",
    "and     eax, 0x3",
    "mov     dword [rbp-0x6c], eax",
    "test    rdi, rdi",
    "je      0x7d0c0",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rbx], 0x0",
    "mov     qword [rbp-0x60], rbx",
    "jmp     0x7cfda",
    "mov     eax, dword [rbp-0x6c]",
    "sub     eax, 0x1",
    "cmp     eax, 0x1",
    "ja      0x7cf11",
    "cmp     byte [rdi], 0x0",
    "jne     0x7d008",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7d860",
    "mov     edi, 0x40",
    "call    malloc",
    "mov     qword [rbp-0x60], rax",
    "test    rax, rax",
    "je      0x7d865",
    "jmp     0x7d3e3",
    "cmp     byte [r13], 0x0",
    "jne     0x7cf11",
    "sub     eax, 0x1",
    "cmp     eax, 0x1",
    "jbe     0x7d3e3",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x60]",
    "add     rsp, 0x98",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     esi, 0x40",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x60]",
    "mov     rdi, r13",
    "mov     byte [rax], 0x0",
    "call    strlen",
    "xor     r9d, r9d",
    "add     rax, r13",
    "mov     qword [rbp-0xb8], rax",
    "test    r12, r12",
    "je      0x7cf68",
    "mov     r8d, dword [rbp-0x70]",
    "mov     rbx, r12",
    "test    r8d, r8d",
    "jne     0x7d5e8",
    "mov     edx, dword [rbp-0x6c]",
    "mov     rsi, qword [rbp-0x78]",
    "lea     rcx, [rbp-0x48]",
    "lea     r8, [rbp-0x50]",
    "mov     rdi, r13",
    "call    sub_8bb30",
    "test    eax, eax",
    "je      0x7cf11",
    "lea     rax, [rbp-0x48]",
    "mov     qword [rbp-0x58], r12",
    "xor     esi, esi",
    "mov     ebx, 0x40",
    "mov     qword [rbp-0x98], rax",
    "mov     r8d, esi",
    "cmp     byte [r12], 0x0",
    "je      0x7cf68",
    "mov     ecx, 0x2",
    "lea     rdx, [rel data_122e02]",
    "mov     esi, 0x26",
    "mov     rdi, r12",
    "call    strcreplace",
    "mov     rbx, rax",
    "jmp     0x7d3f3",
    "test    rbx, rbx",
    "je      0x7d548",
    "mov     edi, dword [rbp-0x70]",
    "test    edi, edi",
    "jne     0x7d6ea",
    "mov     esi, r8d",
    "jmp     0x7d515",
    "cmp     qword [rbp-0x78], 0x0",
    "jne     0x7d0d8",
    "cmp     byte [r12+0x1], 0x0",
    "mov     r9d, 0x1",
    "jne     0x7d42e",
    "mov     qword [rbp-0x58], 0x0",
    "mov     r14d, 0x2",
    "cmp     byte [rbx], 0x0",
    "je      0x7d548",
    "mov     ecx, 0x2",
    "lea     rdx, [rel data_122e02]",
    "mov     esi, 0x26",
    "mov     rdi, r12",
    "call    strcreplace",
    "mov     qword [rbp-0x60], rax",
    "jmp     0x7cfda",
    "test    r12, r12",
    "je      0x7d526",
    "mov     rax, qword [rbp-0x60]",
    "movsxd  r15, esi",
    "mov     byte [rax+r15], 0x0",
    "jmp     0x7cfda",
    "lea     rax, [rbp-0x50]",
    "mov     qword [rbp-0x68], r9",
    "mov     r14d, r8d",
    "mov     r15, r13",
    "mov     qword [rbp-0xa8], rax",
    "mov     eax, dword [rbp-0xac]",
    "shr     eax, 0x4",
    "xor     eax, 0x1",
    "and     eax, 0x1",
    "mov     byte [rbp-0x88], al",
    "jmp     0x7d1c4",
    "movsxd  r15, r8d",
    "cmp     byte [r12+0x2], 0x0",
    "mov     r9d, 0x2",
    "je      0x7cf68",
    "nop     word [rax+rax]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     qword [rbp-0x60], rax",
    "test    rax, rax",
    "je      0x7d87b",
    "cmp     byte [r13+0x1], 0x0",
    "je      0x7d675",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x7d684",
    "mov     rdi, r12",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x7d84a",
    "mov     rax, qword [rbp-0x78]",
    "cmp     byte [rax], 0x0",
    "jne     0x7d110",
    "mov     rax, qword [rbp-0x60]",
    "mov     byte [rax+r15], 0x0",
    "jmp     0x7cfda",
    "mov     rax, qword [rbp-0xb8]",
    "sub     rax, r13",
    "lea     rax, [r15+rax+0x1]",
    "cmp     rax, rbx",
    "jae     0x7d450",
    "mov     rdi, r12",
    "call    strlen",
    "mov     r9, rax",
    "jmp     0x7cf68",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "cmp     qword [rbp-0x58], 0x0",
    "mov     rdx, r14",
    "je      0x7d609",
    "add     r14, 0x1",
    "mov     r15d, 0x1",
    "jmp     0x7d580",
    "cmp     byte [r13+0x2], 0x0",
    "jne     0x7d7c5",
    "mov     qword [rbp-0x58], 0x1",
    "mov     r14d, 0x3",
    "jmp     0x7d556",
    "cmp     byte [rbx+0x2], 0x0",
    "je      0x7d7e0",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7d860",
    "mov     r8, qword [rbp-0xa8]",
    "mov     rcx, qword [rbp-0x98]",
    "mov     rdi, r15",
    "mov     edx, dword [rbp-0x6c]",
    "mov     rsi, qword [rbp-0x78]",
    "call    sub_8bb30",
    "test    eax, eax",
    "je      0x7d1d1",
    "mov     r13, r15",
    "movsxd  r15, r14d",
    "jmp     0x7cf9a",
    "mov     rdx, rax",
    "sub     rdx, rbx",
    "add     rbx, 0x40",
    "shr     rdx, 0x6",
    "and     edx, 0x1",
    "cmp     rax, rbx",
    "jb      0x7d481",
    "cmp     r15, rbx",
    "mov     rax, qword [rbp-0x60]",
    "mov     rsi, r13",
    "cmovae  rbx, r15",
    "lea     rdi, [rax+r15]",
    "mov     rdx, rbx",
    "sub     rdx, r15",
    "call    __strcpy_chk",
    "mov     rdi, qword [rbp-0x60]",
    "mov     rsi, r13",
    "call    __strcpy_chk",
    "jmp     0x7d5d2",
    "cmp     dword [rbp-0x6c], 0x1",
    "je      0x7d783",
    "mov     rdi, r13",
    "call    strlen",
    "mov     r15, rax",
    "add     r14, rax",
    "jmp     0x7d580",
    "add     r14, 0x2",
    "mov     r15d, 0x2",
    "xor     r15d, r15d",
    "cmp     byte [r13], 0x0",
    "je      0x7d580",
    "mov     qword [rbp-0x58], 0x2",
    "mov     r14d, 0x4",
    "jmp     0x7d556",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     qword [rbp-0x58], rax",
    "lea     r14, [rax+0x2]",
    "jmp     0x7d556",
    "add     rsp, 0x98",
    "mov     rdx, rbx",
    "mov     rsi, r12",
    "mov     rdi, r13",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     __strcpy_chk",
    "mov     r12, qword [rbp-0x48]",
    "mov     r10, r12",
    "sub     r10, r15",
    "cmp     qword [rbp-0x58], 0x0",
    "je      0x7d151",
    "cmp     byte [r13], 0x0",
    "je      0x7d0af",
    "mov     rdi, qword [rbp-0x60]",
    "test    rdi, rdi",
    "je      0x7d7b4",
    "test    rdx, rdx",
    "je      0x7d478",
    "cmp     rbx, r12",
    "je      0x7cfda",
    "mov     r15, qword [rbp-0x60]",
    "mov     rsi, rbx",
    "mov     rdi, r15",
    "call    __strcpy_chk",
    "mov     rax, qword [rbp-0x58]",
    "mov     rdx, r14",
    "mov     rsi, r13",
    "cmp     rax, r14",
    "lea     rdi, [r15+rax]",
    "cmovae  rdx, rax",
    "sub     rdx, rax",
    "call    __strcpy_chk",
    "jmp     0x7d5d2",
    "mov     rsi, r13",
    "mov     r13, qword [rbp-0x60]",
    "mov     rdi, r13",
    "call    __strcpy_chk",
    "cmp     r15, r14",
    "mov     rdx, r14",
    "lea     rdi, [r13+r15]",
    "cmovae  rdx, r15",
    "mov     rsi, rbx",
    "sub     rdx, r15",
    "call    __strcpy_chk",
    "mov     r11, qword [rbp-0x68]",
    "mov     r13, qword [rbp-0x58]",
    "mov     esi, dword [rbp-0x70]",
    "test    esi, esi",
    "jne     0x7d318",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     qword [rbp-0x60], rax",
    "jmp     0x7d49a",
    "mov     rsi, rbx",
    "call    realloc",
    "mov     qword [rbp-0x60], rax",
    "sub     rbx, 0xffffffffffffff80",
    "cmp     rax, rbx",
    "jae     0x7d478",
    "add     rbx, 0x40",
    "cmp     rax, rbx",
    "jb      0x7d481",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x7cfda",
    "mov     rcx, rax",
    "sub     rcx, rbx",
    "add     rbx, 0x40",
    "shr     rcx, 0x6",
    "and     ecx, 0x1",
    "cmp     rax, rbx",
    "jb      0x7d291",
    "test    r10, r10",
    "jne     0x7d218",
    "mov     rcx, qword [rbp-0x50]",
    "mov     qword [rbp-0x90], r10",
    "sub     rcx, r12",
    "lea     r13d, [rcx+0x1]",
    "mov     qword [rbp-0x80], rcx",
    "movsxd  r13, r13d",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rcx, qword [rbp-0x80]",
    "mov     r10, qword [rbp-0x90]",
    "test    rax, rax",
    "mov     rdx, rax",
    "je      0x7d88f",
    "cmp     qword [rbp-0x60], 0x0",
    "jne     0x7cfbd",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "nop     dword [rax]",
    "mov     rdi, qword [rbp-0x60]",
    "mov     qword [rbp-0xa0], rdx",
    "mov     qword [rbp-0x90], r11",
    "mov     qword [rbp-0x80], r10",
    "test    rdi, rdi",
    "je      0x7d3c0",
    "test    rcx, rcx",
    "je      0x7d288",
    "cmp     rdx, rbx",
    "mov     rcx, rbx",
    "mov     rax, qword [rbp-0x60]",
    "mov     rsi, r15",
    "cmovae  rcx, rdx",
    "mov     qword [rbp-0x90], r11",
    "lea     rdi, [rax+rdx]",
    "mov     qword [rbp-0x80], r10",
    "sub     rcx, rdx",
    "mov     rdx, r10",
    "call    __strncpy_chk",
    "mov     r10, qword [rbp-0x80]",
    "mov     r11, qword [rbp-0x90]",
    "add     r14d, r10d",
    "movsxd  rdx, r14d",
    "jmp     0x7d175",
    "cmp     qword [rbp-0x68], 0x0",
    "jne     0x7d1e0",
    "mov     rsi, r13",
    "mov     qword [rbp-0xa0], rax",
    "xor     eax, eax",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     qword [rbp-0x90], rcx",
    "mov     qword [rbp-0x80], r10",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     edi, [rcx-0x1]",
    "xor     eax, eax",
    "test    ecx, ecx",
    "jle     0x7d375",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rdx, qword [rbp-0xa0]",
    "mov     r11, qword [rbp-0x90]",
    "mov     qword [rbp-0x60], rax",
    "mov     r10, qword [rbp-0x80]",
    "jmp     0x7d2ce",
    "mov     rsi, rbx",
    "call    realloc",
    "mov     r10, qword [rbp-0x80]",
    "mov     r11, qword [rbp-0x90]",
    "mov     qword [rbp-0x60], rax",
    "mov     rdx, qword [rbp-0xa0]",
    "sub     rbx, 0xffffffffffffff80",
    "cmp     rax, rbx",
    "jae     0x7d288",
    "add     rbx, 0x40",
    "cmp     rax, rbx",
    "jb      0x7d291",
    "cmp     rbx, rdx",
    "mov     rcx, rdx",
    "mov     rax, qword [rbp-0x60]",
    "mov     rsi, r13",
    "cmovae  rcx, rbx",
    "mov     qword [rbp-0x80], r11",
    "lea     rdi, [rax+rdx]",
    "sub     rcx, rdx",
    "mov     rdx, r11",
    "call    __strncpy_chk",
    "mov     r11, qword [rbp-0x80]",
    "add     r14d, r11d",
    "movsxd  rdx, r14d",
    "jmp     0x7d17c",
    "mov     rax, qword [rbp-0x58]",
    "mov     r15, qword [rbp-0x50]",
    "cmp     r13, rax",
    "je      0x7d199",
    "movsxd  rcx, ecx",
    "mov     rdi, qword [rbp-0x58]",
    "mov     esi, 0x26",
    "mov     qword [rbp-0x80], rdx",
    "mov     byte [rdx+rcx], 0x0",
    "mov     ecx, 0x2",
    "mov     qword [rbp-0x90], r10",
    "call    strcreplace",
    "mov     rdi, qword [rbp-0x80]",
    "mov     r13, rax",
    "call    free",
    "mov     rdi, r13",
    "call    strlen",
    "mov     r10, qword [rbp-0x90]",
    "mov     r11, rax",
    "jmp     0x7d159",
    "nop     dword [rax]",
    "cmp     qword [rbp-0x60], 0x0",
    "jne     0x7d16c",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x80], r10",
    "mov     qword [rbp-0xa0], rdx",
    "mov     qword [rbp-0x90], r11",
    "call    sub_a7f00",
    "{ Does not return }",
    "nop     dword [rax]",
    "cmp     byte [rbp-0x88], 0x0",
    "jne     0x7d0a0",
    "mov     rdi, r13",
    "mov     qword [rbp-0x80], rdx",
    "call    free",
    "mov     rdx, qword [rbp-0x80]",
    "movsxd  rdx, r14d",
    "lea     rax, [rdx+r10]",
    "add     rax, r11",
    "cmp     rax, rbx",
    "jae     0x7d260",
    "movzx   esi, byte [r12+rax]",
    "mov     byte [rdx+rax], sil",
    "mov     rsi, rax",
    "add     rax, 0x1",
    "cmp     rsi, rdi",
    "jne     0x7d360",
    "mov     r13, r15",
    "mov     r15, rdx",
    "test    r13, r13",
    "jne     0x7cf9a",
    "mov     ecx, dword [rbp-0x6c]",
    "test    ecx, ecx",
    "jne     0x7d0a0",
    "cmp     r12, r15",
    "je      0x7d4c0",
    "mov     r8d, r14d",
    "lea     r14, [rel locale_mb_cur_max]",
    "mov     r9, qword [rbp-0x68]",
    "mov     r13, r15",
    "mov     esi, dword [r14]",
    "lea     eax, [rsi+r8]",
    "cdqe    ",
    "cmp     rax, rbx",
    "jae     0x7d70c",
    "cmp     byte [r15], 0x0",
    "je      0x7d512",
    "mov     rcx, rax",
    "sub     rcx, rbx",
    "add     rbx, 0x40",
    "shr     rcx, 0x6",
    "and     ecx, 0x1",
    "cmp     rax, rbx",
    "jb      0x7d739",
    "mov     rax, qword [rbp-0x60]",
    "movzx   ecx, byte [r13]",
    "lea     r12, [rax+rdx]",
    "cmp     esi, 0x1",
    "jg      0x7d617",
    "mov     esi, r14d",
    "mov     rdi, qword [rbp-0x60]",
    "mov     qword [rbp-0x88], rdx",
    "mov     qword [rbp-0x80], r9",
    "mov     dword [rbp-0x68], r8d",
    "test    rdi, rdi",
    "je      0x7d7f3",
    "test    rcx, rcx",
    "je      0x7d730",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "jne     0x7d6d4",
    "mov     byte [r12], cl",
    "add     r13, 0x1",
    "mov     edx, 0x1",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x88]",
    "mov     r9, qword [rbp-0x80]",
    "mov     qword [rbp-0x60], rax",
    "mov     r8d, dword [rbp-0x68]",
    "jmp     0x7d770",
    "mov     rsi, rbx",
    "call    realloc",
    "mov     r8d, dword [rbp-0x68]",
    "mov     r9, qword [rbp-0x80]",
    "mov     qword [rbp-0x60], rax",
    "mov     rdx, qword [rbp-0x88]",
    "sub     rbx, 0xffffffffffffff80",
    "cmp     rax, rbx",
    "jae     0x7d730",
    "add     rbx, 0x40",
    "cmp     rax, rbx",
    "jb      0x7d739",
    "movzx   eax, byte [r13]",
    "mov     edx, 0x1",
    "mov     byte [r12], al",
    "lea     rax, [rel locale_utf8locale]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x7d697",
    "cmp     byte [r13], 0x0",
    "je      0x7d7d8",
    "cmp     qword [rbp-0x60], 0x0",
    "je      0x7d813",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x80], r9",
    "mov     qword [rbp-0x88], rdx",
    "mov     dword [rbp-0x68], r8d",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     esi, dword [r14]",
    "jmp     0x7d4e3",
    "mov     qword [rbp-0x50], r13",
    "add     r8d, edx",
    "jmp     0x7cf81",
    "mov     rdx, qword [rbp-0xb8]",
    "xor     edi, edi",
    "lea     rcx, [rbp-0x40]",
    "mov     rsi, r13",
    "mov     qword [rbp-0x80], r9",
    "mov     r14, qword [rbp-0x40]",
    "sub     rdx, r13",
    "mov     dword [rbp-0x68], r8d",
    "call    mbrtowc",
    "mov     r8d, dword [rbp-0x68]",
    "mov     r9, qword [rbp-0x80]",
    "cmp     rax, 0xfffffffffffffffd",
    "mov     rdx, rax",
    "jbe     0x7d64a",
    "test    cl, cl",
    "js      0x7d697",
    "test    rdx, rdx",
    "mov     eax, 0x1",
    "cmove   rdx, rax",
    "xor     eax, eax",
    "nop     dword [rax+rax]",
    "mov     qword [rbp-0x40], r14",
    "setne   dl",
    "movzx   edx, dl",
    "movzx   ecx, byte [r13+rax]",
    "mov     byte [r12+rax], cl",
    "add     rax, 0x1",
    "cmp     rax, rdx",
    "jne     0x7d660",
    "jmp     0x7d6e2",
    "add     r13, rdx",
    "jmp     0x7d506"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}