{
  "address": "0x62f60",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "hash data using djb2/9bc6b91561f04ebca409510ba6653174",
    "hash data using jshash/495bfd597bd14a45826758e92f604bf6",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "encrypt data using RC4 KSA/c5d66f4fda884d55848eab5cc630b98c",
    "hide graphical window from taskbar/3804d9f76e4f47c8b3a7ed608bc3a556",
    "search for credit card data/6acc81a026f04eebb934cf95ebf5d6c3",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "parse credit card information/3375d6c43054451cb36d19c4d5da62ae"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x78",
    "mov     r14, qword [rel data_167f88]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    r14, r14",
    "jne     0x62fa0",
    "movzx   ebx, byte [r14]",
    "mov     r13d, ebx",
    "test    bl, bl",
    "jne     0x62f90",
    "jmp     0x62fab",
    "lea     eax, [rbx-0x9]",
    "cmp     al, 0x1",
    "jbe     0x62f9c",
    "mov     ecx, dword [rel data_167f80]",
    "mov     r15, r14",
    "xor     r13d, r13d",
    "add     r14, 0x1",
    "cmp     bl, 0x20",
    "jne     0x62ff0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x78",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     qword [rel data_167f88], r14",
    "lea     r12, [r14+0x1]",
    "mov     qword [rel data_167f68], r14",
    "call    __ctype_b_loc",
    "mov     rdx, qword [rax]",
    "mov     rdi, rax",
    "movzx   eax, bl",
    "movzx   eax, word [rdx+rax*2]",
    "test    ah, 0x4",
    "jne     0x63150",
    "test    al, 0x8",
    "jne     0x63160",
    "cmp     bl, 0x5f",
    "je      0x63160",
    "mov     r15, r12",
    "movzx   eax, byte [r12]",
    "add     r12, 0x1",
    "mov     r13, rax",
    "mov     ebx, eax",
    "test    byte [rdx+rax*2], 0x8",
    "jne     0x63160",
    "cmp     bl, 0x5f",
    "jne     0x6386f",
    "lea     ecx, [rbx-0x30]",
    "cmp     cl, 0x9",
    "ja      0x634f0",
    "cmp     al, 0x5f",
    "je      0x63160",
    "mov     r15, r14",
    "jmp     0x6317b",
    "nop     dword [rax]",
    "movzx   eax, byte [r14+0x1]",
    "mov     ecx, dword [rel data_167f80]",
    "lea     r15, [r14+0x2]",
    "cmp     al, 0x3d",
    "sete    sil",
    "cmp     bl, 0x3d",
    "jne     0x63519",
    "mov     rcx, 0x1000000020000001",
    "mov     rsi, r12",
    "jmp     0x6305c",
    "mov     dword [rbp-0x9c], 0x0",
    "cmp     bl, 0x5b",
    "je      0x6372b",
    "cmp     bl, 0x21",
    "jne     0x6352d",
    "mov     r13d, 0x1",
    "test    sil, sil",
    "jne     0x62fb7",
    "test    al, 0x8",
    "jne     0x6304e",
    "lea     rbx, [rel assoc_expand_once]",
    "mov     eax, dword [rbx]",
    "and     eax, dword [rel data_168068]",
    "jne     0x63852",
    "mov     byte [r15], 0x0",
    "mov     rax, qword [rel data_1598e0]",
    "mov     rdi, qword [rel data_167f98]",
    "test    rax, rax",
    "je      0x631ae",
    "cmp     bl, 0x3e",
    "sete    dil",
    "test    sil, sil",
    "je      0x63548",
    "mov     r13d, 0x2",
    "test    sil, sil",
    "jne     0x62fb7",
    "mov     dword [rel data_167f84], ecx",
    "mov     dword [rel data_167f80], r13d",
    "mov     qword [rel data_167f88], r15",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x63b0c",
    "movzx   eax, byte [rsi]",
    "add     rsi, 0x1",
    "mov     rbx, rax",
    "movzx   eax, word [rdx+rax*2]",
    "sub     ebx, 0x23",
    "cmp     bl, 0x3c",
    "jbe     0x63048",
    "mov     byte [r12-0x1], 0x0",
    "mov     rdi, r14",
    "call    legal_identifier",
    "test    eax, eax",
    "jne     0x638d7",
    "xor     edx, edx",
    "test    rdi, rdi",
    "jne     0x634e6",
    "cmp     rax, rdi",
    "je      0x634ba",
    "cmp     bl, 0x3c",
    "sete    r9b",
    "test    sil, sil",
    "je      0x63563",
    "mov     r13d, 0x4",
    "test    dil, dil",
    "jne     0x62fb7",
    "bt      rcx, rbx",
    "jae     0x63068",
    "movzx   r11d, byte [rsi-0x1]",
    "mov     byte [rsi-0x1], 0x0",
    "lea     r15, [rsi-0x1]",
    "xor     r9d, r9d",
    "movzx   eax, byte [r14]",
    "mov     ecx, 0xa",
    "cmp     al, 0x30",
    "je      0x6388f",
    "mov     rdi, r14",
    "call    find_variable",
    "test    rax, rax",
    "je      0x63864",
    "mov     byte [r12-0x1], 0x5b",
    "jmp     0x63740",
    "lea     rdi, [rel data_120287]  {\"bad array subscript\"}",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     r15, [r12+rax]",
    "mov     r14, qword [rel data_167f88]",
    "mov     dword [rbp-0x9c], 0x5d",
    "movzx   r13d, byte [r15]",
    "jmp     0x6318e",
    "call    free",
    "jmp     0x631b7",
    "mov     rdi, r14",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x63b11",
    "mov     qword [rel data_1598e0], 0x0",
    "mov     qword [rel data_1598f0], 0x0",
    "mov     qword [rel data_1598f8], 0xffffffffffffffff",
    "mov     qword [rel data_1598e8], 0xffffffffffffffff",
    "cmp     al, 0x3c",
    "jne     0x63914",
    "mov     r13d, 0x3",
    "test    r9b, r9b",
    "jne     0x62fb7",
    "movzx   eax, byte [r14+0x1]",
    "test    al, al",
    "je      0x638b6",
    "test    al, al",
    "je      0x638b6",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x40",
    "je      0x63864",
    "mov     qword [rbp-0x68], rax",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     r12, r14",
    "mov     rsi, r14",
    "mov     rdx, rbx",
    "mov     rdi, rcx",
    "call    __strcpy_chk",
    "mov     byte [r15], r13b",
    "mov     ecx, dword [rel data_167f80]",
    "mov     rbx, rax",
    "mov     rax, qword [rel data_167f68]",
    "mov     r13d, dword [rel data_16806c]",
    "mov     qword [rel data_167f98], 0x0",
    "mov     dword [rbp-0x68], ecx",
    "mov     r14d, dword [rel data_167f84]",
    "mov     qword [rbp-0x70], rax",
    "mov     rax, qword [rel data_167f78]",
    "mov     qword [rel data_167f88], r15",
    "mov     qword [rbp-0x78], rax",
    "mov     rax, qword [rel data_1598e0]",
    "mov     dword [rel data_16806c], 0x1",
    "mov     qword [rbp-0x80], rax",
    "mov     rax, qword [rel data_1598e8]",
    "mov     dword [rel data_167f80], 0x5",
    "mov     qword [rbp-0x88], rax",
    "mov     rax, qword [rel data_1598f0]",
    "mov     qword [rbp-0x90], rax",
    "mov     rax, qword [rel data_1598f8]",
    "mov     qword [rbp-0x98], rax",
    "call    sub_62f60",
    "mov     esi, dword [rel data_167f80]",
    "mov     ecx, dword [rbp-0x68]",
    "cmp     esi, 0x5",
    "je      0x63330",
    "cmp     al, 0x3e",
    "jne     0x63947",
    "test    r9b, r9b",
    "je      0x63914",
    "xor     r13d, r13d",
    "jmp     0x636e8",
    "mov     edx, eax",
    "and     edx, 0xffffffdf",
    "cmp     dl, 0x58",
    "je      0x638be",
    "xor     r13d, r13d",
    "mov     ebx, 0x1d",
    "mov     r10d, 0x37",
    "jmp     0x63100",
    "mov     byte [r12-0x1], 0x5b",
    "mov     r11d, dword [rbx]",
    "test    r11d, r11d",
    "je      0x63740",
    "mov     rdi, qword [rel data_167f98]",
    "test    rdi, rdi",
    "je      0x63344",
    "mov     rax, qword [rbp-0x70]",
    "mov     dword [rel data_167f80], ecx",
    "mov     dword [rel data_167f84], r14d",
    "mov     qword [rel data_167f68], rax",
    "mov     rax, qword [rbp-0x78]",
    "mov     qword [rel data_167f88], r12",
    "mov     qword [rel data_167f78], rax",
    "mov     rax, qword [rbp-0x80]",
    "mov     qword [rel data_167f98], rbx",
    "mov     qword [rel data_1598e0], rax",
    "mov     rax, qword [rbp-0x88]",
    "mov     dword [rel data_16806c], r13d",
    "mov     qword [rel data_1598e8], rax",
    "mov     rax, qword [rbp-0x90]",
    "mov     qword [rel data_1598f0], rax",
    "mov     rax, qword [rbp-0x98]",
    "mov     qword [rel data_1598f8], rax",
    "lea     eax, [r14-0xe]",
    "cmp     eax, 0x1",
    "jbe     0x633b1",
    "cmp     bl, 0x26",
    "jne     0x6395a",
    "test    dil, dil",
    "je      0x63947",
    "cmp     byte [r14+0x2], 0x3d",
    "mov     r13d, 0x9",
    "jne     0x62fb7",
    "mov     qword [rel data_167f78], r13",
    "mov     ecx, dword [rel data_167f80]",
    "mov     r13d, 0x6",
    "mov     byte [rsi-0x1], r11b",
    "jmp     0x62fb7",
    "movzx   eax, byte [r14+0x2]",
    "lea     r12, [r14+0x3]",
    "mov     r9d, 0x1",
    "mov     ecx, 0x10",
    "jmp     0x63089",
    "lea     r12, [r14+0x2]",
    "mov     ecx, 0x8",
    "mov     r9d, 0x1",
    "jmp     0x63091",
    "cmp     al, 0x23",
    "jne     0x630a8",
    "mov     r10d, dword [rel data_168068]",
    "xor     edx, edx",
    "test    r10d, r10d",
    "setne   dl",
    "jmp     0x63742",
    "mov     rax, qword [rbp-0x70]",
    "mov     dword [rel data_167f80], ecx",
    "mov     dword [rel data_167f84], r14d",
    "mov     qword [rel data_167f68], rax",
    "mov     rax, qword [rbp-0x78]",
    "mov     qword [rel data_167f88], r12",
    "mov     qword [rel data_167f78], rax",
    "mov     rax, qword [rbp-0x80]",
    "mov     qword [rel data_167f98], rbx",
    "mov     qword [rel data_1598e0], rax",
    "mov     rax, qword [rbp-0x88]",
    "mov     dword [rel data_16806c], r13d",
    "mov     qword [rel data_1598e8], rax",
    "mov     rax, qword [rbp-0x90]",
    "mov     qword [rel data_1598f0], rax",
    "mov     rax, qword [rbp-0x98]",
    "mov     qword [rel data_1598f8], rax",
    "call    free",
    "mov     ecx, dword [rbp-0x68]",
    "test    r13d, r13d",
    "jne     0x63680",
    "cmp     esi, 0x3d",
    "jne     0x633b1",
    "cmp     bl, 0x7c",
    "jne     0x6396d",
    "mov     r13d, 0x7",
    "cmp     al, 0x26",
    "je      0x62fb7",
    "cmp     byte [r14+0x2], 0x3d",
    "mov     r13d, 0xa",
    "jne     0x62fb7",
    "mov     dword [rel data_167f60], 0x9",
    "lea     r15, [r14+0x3]",
    "mov     r13d, 0xb",
    "jmp     0x62fb7",
    "mov     r14, qword [rdi]",
    "movzx   edx, al",
    "test    byte [r14+rdx*2], 0x8",
    "jne     0x63698",
    "test    r9d, r9d",
    "jne     0x63a9c",
    "xor     esi, esi",
    "mov     rdi, r15",
    "call    sub_111360",
    "cdqe    ",
    "cmp     byte [r15+rax], 0x5d",
    "jne     0x63aed",
    "xor     edx, edx",
    "lea     rax, [rel assoc_expand_once]",
    "mov     r13d, dword [rel data_168070]",
    "mov     r14d, dword [rax]",
    "test    r14d, r14d",
    "je      0x633e5",
    "mov     qword [rel data_167f78], 0x0",
    "cmp     bl, 0x2a",
    "jne     0x63980",
    "mov     r13d, 0x8",
    "cmp     al, 0x7c",
    "je      0x62fb7",
    "mov     dword [rel data_167f60], 0xa",
    "lea     r15, [r14+0x3]",
    "mov     r13d, 0xb",
    "jmp     0x62fb7",
    "lea     edx, [rax-0x30]",
    "cmp     dl, 0x9",
    "jbe     0x636d3",
    "cmp     al, 0x5f",
    "jne     0x636e0",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1202be]  {\"invalid number\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     rax, [r13-0x2]",
    "cmp     rax, 0x3e",
    "ja      0x63ad2",
    "mov     r13d, 0x5",
    "jmp     0x62fb7",
    "lea     rax, [rel shell_compatibility_level]",
    "mov     r9d, r14d",
    "cmp     dword [rax], 0x33",
    "jle     0x633f8",
    "mov     r9d, dword [rel data_168068]",
    "xor     r14d, r14d",
    "test    r9d, r9d",
    "setne   r14b",
    "shl     r14d, 0x5",
    "lea     esi, [rbx-0x2b]",
    "and     sil, 0xfd",
    "jne     0x6398d",
    "mov     r13d, 0xd",
    "cmp     al, 0x2a",
    "je      0x62fb7",
    "movzx   r14d, dl",
    "jmp     0x630d8",
    "lea     edx, [rax-0x61]",
    "cmp     dl, 0x19",
    "jbe     0x636d0",
    "cmp     al, 0x40",
    "je      0x630c1",
    "cmp     al, 0x40",
    "setne   r14b",
    "setne   dl",
    "movzx   r14d, r14b",
    "add     edx, 0x3e",
    "add     r14d, 0x3e",
    "nop     dword [rax]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x1202cd]  {\"invalid arithmetic base\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "movzx   r9d, byte [r12]",
    "mov     rdx, qword [rdi]",
    "mov     ecx, r13d",
    "test    byte [rdx+r9*2], 0x8",
    "jne     0x63143",
    "cmp     dword [rbp-0x9c], 0x5d",
    "je      0x635a0",
    "or      r9b, 0x80",
    "movzx   r13d, bl",
    "cmp     al, 0x3d",
    "je      0x63b85",
    "cmp     bl, al",
    "je      0x63a07",
    "cmp     ecx, r14d",
    "jle     0x639ec",
    "lea     edx, [rax-0x57]",
    "lea     edx, [rax-0x41]",
    "cmp     dl, 0x19",
    "ja      0x63af9",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1202fe]  {\"value too great for base\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "movsxd  rax, ecx",
    "movzx   edx, dl",
    "imul    rax, r13",
    "lea     r13, [rdx+rax]",
    "xor     r13d, r13d",
    "mov     r9d, 0x1",
    "jmp     0x630ef",
    "cmp     r9b, 0x40",
    "sete    dl",
    "cmp     r9b, 0x5f",
    "sete    al",
    "or      dl, al",
    "je      0x63ab7",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "mov     esi, r14d",
    "mov     dword [rbp-0x68], r9d",
    "call    array_variable_name",
    "mov     r9d, dword [rbp-0x68]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0x635e5",
    "mov     rdi, rbx",
    "call    find_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "jne     0x63427",
    "mov     esi, r13d",
    "lea     rdi, [rel data_120317]  {\"*/%+-&^|\"}",
    "mov     dword [rbp-0x68], ecx",
    "call    mbschr",
    "mov     ecx, dword [rbp-0x68]",
    "test    rax, rax",
    "je      0x63999",
    "mov     edi, r13d",
    "call    sub_5abe0",
    "test    eax, eax",
    "jne     0x63b7d",
    "cmp     ecx, 0x5",
    "je      0x63a89",
    "cmp     al, 0x40",
    "je      0x63b46",
    "cmp     ecx, 0x24",
    "mov     r14d, r10d",
    "cmovg   r14d, ebx",
    "sub     eax, r14d",
    "movzx   r14d, al",
    "mov     edx, r14d",
    "jmp     0x630d8",
    "movzx   eax, byte [r12]",
    "add     r12, 0x1",
    "test    al, al",
    "je      0x636e8",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1202e5]  {\"invalid integer constant\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     rax, [rel unbound_vars_is_error]",
    "xor     r12d, r12d",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x637e2",
    "mov     dword [rbp-0x70], r9d",
    "mov     qword [rbp-0x68], rax",
    "call    find_variable",
    "mov     rdi, qword [rbp-0x68]",
    "mov     r12, rax",
    "call    free",
    "test    r12, r12",
    "mov     r9d, dword [rbp-0x70]",
    "jne     0x637c5",
    "test    byte [r12+0x29 {Elf64_Header::section_header_offset+1.b}], 0x10",
    "je      0x63704",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    find_variable_last_nameref",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x63433",
    "mov     dword [rel data_167f60], r13d",
    "mov     r13d, 0xb",
    "jmp     0x62fb7",
    "mov     r15, r12",
    "jmp     0x62fb7",
    "test    ecx, ecx",
    "je      0x63b62",
    "xor     r13d, r13d",
    "cmp     bl, 0x2d",
    "sete    r13b",
    "add     r13d, 0x10",
    "jmp     0x62fb7",
    "cmp     ecx, 0x6",
    "je      0x63a48",
    "mov     r14d, 0x3e",
    "mov     edx, 0x3e",
    "jmp     0x630d8",
    "cmp     al, 0x5f",
    "je      0x63b36",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "mov     esi, r14d",
    "call    array_variable_name",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_158490]",
    "mov     dword [rel data_158490], 0x1",
    "mov     rbx, rax",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rax], 0x1",
    "call    set_pipestatus_array",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x12029b]  {\"%s: unbound variable\"}",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "test    rbx, rbx",
    "je      0x6348c",
    "pxor    xmm0, xmm0",
    "lea     rcx, [rbp-0x60]",
    "mov     edx, r9d",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "mov     dword [rbp-0x60], 0xffff",
    "mov     qword [rbp-0x58], 0xffffffffffffffff",
    "movaps  xmmword [rbp-0x50], xmm0",
    "call    sub_98120",
    "mov     r14, rax",
    "test    byte [r12+0x29 {Elf64_Header::section_header_offset+1.b}], 0x10",
    "je      0x635f9",
    "pxor    xmm0, xmm0",
    "mov     rdi, r12",
    "mov     dword [rbp-0x60], 0xffff",
    "mov     qword [rbp-0x58], 0xffffffffffffffff",
    "movaps  xmmword [rbp-0x50], xmm0",
    "call    get_variable_value",
    "mov     r14, rax",
    "jmp     0x63624",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x63704",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132fc0]  {\"syntax error: operand expected\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "mov     edi, ecx",
    "call    sub_5abe0",
    "test    eax, eax",
    "jne     0x63b62",
    "mov     eax, dword [rel data_167f84]",
    "mov     rsi, r15",
    "sub     eax, 0xe",
    "cmp     eax, 0x1",
    "ja      0x63a27",
    "mov     rsi, r15",
    "jmp     0x63a27",
    "mov     r14d, 0x3f",
    "mov     edx, 0x3f",
    "jmp     0x630d8",
    "movzx   r14d, al",
    "mov     edx, eax",
    "jmp     0x630d8",
    "lea     rdx, [rel no_longjmp_on_fatal_error]",
    "lea     rax, [rel interactive_shell]",
    "mov     r8d, dword [rdx]",
    "mov     eax, dword [rax]",
    "test    r8d, r8d",
    "je      0x637a9",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x6348c",
    "cmp     r13d, dword [rel data_168070]",
    "jle     0x63777",
    "mov     qword [rbp-0x68], rcx",
    "call    free",
    "mov     rcx, qword [rbp-0x68]",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x635f9",
    "mov     rdi, qword [rbp-0x50]",
    "mov     rcx, qword [rbp-0x58]",
    "test    rdi, rdi",
    "je      0x6363e",
    "lea     rax, [rel last_command_exit_value]",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_158490]",
    "mov     dword [rel data_158490], 0x1",
    "mov     dword [rax], 0x1",
    "call    set_pipestatus_array",
    "lea     rsi, [rel 0x12029b]  {\"%s: unbound variable\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "cmp     ecx, 0x4",
    "jg      0x63b56",
    "movzx   eax, byte [rsi]",
    "test    al, al",
    "jne     0x63a16",
    "cmp     bl, 0x2d",
    "je      0x63a7d",
    "test    eax, eax",
    "je      0x634b0",
    "test    eax, eax",
    "jne     0x63665",
    "xor     edx, edx",
    "test    r14, r14",
    "je      0x63788",
    "lea     rax, [rel no_longjmp_on_fatal_error]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "je      0x63680",
    "sub     ecx, 0x7",
    "cmp     ecx, 0xa",
    "ja      0x639d1",
    "test    ecx, ecx",
    "jg      0x63b62",
    "lea     edi, [rax-0x9]",
    "cmp     dil, 0x1",
    "jbe     0x63a23",
    "movzx   esi, al",
    "test    byte [rdx+rsi*2+0x1], 0x4",
    "jne     0x63a6a",
    "lea     rdi, [rel data_132f50]  {\"--: assignment requires lvalue\"}",
    "call    sub_61af0",
    "{ Does not return }",
    "lea     rdi, [rel data_132f70]  {\"++: assignment requires lvalue\"}",
    "call    sub_61af0",
    "{ Does not return }",
    "mov     edi, 0x1",
    "call    jump_to_top_level",
    "{ Does not return }",
    "call    sub_5ac30",
    "call    top_level_cleanup",
    "mov     edi, 0x2",
    "call    jump_to_top_level",
    "{ Does not return }",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_167fa0]",
    "call    __longjmp_chk",
    "{ Does not return }",
    "mov     qword [rel data_1598e0], rbx",
    "mov     qword [rel data_1598e8], rdx",
    "mov     qword [rel data_1598f0], r12",
    "mov     qword [rel data_1598f8], rcx",
    "jmp     0x63682",
    "cmp     byte [r14], 0x0",
    "jne     0x63877",
    "lea     rax, [rel interactive_shell]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0x63680",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132f90]  {\"syntax error: invalid arithmetic\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "call    sub_61af0",
    "{ Does not return }",
    "add     rsi, 0x1",
    "cmp     al, 0x20",
    "jne     0x63a2e",
    "xor     r13d, r13d",
    "cmp     bl, 0x2d",
    "sete    r13b",
    "add     r13d, 0xe",
    "jmp     0x62fb7",
    "cmp     al, 0x5f",
    "je      0x63a6a",
    "mov     qword [rel data_167f78], rdx",
    "mov     ecx, dword [rel data_167f80]",
    "jmp     0x6331b",
    "mov     rdi, r14",
    "mov     qword [rbp-0x68], rcx",
    "call    sub_64cb0",
    "mov     rcx, qword [rbp-0x68]",
    "mov     rdx, rax",
    "jmp     0x63788",
    "movzx   r13d, bl",
    "mov     r15, r12",
    "jmp     0x62fb7"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}