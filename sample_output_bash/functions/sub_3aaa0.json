{
  "address": "0x3aaa0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "xor     edx, edx  {0x0}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     ebx, edi",
    "sub     rsp, 0x8",
    "lea     rsi, [rel word_token_alist]",
    "call    find_token_in_alist",
    "test    rax, rax",
    "je      0x3aad8",
    "lea     rsi, [rel other_token_alist]",
    "xor     edx, edx  {0x0}",
    "mov     edi, ebx",
    "call    find_token_in_alist",
    "test    rax, rax",
    "jne     0x3aac6",
    "add     rsp, 0x8",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rdx, [rel current_token]",
    "mov     edx, dword [rdx]  {current_token}",
    "cmp     edx, 0x11d",
    "je      0x3abd0",
    "lea     rax, [rel yylval]",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rax, qword [rax]  {yylval}",
    "test    rax, rax",
    "jne     0x3abb6",
    "jg      0x3ab90",
    "add     rsp, 0x8",
    "mov     rdi, rax",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     rbp {__saved_rbp}",
    "jmp     string_list_internal",
    "jmp     0x3aac6",
    "cmp     edx, 0x11e",
    "jne     0x3aac6",
    "cmp     edx, 0x11a",
    "jle     0x3ab38",
    "lea     rax, [rel yylval]",
    "mov     rax, qword [rax]  {yylval}",
    "test    rax, rax",
    "je      0x3aac6",
    "cmp     edx, 0x118",
    "jle     0x3aac6",
    "cmp     edx, 0x11c",
    "jne     0x3aac6",
    "lea     rsi, [rel data_11f159]",
    "lea     rax, [rel yylval]",
    "mov     rax, qword [rax]  {yylval}",
    "test    rax, rax",
    "je      0x3aac6",
    "lea     rax, [rel yylval]",
    "movsxd  rdi, dword [rax]  {yylval}",
    "add     rsp, 0x8",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     rbp {__saved_rbp}",
    "jmp     itos",
    "mov     r13, qword [rax]",
    "mov     rdi, r13",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x3abeb",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "add     rsp, 0x8",
    "mov     rdx, rbx",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     rbp {__saved_rbp}",
    "jmp     __strcpy_chk"
  ],
  "high level IL": [
    "int64_t* yylval_1 = find_token_in_alist(arg1, &word_token_alist)",
    "if (yylval_1 == 0)",
    "yylval_1 = find_token_in_alist(arg1, &other_token_alist)",
    "if (yylval_1 == 0)",
    "uint32_t current_token_1 = current_token",
    "if (current_token_1 == 0x11d)",
    "yylval_1 = yylval",
    "if (yylval_1 != 0)",
    "return string_list_internal(yylval_1, \" \") __tailcall",
    "if (current_token_1 == 0x11e)",
    "yylval_1 = yylval",
    "if (yylval_1 != 0)",
    "return string_list_internal(yylval_1, \" ; \") __tailcall",
    "if (current_token_1 s<= 0x11a)",
    "if (current_token_1 s> 0x118)",
    "yylval_1 = yylval",
    "if (yylval_1 != 0)",
    "char* r13 = *yylval_1",
    "uint64_t bytes = strlen(r13) + 1",
    "char* rax_2 = malloc(bytes)",
    "if (rax_2 != 0)",
    "return __strcpy_chk(rax_2, r13, bytes) __tailcall",
    "sub_a7f00()",
    "noreturn",
    "if (current_token_1 == 0x11c)",
    "return itos(sx.q(yylval.d)) __tailcall",
    "return yylval_1"
  ]
}