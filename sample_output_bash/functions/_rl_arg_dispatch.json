{
  "address": "0x10b7e0",
  "rules": [
    "encrypt data using Curve25519/7d070d905d0942e295bbb2c9df72fc86",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "push    r12",
    "lea     r12, [rel _rl_keymap]",
    "push    rbx",
    "mov     ebx, esi",
    "test    esi, esi",
    "js      0x10b878",
    "lea     rdx, [rel _rl_argcxt]",
    "movsxd  rax, esi",
    "shl     rax, 0x4",
    "add     rax, qword [r12]",
    "cmp     byte [rax], 0x0",
    "jne     0x10b81d",
    "call    rl_restore_prompt",
    "lea     rax, [rel rl_prompt]",
    "mov     rdx, qword [rax]",
    "lea     rax, [rel rl_display_prompt]",
    "mov     qword [rax], rdx",
    "mov     edx, dword [rel data_16a4b0]",
    "test    edx, edx",
    "jne     0x10b960",
    "lea     rax, [rel rl_numeric_arg]",
    "cmp     dword [rax], 0x1",
    "jne     0x10b8a8",
    "mov     esi, ebx",
    "lea     rdx, [rel _rl_argcxt]",
    "and     sil, 0x7f",
    "lea     eax, [rsi-0x30]",
    "mov     ecx, dword [rdx]",
    "cmp     eax, 0x9",
    "ja      0x10b978",
    "lea     rcx, [rel rl_universal_argument]",
    "cmp     qword [rax+0x8], rcx",
    "je      0x10b930",
    "call    rl_restore_prompt",
    "mov     dword [rel data_16a4b0], 0x0",
    "jmp     0x10b8cf",
    "lea     r13, [rel rl_redisplay_function]",
    "call    qword [r13]",
    "lea     r14, [rel rl_readline_state]",
    "xor     edx, edx",
    "mov     edi, ebx",
    "mov     rsi, qword [r12]",
    "lea     rax, [rel _rl_dispatching_keymap]",
    "and     qword [r14], 0xfffffffffffffbff",
    "mov     qword [rax], rsi",
    "call    _rl_dispatch_subseq",
    "mov     rdx, qword [r14]",
    "test    edx, 0x80000",
    "je      0x10b86b",
    "lea     rax, [rel rl_explicit_arg]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0x10ba28",
    "cmp     esi, 0x2d",
    "jne     0x10b87f",
    "lea     rsi, [rel rl_explicit_arg]",
    "lea     rdi, [rel rl_numeric_arg]",
    "mov     r8d, dword [rsi]",
    "test    r8d, r8d",
    "je      0x10b859",
    "and     edi, 0x2",
    "je      0x10ba38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel rl_done]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x10b91f",
    "mov     dword [rax], 0x1",
    "jmp     0x10b8a8",
    "nop     dword [rax]",
    "test    byte [rdx], 0x1",
    "je      0x10b8a8",
    "lea     rax, [rel rl_explicit_arg]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0x10b87f",
    "or      ecx, 0x2",
    "mov     dword [rdi], eax",
    "mov     dword [rsi], 0x1",
    "mov     dword [rdx], ecx",
    "mov     r8d, dword [rdi]",
    "lea     r8d, [r8+r8*4]",
    "lea     eax, [rax+r8*2]",
    "lea     rax, [rel rl_numeric_arg]",
    "shl     dword [rax], 0x2",
    "jmp     0x10b866",
    "lea     rbx, [rel rl_readline_state]",
    "test    qword [rbx], 0x80000",
    "je      0x10b9c0",
    "xor     eax, eax",
    "jmp     0x10b86b",
    "call    qword [r13]",
    "lea     rax, [rel rl_numeric_arg]",
    "or      ecx, 0x1",
    "mov     dword [rdx], ecx",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel rl_arg_sign]",
    "mov     dword [rax], 0xffffffff",
    "jmp     0x10b866",
    "mov     eax, 0x1",
    "call    _rl_bracketed_read_key",
    "mov     r13d, eax",
    "call    rl_restore_prompt",
    "lea     rax, [rel rl_prompt]",
    "mov     r9d, dword [rel data_16a4b0]",
    "mov     rdx, qword [rax]",
    "lea     rax, [rel rl_display_prompt]",
    "mov     qword [rax], rdx",
    "test    r9d, r9d",
    "jne     0x10ba47",
    "lea     rax, [rel _rl_argcxt]",
    "or      dword [rax], 0x4",
    "xor     eax, eax",
    "jmp     0x10b86b",
    "call    rl_restore_prompt",
    "mov     dword [rel data_16a4b0], 0x0",
    "jmp     0x10b9ed",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "and     qword [rbx], 0xfffffffffffffbff",
    "test    r13d, r13d",
    "js      0x10ba58",
    "or      eax, 0xffffffff",
    "jmp     0x10b86b",
    "mov     rsi, qword [r12]",
    "lea     rax, [rel _rl_dispatching_keymap]",
    "mov     edi, r13d",
    "xor     edx, edx",
    "mov     qword [rax], rsi",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "jmp     _rl_dispatch_subseq"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}