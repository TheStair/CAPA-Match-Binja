{
  "address": "0xf1a10",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "mov     edi, 0x58",
    "push    r13",
    "mov     r13, rsi",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xf1bfd",
    "mov     esi, 0x58",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [r12+0x8], 0x0",
    "xor     r15d, r15d",
    "mov     dword [rbp-0x38], 0xa",
    "jmp     0xf1ac5",
    "mov     esi, r15d",
    "mov     rdi, r14",
    "call    r13",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xf1b80",
    "test    r15d, r15d",
    "je      0xf1bb0",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xf1a60",
    "mov     rdi, r12",
    "xor     r12d, r12d",
    "call    free",
    "jmp     0xf1b99",
    "cmp     r15d, 0x1",
    "je      0xf1bbd",
    "cmp     r13, qword [rel data_157e50]",
    "je      0xf1b48",
    "add     r15d, 0x1",
    "cmp     dword [rbp-0x38], r15d",
    "jg      0xf1ab5",
    "add     rsp, 0x18",
    "mov     rax, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [r12+0x8]",
    "mov     qword [r12+0x8], 0x0",
    "mov     qword [r12], rax",
    "jmp     0xf1b99",
    "mov     rdx, r14",
    "mov     esi, r15d",
    "mov     rdi, r12",
    "call    sub_ebd10",
    "mov     rdi, qword [r12+0x8]",
    "test    rdi, rdi",
    "je      0xf1a6d",
    "mov     rdi, r12",
    "call    free",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xf1b30",
    "movsxd  rax, r15d",
    "mov     qword [r12+rax*8], rbx",
    "mov     qword [r12+rax*8+0x8], 0x0",
    "mov     ecx, dword [rbp-0x38]",
    "lea     r9d, [rcx+0xb]",
    "lea     eax, [rcx+0xa]",
    "movsxd  r9, r9d",
    "mov     dword [rbp-0x38], eax",
    "shl     r9, 0x3",
    "test    r12, r12",
    "je      0xf1a99",
    "lea     r15, [r12+0x10]",
    "nop     dword [rax+rax]",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0xf1a86",
    "mov     dword [rbp-0x38], 0xa",
    "mov     r15d, 0x1",
    "mov     r9d, 0x58",
    "mov     rdi, r9",
    "mov     qword [rbp-0x40], r9",
    "call    malloc",
    "mov     r9, qword [rbp-0x40]",
    "mov     r12, rax",
    "mov     rsi, r9",
    "mov     rdi, r12",
    "mov     qword [rbp-0x40], r9",
    "call    realloc",
    "mov     r9, qword [rbp-0x40]",
    "mov     r12, rax",
    "jmp     0xf1aac",
    "call    free",
    "mov     rdi, qword [r15]",
    "add     r15, 0x8",
    "test    rdi, rdi",
    "jne     0xf1b60",
    "jmp     0xf1a6d",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "mov     qword [rbp-0x38], r9",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x38]",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "test    r12, r12",
    "je      0xf1bd1"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}