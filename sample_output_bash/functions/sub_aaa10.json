{
  "address": "0xaaa10",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r12 {__saved_r12}",
    "mov     r12, rdi",
    "mov     edi, 0x10",
    "push    rbx {__saved_rbx}",
    "call    malloc",
    "test    rax, rax",
    "je      0xaaad4",
    "mov     esi, 0x10",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rax], 0x0",
    "mov     edi, 0xe8",
    "mov     rbx, rax",
    "mov     qword [rax+0x8], 0x0",
    "call    malloc",
    "test    rax, rax",
    "je      0xaaae7",
    "mov     esi, 0xe8",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rdx, [rel o_options]",
    "lea     rcx, [rel data_11f68a]  {\"allexport\"}",
    "lea     rsi, [rdx+0x28]  {data_155a28}",
    "mov     edx, 0x1",
    "nop     dword [rax]",
    "mov     qword [rax+rdx*8-0x8], rcx",
    "mov     rcx, qword [rsi]",
    "mov     rdi, rdx",
    "add     rsi, 0x28",
    "add     rdx, 0x1",
    "test    rcx, rcx",
    "jne     0xaaa70",
    "movsxd  rdi, edi",
    "mov     qword [rbx], rax",
    "mov     qword [rax+rdi*8], 0x0",
    "cmp     qword [rax], 0x0",
    "je      0xaaad0",
    "xor     ecx, ecx  {0x0}",
    "jmp     0xaaab7",
    "mov     edx, 0x1",
    "nop     dword [rax]",
    "or      dword [r12], 0x20",
    "xor     eax, eax  {0x0}",
    "mov     dword [rbx+0xc], ecx",
    "mov     qword [r12+0x10], rbx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     rcx, rdx",
    "add     rdx, 0x1",
    "cmp     qword [rax+rdx*8-0x8], 0x0",
    "jne     0xaaaa8"
  ],
  "high level IL": [
    "int64_t* rax = malloc(0x10)",
    "if (rax == 0)",
    "sub_a7f00()",
    "noreturn",
    "*rax = 0",
    "rax[1] = 0",
    "int64_t* rax_1 = malloc(0xe8)",
    "if (rax_1 == 0)",
    "sub_a7f00()",
    "noreturn",
    "char const* const i = \"allexport\"",
    "char const (** const rsi)[0xc] = &data_155a28",
    "int64_t rdx = 1",
    "int32_t rdi",
    "rax_1[rdx - 1] = i",
    "i = *rsi",
    "rdi = rdx.d",
    "rsi = &rsi[5]",
    "rdx += 1",
    "do while (i != 0)",
    "*rax = rax_1",
    "rax_1[sx.q(rdi)] = 0",
    "int32_t rcx",
    "if (*rax_1 == 0)",
    "rcx = 0",
    "int64_t rdx_1 = 1",
    "rcx = rdx_1.d",
    "rdx_1 += 1",
    "do while (rax_1[rdx_1 - 1] != 0)",
    "*arg1 |= 0x20",
    "*(rax + 0xc) = rcx",
    "*(arg1 + 0x10) = rax",
    "return 0"
  ]
}