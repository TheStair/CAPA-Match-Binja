{
  "address": "0x8ac60",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12, rsi",
    "push    rbx",
    "mov     ebx, edi",
    "sub     rsp, 0x118",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    edi, edi",
    "je      0x8ae00",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x8aef2",
    "cmp     edi, 0x41",
    "je      0x8ae00",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rsi, r13",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r13",
    "mov     rsi, r12",
    "call    __strcpy_chk",
    "mov     edi, ebx",
    "mov     rsi, rax",
    "call    sub_88510",
    "lea     rax, [rel interactive]",
    "mov     eax, dword [rax]",
    "or      eax, dword [rel data_168770]",
    "or      eax, ebx",
    "jne     0x8ad77",
    "lea     eax, [rdi-0x42]",
    "cmp     eax, 0x1",
    "jbe     0x8ada0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8aeb8",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8aeb8",
    "mov     rdi, rsi",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x8aef2",
    "lea     r15, [rel data_1611a0]",
    "movsxd  r13, edi",
    "mov     eax, dword [r15+r13*4]",
    "test    al, 0x2",
    "jne     0x8ad77",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x118",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x118",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sub_8aa00",
    "mov     rsi, r12",
    "mov     rcx, r13",
    "mov     rdx, r13",
    "call    __memcpy_chk",
    "mov     rsi, rax",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8aeb8",
    "test    al, 0x1",
    "jne     0x8ace5",
    "add     rsp, 0x118",
    "mov     edi, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sub_88510",
    "test    al, 0x8",
    "jne     0x8ae78",
    "lea     r14, [rel original_signals]",
    "mov     rdx, qword [r14+r13*8]",
    "cmp     rdx, qword [rel data_157f80]",
    "je      0x8aec0",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x8af0a",
    "lea     r13, [rbp-0xc0]",
    "lea     r14, [rbp-0x140]",
    "mov     rdi, r13",
    "call    sigemptyset",
    "mov     esi, ebx",
    "mov     rdi, r13",
    "call    sigaddset",
    "mov     rdi, r14",
    "call    sigemptyset",
    "mov     rsi, r13",
    "mov     rdx, r14",
    "xor     edi, edi",
    "call    sigprocmask",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x8af20",
    "xor     esi, esi",
    "call    set_signal_handler",
    "mov     edi, ebx",
    "mov     rsi, rax",
    "mov     qword [r14+r13*8], rax",
    "call    set_signal_handler",
    "cmp     qword [r14+r13*8], 0x1",
    "je      0x8aee8",
    "cmp     rdx, 0x1",
    "je      0x8ad77",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "call    __strcpy_chk",
    "mov     rsi, r14",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "je      0x8ade4",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r13",
    "mov     rsi, r12",
    "mov     rdi, r15",
    "call    __strcpy_chk",
    "mov     rsi, r15",
    "mov     edi, ebx",
    "call    sub_88510",
    "lea     rsi, [rel trap_handler]",
    "mov     edi, ebx",
    "call    set_signal_handler",
    "xor     edx, edx",
    "mov     rsi, r14",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "or      dword [r15+r13*4], 0x2",
    "jmp     0x8ad77",
    "mov     eax, dword [r15+r13*4]",
    "jmp     0x8ace5"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}