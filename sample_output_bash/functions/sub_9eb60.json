{
  "address": "0x9eb60",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "decompress data using LZO/eb3121acf7214c64b84ac9b7cddcf413",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "read file on Linux",
    "create or open file"
  ],
  "disassembly": [
    "push    rbp",
    "lea     rsi, [rel data_122f4f]",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x238",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    fopen",
    "mov     qword [rbp-0x260], rax",
    "test    rax, rax",
    "je      0x9ee05",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x9eeff",
    "lea     rax, [rbp-0x240]",
    "lea     r12, [rbp-0x140]",
    "mov     r14, 0x100002600",
    "mov     qword [rbp-0x248], rax",
    "nop     ",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x238",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbp-0x260]",
    "call    fclose",
    "movzx   r13d, byte [rbp-0x140]",
    "test    r13b, r13b",
    "je      0x9ebc0",
    "mov     rdx, qword [rbp-0x260]",
    "mov     esi, 0xff",
    "mov     rdi, r12",
    "call    fgets",
    "test    rax, rax",
    "je      0x9edf9",
    "lea     rax, [rbp-0x13f]",
    "xor     ebx, ebx",
    "jmp     0x9ec0e",
    "cmp     r13b, 0x20",
    "jbe     0x9ebf8",
    "bt      r14, r13",
    "jae     0x9ec1a",
    "cmp     r13b, 0x23",
    "je      0x9ebc0",
    "movsxd  r15, ebx",
    "mov     edx, 0x9",
    "lea     rsi, [rel data_120be5]  {\"$include \"}",
    "lea     rax, [r12+r15]",
    "mov     rdi, rax",
    "mov     qword [rbp-0x250], rax",
    "call    strncmp",
    "test    eax, eax",
    "je      0x9ee34",
    "movzx   r13d, byte [rax]",
    "add     rax, 0x1",
    "add     ebx, 0x1",
    "test    r13b, r13b",
    "je      0x9ebc0",
    "lea     rdi, [r12+r15+0x9]",
    "movzx   eax, byte [rdi]",
    "test    al, al",
    "jne     0x9ee58",
    "movzx   eax, byte [rbp+r15-0x140]",
    "lea     r10d, [r13-0x30]",
    "cmp     r10b, 0x9",
    "jbe     0x9eea3",
    "cmp     al, 0x20",
    "je      0x9ee48",
    "jmp     0x9eeef",
    "test    al, al",
    "je      0x9ebc0",
    "test    al, al",
    "je      0x9ebc0",
    "movzx   eax, byte [rdi+0x1]",
    "add     rdi, 0x1",
    "test    al, al",
    "je      0x9eeef",
    "cmp     al, 0x9",
    "je      0x9ee48",
    "mov     rdx, rdi",
    "mov     byte [rdx], 0x0",
    "call    sub_9eb60",
    "jmp     0x9ebc0",
    "mov     r15, qword [rbp-0x250]",
    "mov     rdx, 0x100002600",
    "jmp     0x9eed4",
    "nop     dword [rax+rax]",
    "movzx   eax, byte [rdi]",
    "mov     rdx, rdi",
    "test    al, al",
    "je      0x9ee96",
    "cmp     al, 0x20",
    "ja      0x9eec0",
    "movzx   eax, byte [r12+rdx]",
    "cmp     al, 0x20",
    "ja      0x9ec83",
    "mov     byte [rdx], 0x0",
    "call    sub_9eb60",
    "jmp     0x9ebc0",
    "mov     rcx, 0x100002600",
    "jmp     0x9ee8c",
    "movzx   eax, byte [r15+0x1]",
    "add     r15, 0x1",
    "add     ebx, 0x1",
    "test    al, al",
    "je      0x9ebc0",
    "bt      rdx, rax",
    "jae     0x9eec0",
    "test    al, al",
    "je      0x9ebc0",
    "bt      r14, rax",
    "jb      0x9ec70",
    "cmp     al, 0x20",
    "ja      0x9ee80",
    "movsxd  r15, ebx",
    "movzx   eax, byte [rbp+r15-0x140]",
    "jmp     0x9ec5b",
    "cmp     al, 0x23",
    "je      0x9ebc0",
    "add     rdx, 0x1",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "test    al, al",
    "je      0x9ee96",
    "bt      rcx, rax",
    "jae     0x9ee80",
    "movsxd  rsi, edx",
    "mov     edi, edx",
    "mov     ebx, edx",
    "add     rsi, r12",
    "mov     rcx, rsi",
    "jmp     0x9ecb7",
    "cmp     al, 0x20",
    "ja      0x9eca8",
    "movzx   eax, byte [rcx+0x1]",
    "add     rcx, 0x1",
    "add     ebx, 0x1",
    "test    al, al",
    "je      0x9ece0",
    "bt      r14, rax",
    "jae     0x9eca8",
    "cmp     edi, ebx",
    "je      0x9ebc0",
    "cmp     ebx, edi",
    "jne     0x9ece8",
    "mov     r15d, ebx",
    "mov     ecx, 0x100",
    "sub     r15d, edi",
    "mov     rdi, qword [rbp-0x248]",
    "movsxd  r15, r15d",
    "mov     rdx, r15",
    "call    __strncpy_chk",
    "mov     esi, dword [rel data_166efc]",
    "mov     eax, dword [rel data_168c0c]",
    "mov     byte [rbp+r15-0x240], 0x0",
    "lea     edx, [rsi+0x1]",
    "cmp     edx, eax",
    "jge     0x9edb0",
    "movsxd  r15, ebx",
    "cmp     byte [rbp+r15-0x140], 0x0",
    "jne     0x9ec68",
    "cdq     ",
    "lea     r15d, [rax+0x20]",
    "mov     rdi, qword [rel data_166f00]",
    "shr     edx, 0x1b",
    "add     eax, edx",
    "and     eax, 0x1f",
    "sub     eax, edx",
    "sub     r15d, eax",
    "mov     dword [rel data_168c0c], r15d",
    "movsxd  r15, r15d",
    "shl     r15, 0x3",
    "test    rdi, rdi",
    "je      0x9ee2a",
    "mov     rdi, qword [rbp-0x248]",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x9ef2b",
    "mov     rdx, r15",
    "jmp     0x9ec74",
    "jmp     0x9ebc0",
    "mov     rdi, r15",
    "call    malloc",
    "jmp     0x9ede4",
    "mov     rsi, r15",
    "call    realloc",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "call    dcgettext",
    "mov     rdx, r13",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "movsxd  r15, dword [rel data_166efc]",
    "mov     r10, qword [rel data_166f00]",
    "mov     rcx, r13",
    "mov     rdx, r13",
    "mov     rsi, qword [rbp-0x248]",
    "lea     r11, [r15*8]",
    "lea     eax, [r15+0x1]",
    "mov     qword [rbp-0x258], r10",
    "mov     qword [rbp-0x250], r11",
    "mov     dword [rel data_166efc], eax",
    "call    __memcpy_chk",
    "mov     r10, qword [rbp-0x258]",
    "mov     r11, qword [rbp-0x250]",
    "mov     qword [r10+r15*8], rax",
    "mov     qword [r10+r11+0x8], 0x0",
    "jmp     0x9ecc5",
    "test    rax, rax",
    "je      0x9ef04",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     qword [rel data_166f00], rax",
    "jmp     0x9ed25"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}