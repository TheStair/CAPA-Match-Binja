{
  "address": "0xae3f0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xae431",
    "lea     rdi, [rel data_11f2f1]  {\"FUNCNAME\"}",
    "call    find_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xae453",
    "mov     rax, qword [rdi+0x8]",
    "test    rax, rax",
    "je      0xae431",
    "lea     rdi, [rel data_11f2fa]  {\"BASH_SOURCE\"}",
    "call    find_variable",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xae471",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0xae4d8",
    "mov     rdi, qword [rax]",
    "cmp     byte [rdi], 0x2d",
    "je      0xae4e0",
    "lea     rdi, [rel data_11f306]  {\"BASH_LINENO\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0xae4a8",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0xae4d0",
    "xor     r12d, r12d",
    "jmp     0xae453",
    "mov     r12, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rel 0x1210f5]  {\"--help\"}",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xae431",
    "mov     eax, 0x1",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0xae4a8",
    "xor     ebx, ebx",
    "jmp     0xae471",
    "mov     rbx, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "call    builtin_help",
    "jmp     0xae54f",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x18",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     r14, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    r14, r14",
    "je      0xae4a8",
    "mov     eax, 0x102",
    "jmp     0xae4ad",
    "cmp     qword [r14+0x8], 0x0",
    "je      0xae4a8",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xae668",
    "test    rbx, rbx",
    "je      0xae4a8",
    "cmp     qword [rbx+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "jne     0xae500",
    "lea     r15, [rel loptend]",
    "lea     rax, [rel lcurrent]",
    "lea     rsi, [rel data_122e02]",
    "mov     rdi, r13",
    "mov     qword [rel data_168d30], 0x0",
    "mov     qword [r15], 0x0",
    "mov     qword [rax], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xae560",
    "nop     dword [rax]",
    "mov     r13, qword [r15]",
    "test    r13, r13",
    "je      0xae608",
    "cmp     eax, 0xffffff9d",
    "je      0xae4f4",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    array_reference",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "mov     r12, rax",
    "call    array_reference",
    "lea     rsi, [rel data_1216bc[8]]  {\"%s %s\\n\"}",
    "mov     edi, 0x2",
    "mov     rcx, rax",
    "lea     rax, [rel data_1210f0]  {\"NULL\"}",
    "test    rcx, rcx",
    "cmove   rcx, rax",
    "test    r12, r12",
    "cmove   r12, rax",
    "xor     eax, eax",
    "mov     rdx, r12",
    "call    __printf_chk",
    "xor     eax, eax",
    "jmp     0xae4ad",
    "test    r12, r12",
    "je      0xae4a8",
    "call    builtin_usage",
    "cmp     qword [r12+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "je      0xae4a8",
    "mov     rax, qword [r13+0x8]",
    "lea     rsi, [rbp-0x40]",
    "mov     rdi, qword [rax]",
    "call    legal_number",
    "test    eax, eax",
    "je      0xae657",
    "mov     rax, qword [r13+0x8]",
    "mov     rdi, qword [rax]",
    "call    sh_invalidnum",
    "jmp     0xae54a",
    "mov     r13, qword [rbp-0x40]",
    "mov     rdi, r14",
    "mov     rsi, r13",
    "add     r13, 0x1",
    "call    array_reference",
    "mov     rdi, rbx",
    "mov     rsi, r13",
    "mov     r14, rax",
    "call    array_reference",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "mov     rbx, rax",
    "call    array_reference",
    "test    r14, r14",
    "mov     rcx, rax",
    "sete    al",
    "test    rbx, rbx",
    "sete    dl",
    "or      al, dl",
    "jne     0xae4a8",
    "test    rcx, rcx",
    "je      0xae4a8",
    "mov     r8, rbx",
    "mov     rdx, r14",
    "lea     rsi, [rel data_1210fc]  {\"%s %s %s\\n\"}",
    "xor     eax, eax",
    "mov     edi, 0x2",
    "call    __printf_chk",
    "xor     eax, eax",
    "jmp     0xae4ad"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}