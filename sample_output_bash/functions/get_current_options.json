{
  "address": "0xbcc90",
  "rules": [
    "decrypt data using TEA/e3455f541322464e87e33d73effdac9c/1ab3f365715b4aafbc5c343f04b2711f",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "encrypt data using XXTEA/c3f2a9482f0d43a8bf071fa39e1b4168/481b6ec2656e407ab150ed0bda08a037",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using TEA/f68c13fdd9924dacbb04fb3766fcc8ea/e4e2447ff58f442591f5a975122a3a44",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     edi, 0x22",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xbcd9a",
    "mov     esi, 0x22",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel o_options]",
    "mov     r13, rbx",
    "xor     r14d, r14d  {0x0}",
    "lea     rdi, [rel data_11f68a]  {\"allexport\"}",
    "lea     r12, [rax+0x8]  {data_155a08}",
    "jmp     0xbccf9",
    "mov     esi, dword [r12]",
    "test    esi, esi",
    "je      0xbccd0",
    "mov     rax, qword [r12+0x18]",
    "test    rax, rax",
    "je      0xbcd48",
    "lea     rdi, [rel shell_flags]",
    "xor     ecx, ecx  {0x0}",
    "mov     eax, 0x61",
    "lea     rdx, [rdi+0x10]  {data_1558b0}",
    "jmp     0xbcd2a",
    "mov     rax, qword [r12+0x8]",
    "movzx   eax, byte [rax]",
    "jmp     0xbccdc",
    "call    rax",
    "cmp     esi, eax",
    "jne     0xbcd18",
    "mov     byte [r13], al",
    "movsxd  rdx, eax",
    "lea     rcx, [rel interactive_comments]",
    "xor     eax, eax  {0x0}",
    "lea     rsi, [rel data_156600]",
    "lea     rdi, [rbx+rdx]",
    "nop     ",
    "mov     r14d, eax",
    "movsx   eax, byte [rdx]",
    "add     rdx, 0x10",
    "add     ecx, 0x1",
    "test    al, al",
    "je      0xbcdb2",
    "movsxd  rcx, ecx",
    "shl     rcx, 0x4",
    "mov     rax, qword [rdi+rcx+0x8]",
    "mov     eax, dword [rax]",
    "mov     byte [r13], al",
    "jmp     0xbcce0",
    "mov     edx, dword [rcx]",
    "mov     byte [rdi+rax], dl",
    "add     rax, 0x1",
    "mov     rcx, qword [rsi+rax*8]",
    "test    rcx, rcx",
    "jne     0xbcd70",
    "add     r14d, 0x6",
    "mov     rax, rbx",
    "movsxd  r14, r14d",
    "mov     byte [rbx+r14], 0x0",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "jmp     0x32432",
    "mov     rdi, qword [r12+0x20]",
    "lea     eax, [r14+0x1]",
    "add     r12, 0x28",
    "add     r13, 0x1",
    "test    rdi, rdi",
    "je      0xbcd58",
    "mov     eax, dword [0x0]  {0x464c457f}",
    "ud2     ",
    "{ Does not return }"
  ],
  "high level IL": [
    "char* result = malloc(0x22)",
    "if (result == 0)",
    "sub_a7f00()",
    "noreturn",
    "char* result_1 = result",
    "int32_t r14 = 0",
    "void* const r12 = &data_155a08",
    "while (true)",
    "int32_t rsi_1 = *r12",
    "if (rsi_1 == 0)",
    "int64_t rax = *(r12 + 0x18)",
    "char rax_1",
    "if (rax == 0)",
    "rax_1 = **(r12 + 8)",
    "rax_1 = rax()",
    "*result_1 = rax_1",
    "int32_t rcx_1 = 0",
    "int32_t rax_3 = 0x61",
    "void* const rdx_1 = &data_1558b0",
    "while (rsi_1 != rax_3)",
    "rax_3 = sx.d(*rdx_1)",
    "rdx_1 += 0x10",
    "rcx_1 += 1",
    "if (rax_3.b == 0)",
    "trap(6)",
    "*result_1 = (*(&data_1558a8)[sx.q(rcx_1) * 2]).b",
    "int64_t rdi_1 = *(r12 + 0x20)",
    "r12 += 0x28",
    "result_1 = &result_1[1]",
    "if (rdi_1 == 0)",
    "break",
    "r14 += 1",
    "uint32_t* i = &interactive_comments",
    "int64_t rax_7 = 0",
    "result[sx.q(r14 + 1) + rax_7] = (*i).b",
    "rax_7 += 1",
    "i = (&data_156600)[rax_7]",
    "do while (i != 0)",
    "result[sx.q(r14 + 6)] = 0",
    "return result"
  ]
}