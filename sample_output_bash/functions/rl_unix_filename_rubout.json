{
  "address": "0xfd900",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "lea     rbx, [rel rl_point]",
    "mov     r9d, dword [rbx]",
    "test    r9d, r9d",
    "je      0xfdab6",
    "call    rl_ding",
    "pop     rbx",
    "xor     eax, eax",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "mov     eax, 0x1",
    "test    edi, edi",
    "mov     esi, r9d",
    "mov     r8, 0x800100000200",
    "cmovle  edi, eax",
    "lea     rax, [rel rl_line_buffer]",
    "mov     rcx, qword [rax]",
    "lea     r10d, [rdi-0x1]",
    "nop     dword [rax+rax]",
    "cmp     eax, 0x20",
    "je      0xfd960",
    "jmp     0xfdad8",
    "mov     dword [rbx], edx",
    "mov     esi, edx",
    "movsx   eax, byte [rcx+rdx-0x1]",
    "test    edx, edx",
    "je      0xfda10",
    "cmp     eax, 0x9",
    "je      0xfd960",
    "xor     esi, esi",
    "jmp     0xfd9df",
    "cmp     eax, 0x2f",
    "je      0xfdacb",
    "sub     rdx, 0x1",
    "cmp     eax, 0x2f",
    "jne     0xfda19",
    "sub     r10d, 0x1",
    "jae     0xfd948",
    "movsxd  rdi, dword [rbx]",
    "mov     eax, 0x2f",
    "jmp     0xfda1c",
    "movsxd  rdi, dword [rbx]",
    "lea     edx, [rsi-0x1]",
    "test    edx, edx",
    "jle     0xfdac2",
    "movsxd  rax, esi",
    "lea     rdx, [rax-0x1]",
    "movsx   eax, byte [rcx+rax-0x1]",
    "test    esi, esi",
    "jne     0xfd975",
    "mov     edi, r9d",
    "call    rl_kill_text",
    "lea     rax, [rel rl_editing_mode]",
    "cmp     dword [rax], 0x1",
    "je      0xfdaa4",
    "test    edi, edi",
    "je      0xfdad8",
    "lea     esi, [rdi-0x1]",
    "sub     rdi, 0x2",
    "movsxd  rdx, esi",
    "mov     esi, esi",
    "sub     rdi, rsi",
    "nop     dword [rax+rax]",
    "jne     0xfdacb",
    "sub     esi, 0x2",
    "movsxd  rsi, esi",
    "nop     dword [rax]",
    "mov     edx, dword [rbx]",
    "lea     rax, [rel rl_mark]",
    "mov     dword [rax], edx",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "pop     rbx",
    "xor     eax, eax",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "mov     esi, dword [rbx]",
    "jmp     0xfda55",
    "bt      r8, rax",
    "jae     0xfdaa0",
    "xor     esi, esi",
    "jmp     0xfd9dd",
    "movsx   edx, byte [rcx+rsi]",
    "test    esi, esi",
    "mov     r12, rsi",
    "setg    r11b",
    "cmp     edx, 0x2f",
    "sete    dil",
    "sub     rsi, 0x1",
    "test    r11b, dil",
    "jne     0xfd9a0",
    "cmp     edx, 0x20",
    "sete    sil",
    "cmp     edx, 0x9",
    "sete    dl",
    "or      edx, esi",
    "movzx   esi, dl",
    "test    r12d, r12d",
    "je      0xfd9dd",
    "test    esi, esi",
    "je      0xfdad8",
    "mov     dword [rbx], edx",
    "mov     esi, edx",
    "movsx   eax, byte [rcx+rdx-0x1]",
    "sub     rdx, 0x1",
    "cmp     rdi, rdx",
    "jne     0xfda38",
    "mov     dword [rbx], esi",
    "lea     esi, [r12+0x1]",
    "test    dl, dl",
    "je      0xfda19",
    "lea     r11d, [rsi-0x1]",
    "movsxd  rdi, esi",
    "movsxd  rdx, r11d",
    "sub     rdi, 0x2",
    "mov     r11d, r11d",
    "sub     rdi, r11",
    "jmp     0xfda86",
    "cmp     eax, 0x2f",
    "ja      0xfdaa0",
    "cmp     eax, 0x2f",
    "ja      0xfda70",
    "mov     dword [rbx], edx",
    "mov     esi, edx",
    "movsx   eax, byte [rcx+rdx-0x1]",
    "sub     rdx, 0x1",
    "cmp     rdi, rdx",
    "je      0xfd9df",
    "bt      r8, rax",
    "jae     0xfda70",
    "mov     esi, dword [rbx]",
    "jmp     0xfd9df"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}