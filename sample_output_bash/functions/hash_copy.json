{
  "address": "0x8c890",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x38",
    "mov     qword [rbp-0x48], rdi",
    "test    rdi, rdi",
    "je      0x8ca3c",
    "mov     qword [rbp-0x60], 0x0",
    "jmp     0x8c9ef",
    "mov     rbx, rdi",
    "mov     edi, dword [rdi+0x8]",
    "mov     r13, rsi",
    "call    hash_create",
    "mov     qword [rbp-0x60], rax",
    "mov     eax, dword [rbx+0x8]",
    "test    eax, eax",
    "jle     0x8c9e1",
    "mov     rax, qword [rbp-0x60]",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbp-0x48]",
    "mov     rsi, qword [rbp-0x60]",
    "mov     eax, dword [rax+0xc]",
    "mov     dword [rsi+0xc], eax",
    "mov     qword [rbp-0x40], 0x0",
    "nop     word [rax+rax]",
    "mov     qword [rbp-0x38], 0x0",
    "nop     word [rax+rax]",
    "mov     edi, 0x20",
    "call    malloc",
    "mov     qword [rbp-0x38], rax",
    "test    rax, rax",
    "je      0x8ca46",
    "mov     rax, qword [rbp-0x48]",
    "mov     rdx, qword [rbp-0x40]",
    "mov     rax, qword [rax]",
    "mov     r14, qword [rax+rdx*8]",
    "mov     rax, qword [rbp-0x60]",
    "mov     rax, qword [rax]",
    "lea     rax, [rax+rdx*8]",
    "mov     qword [rbp-0x50], rax",
    "test    r14, r14",
    "je      0x8c9b2",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edx, 0x20",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rbx, qword [rbp-0x38]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "call    dcgettext",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rcx, r15",
    "mov     rdx, r15",
    "mov     rsi, r12",
    "call    __memcpy_chk",
    "mov     r15, qword [r14+0x10]",
    "mov     qword [rbx+0x8], rax",
    "test    r15, r15",
    "je      0x8c973",
    "mov     eax, dword [r14+0x18]",
    "mov     qword [rbx+0x10], r15",
    "mov     dword [rbx+0x18], eax",
    "mov     eax, dword [r14+0x1c]",
    "mov     qword [rbx], 0x0",
    "mov     r14, qword [r14]",
    "mov     dword [rbx+0x1c], eax",
    "test    r14, r14",
    "je      0x8c9c0",
    "mov     rdi, r15",
    "test    r13, r13",
    "je      0x8ca08",
    "mov     rax, qword [rbp-0x50]",
    "mov     rsi, qword [rbp-0x38]",
    "add     qword [rbp-0x40], 0x1",
    "mov     qword [rax], rsi",
    "mov     rsi, qword [rbp-0x48]",
    "mov     rax, qword [rbp-0x40]",
    "cmp     dword [rsi+0x8], eax",
    "jg      0x8c8e0",
    "mov     edi, 0x20",
    "call    malloc",
    "test    rax, rax",
    "je      0x8ca46",
    "call    strlen",
    "lea     rcx, [rax+0x1]",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x58], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x58]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0x8ca94",
    "call    r13",
    "mov     r15, rax",
    "mov     qword [rbx], rax",
    "mov     rbx, rax",
    "jmp     0x8c922",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "mov     qword [rbp-0x38], rcx",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x38]",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rsi, r15",
    "mov     rdx, rcx",
    "call    __memcpy_chk",
    "mov     r15, rax",
    "jmp     0x8c973",
    "mov     r12, qword [r14+0x8]",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r15, [rax+0x1]",
    "mov     rdi, r15",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x8ca6f"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}