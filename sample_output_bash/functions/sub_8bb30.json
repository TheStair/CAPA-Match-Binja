{
  "address": "0x8bb30",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "hash data using djb2/9bc6b91561f04ebca409510ba6653174",
    "check if file exists/e9b7e5653fc74459b4a2998e8ac0c76d/291bac4dc2fd4faeafd7747b61108764",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "allocate or change RW memory/877cb0b79bfa432e8e79b8bd20fa354f",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "contain loop",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828",
    "hash data using jshash/495bfd597bd14a45826758e92f604bf6",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "mov     rbx, rsi",
    "sub     rsp, 0x98",
    "mov     qword [rbp-0x60], rcx",
    "mov     qword [rbp-0x68], r8",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0x8be58",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8c3cf",
    "mov     rdi, r12",
    "call    mbsmbchar",
    "test    rax, rax",
    "je      0x8be40",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     r8, qword [rbp-0x68]",
    "mov     rcx, qword [rbp-0x60]",
    "mov     edx, r13d",
    "mov     rsi, rbx",
    "add     rsp, 0x98",
    "mov     rdi, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sub_77fa0",
    "mov     rdi, rbx",
    "call    mbsmbchar",
    "test    rax, rax",
    "jne     0x8bb88",
    "test    rbx, rbx",
    "je      0x8bf60",
    "nop     dword [rax]",
    "mov     qword [rbp-0x48], 0x0",
    "jmp     0x8bdf9",
    "xor     eax, eax",
    "lea     rdi, [rbp-0x48]",
    "mov     rsi, rbx",
    "call    sub_d4050",
    "cmp     rax, 0xffffffffffffffff",
    "je      0x8bdf9",
    "mov     r8, qword [rbp-0x68]",
    "mov     rcx, qword [rbp-0x60]",
    "mov     rsi, rbx",
    "mov     edx, r13d",
    "mov     rdi, r12",
    "call    sub_77fa0",
    "mov     ebx, eax",
    "lea     rsi, [rbp-0x50]",
    "lea     rdi, [rbp-0x40]",
    "mov     rdx, r12",
    "call    xdupmbstowcs",
    "mov     qword [rbp-0x70], rax",
    "cmp     rax, 0xffffffffffffffff",
    "je      0x8bdf0",
    "add     rsp, 0x98",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbp-0x48]",
    "call    free",
    "mov     r15, qword [rbp-0x48]",
    "mov     rax, qword [rbp-0x50]",
    "mov     r12d, dword [r15]",
    "mov     qword [rbp-0x98], rax",
    "mov     rax, qword [rbp-0x40]",
    "lea     ecx, [r12-0x2a]",
    "mov     qword [rbp-0x58], rax",
    "cmp     ecx, 0x32",
    "jbe     0x8be98",
    "lea     rbx, [rel extended_glob]",
    "mov     rdi, r15",
    "mov     rax, 0xfff9ffffffdffffe",
    "sar     rax, cl",
    "mov     r14d, dword [rbx]",
    "and     eax, 0x1",
    "mov     dword [rbp-0x88], eax",
    "call    wcslen",
    "test    r14d, r14d",
    "je      0x8bed0",
    "lea     rbx, [rel extended_glob]",
    "mov     rdi, r15",
    "call    wcslen",
    "mov     dword [rbp-0x88], 0x1",
    "mov     r14d, dword [rbx]",
    "test    r14d, r14d",
    "je      0x8bc20",
    "cmp     r12d, 0x2a",
    "jne     0x8bc20",
    "cmp     dword [r15+0x4], 0x28",
    "je      0x8c3b0",
    "lea     r12, [rax*4+0xc]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x8c3d4",
    "cmp     dword [r15+0x4], 0x28",
    "je      0x8c320",
    "cmp     dword [r15+rax*4-0x4], 0x2a",
    "jne     0x8bc20",
    "cmp     r12d, 0x2a",
    "je      0x8c3c0",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, dword [r15]",
    "mov     esi, dword [rbx]",
    "cmp     edx, 0x2a",
    "je      0x8bfb8",
    "sub     r12d, 0x21",
    "cmp     r12d, 0x1f",
    "ja      0x8bc20",
    "nop     dword [rax+rax]",
    "mov     rsi, qword [rbp-0x58]",
    "test    rsi, rsi",
    "jne     0x8c0b0",
    "mov     dword [rbp-0x88], 0x0",
    "jmp     0x8bc20",
    "cmp     r12d, 0x3f",
    "jne     0x8c320",
    "cmp     dword [r15+0x4], 0x28",
    "mov     rcx, r14",
    "jne     0x8bc60",
    "mov     dword [r14], 0x2a",
    "mov     edx, dword [r15]",
    "lea     rcx, [r14+0x4]",
    "test    edx, edx",
    "je      0x8c310",
    "mov     edx, 0x80000401",
    "bt      rdx, r12",
    "setb    dl",
    "test    dl, dl",
    "mov     edx, 0x0",
    "cmove   edx, dword [rbp-0x88]",
    "mov     dword [rbp-0x88], edx",
    "jmp     0x8bc20",
    "lea     r12, [rel match_ignore_case]",
    "xor     edx, edx",
    "mov     rdi, r15",
    "mov     ecx, dword [r12]",
    "test    ecx, ecx",
    "setne   dl",
    "xor     eax, eax",
    "shl     edx, 0x4",
    "test    r14d, r14d",
    "setne   al",
    "shl     eax, 0x5",
    "or      edx, eax",
    "call    internal_wstrmatch",
    "jmp     0x8bce6",
    "mov     r12, r15",
    "xor     ebx, ebx",
    "jmp     0x8bf26",
    "mov     rax, r15",
    "nop     dword [rax+rax]",
    "test    esi, esi",
    "je      0x8bc60",
    "mov     rax, r15",
    "jmp     0x8bc78",
    "cmp     eax, 0x1",
    "je      0x8bf20",
    "mov     rdi, r12",
    "call    free",
    "mov     rdi, qword [rbp-0x40]",
    "call    free",
    "mov     rdi, qword [rbp-0x50]",
    "call    free",
    "jmp     0x8be11",
    "add     rax, 0x4",
    "mov     dword [rcx], edx",
    "add     rcx, 0x4",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x8bc68",
    "cmp     dword [rax-0x4], 0x2a",
    "je      0x8bf70",
    "jmp     0x8bc4a",
    "mov     r12, qword [rbp-0x48]",
    "xor     ebx, ebx",
    "mov     r9d, dword [r15]",
    "test    r9d, r9d",
    "je      0x8bfd8",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x8c3cf",
    "cmp     dword [rax-0x8], 0x5c",
    "mov     rdi, rcx",
    "jne     0x8bc8c",
    "mov     dword [rcx], 0x2a",
    "lea     rdi, [rcx+0x4]",
    "mov     rax, qword [rbp-0x70]",
    "mov     r8d, eax",
    "test    eax, eax",
    "js      0x8bf20",
    "mov     rdi, r15",
    "xor     eax, eax",
    "call    sub_d4e10",
    "mov     r9d, eax",
    "mov     rax, qword [rbp-0x70]",
    "mov     r8d, eax",
    "cmp     eax, r9d",
    "jl      0x8bf20",
    "lea     r12, [rel match_ignore_case]",
    "cmp     qword [rbp-0x58], 0x0",
    "mov     dword [rdi], 0x0",
    "mov     eax, dword [r12]",
    "je      0x8bf48",
    "sub     rax, 0xc",
    "mov     edx, 0x1",
    "cmp     rax, r15",
    "jae     0x8bf98",
    "mov     r12, qword [rbp-0x48]",
    "xor     ebx, ebx",
    "cmp     r15, r14",
    "je      0x8bf26",
    "test    r14, r14",
    "je      0x8bf48",
    "cmp     r13d, 0x1",
    "je      0x8c0df",
    "cmp     r13d, 0x1",
    "je      0x8c368",
    "sub     rax, 0x4",
    "cmp     dword [rax+0x4], 0x5c",
    "je      0x8bf90",
    "jmp     0x8bc82",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x8bf26",
    "xor     edx, edx",
    "test    eax, eax",
    "mov     rdi, r14",
    "setne   dl",
    "xor     eax, eax",
    "shl     edx, 0x4",
    "test    esi, esi",
    "mov     rsi, qword [rbp-0x58]",
    "setne   al",
    "shl     eax, 0x5",
    "or      edx, eax",
    "call    internal_wstrmatch",
    "cmp     r15, r14",
    "je      0x8bce6",
    "mov     eax, dword [r12]",
    "xor     edx, edx",
    "mov     rsi, qword [rbp-0x58]",
    "mov     rdi, r15",
    "mov     dword [rbp-0x70], r9d",
    "test    eax, eax",
    "setne   dl",
    "shl     edx, 0x4",
    "call    match_pattern_wchar",
    "test    eax, eax",
    "je      0x8bf20",
    "cmp     r13d, 0x2",
    "jne     0x8bd2c",
    "mov     r10d, dword [r12]",
    "xor     edx, edx",
    "mov     rsi, qword [rbp-0x58]",
    "mov     rdi, r15",
    "mov     dword [rbp-0x78], r9d",
    "test    r10d, r10d",
    "mov     dword [rbp-0x70], eax",
    "setne   dl",
    "shl     edx, 0x4",
    "call    match_pattern_wchar",
    "test    eax, eax",
    "je      0x8bf20",
    "cmp     r13d, 0x2",
    "je      0x8c353",
    "xor     edx, 0x1",
    "cmp     rax, r15",
    "jb      0x8bfa2",
    "mov     rdi, rcx",
    "test    edx, edx",
    "je      0x8bc8c",
    "mov     rdi, r14",
    "mov     dword [rbp-0x78], eax",
    "call    free",
    "mov     eax, dword [rbp-0x78]",
    "mov     r9d, dword [rbp-0x70]",
    "xor     r8d, r8d",
    "test    r13d, r13d",
    "jne     0x8bf20",
    "mov     rax, qword [rbp-0x70]",
    "mov     r13d, eax",
    "sub     r13d, r9d",
    "movsxd  r13, r13d",
    "mov     r14, r13",
    "cmp     rax, r13",
    "jb      0x8bf20",
    "mov     r9d, dword [rbp-0x78]",
    "mov     r8d, dword [rbp-0x70]",
    "cmp     r9d, 0xffffffff",
    "cmovne  r8d, r9d",
    "test    r8d, r8d",
    "jns     0x8c10c",
    "xor     r14d, r14d",
    "xor     r13d, r13d",
    "cmp     r9d, 0xffffffff",
    "je      0x8c014",
    "jmp     0x8bc82",
    "mov     r14d, dword [r15]",
    "mov     dword [r15], 0x0",
    "xor     edx, edx",
    "mov     r8d, dword [r13]",
    "mov     r9d, dword [r12]",
    "mov     rsi, qword [rbp-0x58]",
    "mov     rdi, qword [rbp-0x70]",
    "test    r8d, r8d",
    "setne   dl",
    "xor     eax, eax",
    "shl     edx, 0x5",
    "test    r9d, r9d",
    "setne   al",
    "shl     eax, 0x4",
    "or      edx, eax",
    "call    internal_wstrmatch",
    "test    eax, eax",
    "jne     0x8c130",
    "mov     qword [rbp-0x80], r15",
    "xor     r14d, r14d",
    "mov     dword [rbp-0xac], r8d",
    "mov     dword [rbp-0x84], r9d",
    "mov     qword [rbp-0x78], r12",
    "mov     qword [rbp-0xb8], rbx",
    "add     r13, 0x1",
    "mov     qword [rbp-0x78], r15",
    "mov     r15, r13",
    "mov     r13, rbx",
    "mov     rbx, r14",
    "mov     r14d, r9d",
    "jmp     0x8c04e",
    "mov     rax, qword [rbp-0x58]",
    "movsxd  r14, r8d",
    "mov     qword [rbp-0x70], r15",
    "mov     dword [rbp-0x78], r9d",
    "lea     r13, [rax+r14*4]",
    "mov     r15, r13",
    "mov     r13, rbx",
    "mov     rbx, r14",
    "jmp     0x8c14e",
    "jmp     0x8bf20",
    "jmp     0x8bffb",
    "cmp     dword [rbp-0x78], 0xffffffff",
    "mov     dword [r15], r14d",
    "jne     0x8bf20",
    "mov     ecx, r14d",
    "mov     r14, rbx",
    "mov     rsi, qword [rbp-0x60]",
    "mov     r12, qword [rbp-0x48]",
    "mov     rbx, qword [rbp-0x98]",
    "mov     dword [r15], ecx",
    "mov     rax, qword [rbx]",
    "mov     qword [rsi], rax",
    "mov     rax, qword [rbx+r14*8]",
    "mov     rbx, qword [rbp-0x68]",
    "mov     qword [rbx], rax",
    "mov     ebx, 0x1",
    "jmp     0x8bf26",
    "mov     r15, qword [rbp-0x58]",
    "mov     r13, qword [rbp-0x78]",
    "mov     r15d, dword [rbx]",
    "mov     rbx, qword [rbp-0x58]",
    "mov     r13, r14",
    "mov     r14d, dword [rbx+r13*4]",
    "mov     ebx, r15d",
    "test    eax, eax",
    "je      0x8bdb7",
    "mov     esi, dword [r13]",
    "mov     edi, dword [r12]",
    "xor     edx, edx",
    "test    esi, esi",
    "setne   dl",
    "xor     eax, eax",
    "shl     edx, 0x5",
    "test    edi, edi",
    "mov     rdi, qword [rbp-0x78]",
    "setne   al",
    "shl     eax, 0x4",
    "or      edx, eax",
    "mov     rax, qword [rbp-0x58]",
    "lea     rsi, [rax+rbx*4]",
    "call    internal_wstrmatch",
    "test    eax, eax",
    "jne     0x8c030",
    "sub     rbx, 0x1",
    "sub     r15, 0x4",
    "cmp     ebx, 0xffffffff",
    "je      0x8bf20",
    "mov     rdi, r14",
    "jmp     0x8c206",
    "lea     rdx, [r14+0x1]",
    "cmp     qword [rbp-0x70], r14",
    "je      0x8bf20",
    "cmp     ebx, r14d",
    "je      0x8c200",
    "mov     edi, r15d",
    "call    iswupper",
    "test    eax, eax",
    "je      0x8bda0",
    "cmp     r14d, 0xffffffff",
    "jne     0x8bf20",
    "mov     rsi, qword [rbp-0x98]",
    "mov     r12, qword [rbp-0x48]",
    "mov     rax, qword [rsi+rbx*8]",
    "mov     rbx, qword [rbp-0x60]",
    "mov     qword [rbx], rax",
    "mov     rax, qword [rbp-0x70]",
    "mov     ebx, 0x1",
    "mov     rax, qword [rsi+rax*8]",
    "mov     rsi, qword [rbp-0x68]",
    "mov     qword [rsi], rax",
    "jmp     0x8bf26",
    "mov     ebx, dword [rbp-0x84]",
    "lea     eax, [rbx+r14]",
    "cmp     ebx, 0xffffffff",
    "cmove   eax, dword [rbp-0xac]",
    "movsxd  r13, eax",
    "cmp     qword [rbp-0x70], r13",
    "jb      0x8bf20",
    "mov     eax, dword [r13]",
    "lea     r12, [r15+rdx*4]",
    "mov     r14, rdx",
    "jmp     0x8c1c8",
    "mov     r14, r13",
    "mov     rdi, r13",
    "lea     rcx, [r13+0x1]",
    "cmp     qword [rbp-0x70], r13",
    "je      0x8bf20",
    "mov     edi, r14d",
    "call    iswupper",
    "test    eax, eax",
    "je      0x8bdb7",
    "mov     edi, r15d",
    "call    towlower",
    "mov     ebx, eax",
    "lea     rax, [r15+0x1]",
    "mov     rbx, r15",
    "cmp     qword [rbp-0x70], r15",
    "jb      0x8bf20",
    "mov     esi, r14d",
    "cmp     eax, r14d",
    "jl      0x8bf0e",
    "xor     edx, edx",
    "test    eax, eax",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "setne   dl",
    "shl     edx, 0x4",
    "call    match_pattern_wchar",
    "test    eax, eax",
    "jne     0x8c308",
    "mov     rbx, qword [rbp-0x58]",
    "mov     rax, qword [rbp-0x78]",
    "mov     r13, rcx",
    "lea     r12, [rbx+rcx*4]",
    "mov     eax, dword [rax]",
    "mov     rbx, qword [rbp-0x58]",
    "mov     r14d, dword [rbx+r13*4]",
    "mov     ebx, r15d",
    "test    eax, eax",
    "je      0x8bdb7",
    "mov     edi, r14d",
    "call    towlower",
    "mov     r14d, eax",
    "mov     r15, rax",
    "add     r14, 0x1",
    "cmp     qword [rbp-0x70], rdi",
    "jne     0x8bd55",
    "mov     rax, qword [rbp-0x58]",
    "mov     qword [rbp-0xa0], r14",
    "mov     r14, r13",
    "mov     qword [rbp-0x90], r12",
    "lea     r15, [rax+r13*4]",
    "mov     qword [rbp-0xa8], rdi",
    "mov     r13, qword [rbp-0xb8]",
    "mov     r12, r15",
    "mov     r15d, esi",
    "jmp     0x8c28a",
    "jmp     0x8bd8a",
    "mov     rbx, qword [rbp-0x58]",
    "mov     rax, qword [rbp-0x78]",
    "mov     edx, dword [rbp-0x88]",
    "lea     r12, [rbx+r14*4]",
    "mov     eax, dword [rax]",
    "mov     rbx, qword [rbp-0x80]",
    "test    edx, edx",
    "je      0x8c1c0",
    "nop     dword [rax]",
    "mov     ebx, dword [r12]",
    "mov     rax, qword [rbp-0x78]",
    "xor     edx, edx",
    "mov     dword [r12], 0x0",
    "mov     r11d, dword [r13]",
    "mov     rsi, qword [rbp-0x90]",
    "mov     eax, dword [rax]",
    "mov     rdi, qword [rbp-0x80]",
    "test    r11d, r11d",
    "setne   dl",
    "shl     edx, 0x5",
    "test    eax, eax",
    "setne   al",
    "movzx   eax, al",
    "shl     eax, 0x4",
    "or      edx, eax",
    "call    internal_wstrmatch",
    "test    eax, eax",
    "jne     0x8c268",
    "cmp     dword [rbp-0x84], 0xffffffff",
    "mov     dword [r12], ebx",
    "jne     0x8bf00",
    "mov     r11, qword [rbp-0xa0]",
    "mov     rsi, qword [rbp-0x60]",
    "mov     dword [r12], ebx",
    "mov     rbx, qword [rbp-0x98]",
    "mov     r12, qword [rbp-0x48]",
    "mov     rax, qword [rbx+r11*8]",
    "mov     qword [rsi], rax",
    "mov     rax, qword [rbx+r14*8]",
    "mov     rbx, qword [rbp-0x68]",
    "mov     qword [rbx], rax",
    "mov     ebx, 0x1",
    "jmp     0x8bf26",
    "mov     r14, qword [rbp-0xa0]",
    "mov     rdi, qword [rbp-0xa8]",
    "sub     r14, 0x1",
    "sub     r12, 0x4",
    "cmp     r15d, r14d",
    "jg      0x8bf00"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}