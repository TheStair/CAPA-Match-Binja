{
  "address": "0x79bf0",
  "rules": [
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/85d53756af1244948e9b515ea3abe5ce",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, r8",
    "push    r14",
    "mov     r14d, ecx",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12d, esi",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x68",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    r8, r8",
    "je      0x79eb8",
    "pxor    xmm0, xmm0",
    "mov     dword [rbp-0x60], 0xffff",
    "mov     rax, 0x8000000000000000",
    "mov     qword [rbp-0x58], rax",
    "movaps  xmmword [rbp-0x50], xmm0",
    "jmp     0x79c3f",
    "movdqu  xmm1, xmmword [r8]",
    "movdqu  xmm2, xmmword [r8+0x10]",
    "movaps  xmmword [rbp-0x60], xmm1",
    "movaps  xmmword [rbp-0x50], xmm2",
    "lea     rsi, [rbp-0x70]",
    "mov     rdi, rbx",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x79de0",
    "mov     rdi, qword [rbp-0x70]",
    "call    get_dollar_var_value",
    "mov     qword [rbp-0x68], rax",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x79e55",
    "test    r12d, r12d",
    "je      0x79d00",
    "xor     r12d, r12d",
    "xor     ebx, ebx",
    "cmp     byte [rax], 0x0",
    "je      0x79e04",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0x79e28",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     r15, [rax+0x2]",
    "mov     rdi, r15",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x7a2e0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7a2db",
    "xor     esi, esi",
    "call    sub_72bd0",
    "mov     rbx, rax",
    "and     r13d, 0x3",
    "jne     0x79f80",
    "mov     rdi, rbx",
    "call    find_variable",
    "test    rax, rax",
    "je      0x7a0f8",
    "mov     rdi, rbx",
    "lea     rdx, [rbp-0x68]",
    "xor     ecx, ecx",
    "xor     esi, esi",
    "call    array_variable_name",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x7a1a8",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x24",
    "lea     rdi, [r12+0x1]",
    "mov     rsi, rbx",
    "mov     qword [rbp-0x68], r12",
    "mov     dword [rbp-0x74], 0x0",
    "call    strcpy",
    "push    r14",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "push    0x0",
    "xor     ecx, ecx",
    "mov     edx, r13d",
    "lea     rsi, [rbp-0x74]",
    "mov     rdi, r12",
    "call    sub_82010",
    "and     r13d, 0x3",
    "pop     r10",
    "pop     r11",
    "mov     r14, rax",
    "jne     0x79e70",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "mov     rax, r14",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     r12d, r12d",
    "jmp     0x79e5a",
    "call    free",
    "call    sub_87450",
    "mov     rbx, rax",
    "jmp     0x79e0e",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    find_variable_last_nameref",
    "test    rax, rax",
    "je      0x79e55",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rdi, rdi",
    "je      0x79e55",
    "mov     qword [rbp-0x90], 0x0",
    "jmp     0x79d4f",
    "mov     qword [rbp-0x88], rax",
    "call    find_variable",
    "mov     rdi, qword [rbp-0x88]",
    "mov     qword [rbp-0x90], rax",
    "call    free",
    "movzx   eax, byte [rbx]",
    "cmp     al, 0x40",
    "je      0x79e7f",
    "mov     rdi, qword [rbp-0x68]",
    "call    free",
    "test    r14, r14",
    "je      0x79e55",
    "call    alloc_word_desc",
    "or      dword [rax+0x8], r12d",
    "mov     r14, rax",
    "mov     qword [rax], rbx",
    "jmp     0x79cd7",
    "mov     rdi, qword [rbp-0x68]",
    "test    rdi, rdi",
    "je      0x79e1c",
    "mov     rbx, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rbx, rbx",
    "je      0x79e55",
    "mov     eax, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     r12d, eax",
    "and     r12d, 0x1000",
    "je      0x79f90",
    "mov     rax, qword [rbp-0x68]",
    "movzx   edx, byte [rax]",
    "test    r14b, 0x8",
    "je      0x79f20",
    "and     r14d, 0x4",
    "jne     0x79ff8",
    "cmp     dl, 0x40",
    "je      0x79d6a",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x79cc5",
    "cmp     al, 0x2a",
    "jne     0x79cc5",
    "cmp     byte [rbx], 0x0",
    "je      0x79e55",
    "mov     edx, eax",
    "mov     qword [rbp-0x68], 0x0",
    "and     edx, 0x40",
    "test    r14b, 0x40",
    "je      0x7a088",
    "cmp     dl, 0x40",
    "je      0x7a1c0",
    "cmp     dl, 0x2a",
    "jne     0x79d74",
    "cmp     byte [rax+0x1], 0x5d",
    "je      0x7a048",
    "cmp     dl, 0x2a",
    "jne     0x79d74",
    "test    r14, r14",
    "je      0x79cc5",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "jne     0x79d14",
    "test    edx, edx",
    "jne     0x7a28f",
    "test    edx, edx",
    "je      0x7a250",
    "cmp     byte [rax+0x1], 0x5d",
    "jne     0x79d74",
    "cmp     dl, 0x2a",
    "jne     0x79d74",
    "lea     rcx, [rbp-0x60]",
    "cmp     byte [rax+0x1], 0x5d",
    "jne     0x79d74",
    "mov     rax, qword [rbp-0x90]",
    "lea     rcx, [rbp-0x60]",
    "test    rax, rax",
    "je      0x79d78",
    "mov     rax, qword [r14]",
    "mov     rdi, qword [rbp-0x68]",
    "test    rax, rax",
    "je      0x79ea7",
    "cmp     byte [rbx], 0x0",
    "je      0x79e55",
    "xor     edx, edx",
    "mov     rsi, rdi",
    "lea     rdi, [rel data_121b60]  {\"0\"}",
    "call    hash_search",
    "test    rax, rax",
    "je      0x79fd9",
    "test    al, 0x4",
    "je      0x7a0b0",
    "test    al, 0x4",
    "je      0x7a0b0",
    "mov     eax, dword [rdi+0xc]",
    "test    eax, eax",
    "je      0x79e55",
    "cmp     qword [rbp-0x90], 0x0",
    "je      0x79d74",
    "cmp     byte [rax+0x1], 0x5d",
    "jne     0x79d74",
    "cmp     ax, 0x1",
    "je      0x79ef0",
    "test    rbx, rbx",
    "je      0x79dbf",
    "mov     ecx, dword [rel data_1619c4]",
    "test    ecx, ecx",
    "je      0x79d74",
    "mov     edx, 0x1",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x44",
    "je      0x79d78",
    "call    free",
    "jmp     0x79cd7",
    "cmp     byte [rax], 0x7f",
    "je      0x7a2b2",
    "mov     rdi, rbx",
    "call    legal_identifier",
    "mov     r12d, eax",
    "test    eax, eax",
    "jne     0x79e55",
    "xor     ebx, ebx",
    "mov     rdi, qword [rax+0x10]",
    "jmp     0x79fd0",
    "cmp     byte [rdi], 0x0",
    "je      0x7a0bf",
    "xor     esi, esi",
    "call    array_reference",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x79e55",
    "cmp     qword [rdi+0x8], 0x0",
    "je      0x79e55",
    "mov     edx, r13d",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "call    assoc_to_string",
    "mov     qword [rbp-0x68], rax",
    "mov     rdi, rax",
    "test    r13d, r13d",
    "jne     0x79d74",
    "mov     edi, dword [rel data_1619c4]",
    "lea     rcx, [rbp-0x60]",
    "mov     edx, 0x1",
    "test    edi, edi",
    "je      0x79d7d",
    "test    rbx, rbx",
    "je      0x79dbf",
    "cmp     ax, 0x2",
    "jne     0x79dbf",
    "test    r15, r15",
    "je      0x7a0e0",
    "cmp     byte [rbx], 0x0",
    "je      0x79dac",
    "lea     rax, [rel ifs_is_null]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x79d74",
    "mov     esi, r13d",
    "mov     rdi, rbx",
    "mov     edx, 0x11",
    "or      esi, 0x1",
    "call    sub_98120",
    "mov     rbx, rax",
    "jmp     0x79d8b",
    "cmp     byte [rax+0x1], 0x0",
    "jne     0x79ea7",
    "lea     rax, [rel last_command_exit_value]",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_158490]",
    "mov     dword [rel data_158490], 0x1",
    "mov     dword [rax], 0x1",
    "call    set_pipestatus_array",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133460]  {\"%s: invalid variable name for na\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rbx",
    "lea     rbx, [rel data_1685a0]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "jmp     0x79e5a",
    "call    free",
    "jmp     0x79e5a",
    "test    rdi, rdi",
    "jne     0x7a0b0",
    "and     r14d, 0x8",
    "je      0x7a280",
    "and     r13d, 0x3",
    "jne     0x7a2ce",
    "nop     word [rax+rax]",
    "mov     edx, r13d",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "call    array_to_string",
    "mov     qword [rbp-0x68], rax",
    "mov     rdi, rax",
    "jmp     0x79fd0",
    "lea     rax, [rel ifs_is_set]",
    "mov     r9d, dword [rax]",
    "test    r9d, r9d",
    "je      0x79d74",
    "mov     rdi, rbx",
    "mov     esi, r13d",
    "call    sub_98120",
    "mov     rbx, rax",
    "lea     rax, [rel ifs_is_null]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0x79d7d",
    "cmp     byte [rbx], 0x7f",
    "jne     0x79dbf",
    "mov     rdi, qword [rbp-0x50]",
    "test    rdi, rdi",
    "jne     0x79fe8",
    "movdqa  xmm3, xmmword [rbp-0x60]",
    "movdqa  xmm4, xmmword [rbp-0x50]",
    "movups  xmmword [r15], xmm3",
    "movups  xmmword [r15+0x10], xmm4",
    "jmp     0x79e5a",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "mov     r12d, 0x1000000",
    "call    sub_72bd0",
    "mov     rbx, rax",
    "and     r13d, 0x3",
    "jne     0x7a238",
    "lea     rcx, [rbp-0x60]",
    "mov     edx, 0x1",
    "movzx   eax, word [rbp-0x5e]",
    "test    ax, ax",
    "jne     0x79ee0",
    "or      dword [r14+0x8], 0x40000",
    "call    free",
    "jmp     0x79cd7",
    "xor     esi, esi",
    "call    sub_72bd0",
    "mov     rbx, rax",
    "jmp     0x79fdb",
    "mov     esi, 0x4",
    "call    sub_72bd0",
    "mov     rbx, rax",
    "jmp     0x79fdb",
    "call    sub_87450",
    "mov     rbx, rax",
    "jmp     0x79fdb",
    "lea     rax, [rel ifs_is_null]",
    "mov     r8d, dword [rax]",
    "test    r8d, r8d",
    "jne     0x79d74",
    "jmp     0x79f65",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x79dbf",
    "jmp     0x79e5a",
    "mov     rdi, rbx",
    "mov     r12d, 0x1000000",
    "call    sub_87450",
    "mov     rbx, rax",
    "jmp     0x79dbf",
    "mov     rdi, qword [rbp-0x68]",
    "test    rdi, rdi",
    "je      0x79e5a",
    "lea     rax, [rel ifs_firstc]",
    "cmp     byte [rax], 0x20",
    "je      0x79d74",
    "mov     rdi, rbx",
    "mov     esi, 0x3",
    "call    sub_98120",
    "mov     rbx, rax",
    "jmp     0x79d8b",
    "xor     r12d, r12d",
    "and     r13d, 0x3",
    "setne   r12b",
    "shl     r12d, 0x12",
    "jmp     0x79dbf",
    "mov     rdi, rbx",
    "lea     rcx, [rbp-0x60]",
    "mov     edx, 0x11",
    "mov     esi, 0x1",
    "call    sub_98120",
    "mov     rbx, rax",
    "jmp     0x79d8b"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}