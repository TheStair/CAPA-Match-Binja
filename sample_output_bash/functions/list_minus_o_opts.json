{
  "address": "0xbca60",
  "rules": [
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "lea     r15, [rel data_11f68a]  {\"allexport\"}",
    "push    r14 {__saved_r14}",
    "lea     r14, [rel data_11f1e9]",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "mov     r12d, esi",
    "push    rbx {__saved_rbx}",
    "mov     ebx, edi",
    "sub     rsp, 0x8",
    "lea     rax, [rel o_options]",
    "lea     r13, [rax+0x8]  {data_155a08}",
    "jmp     0xbcacc",
    "mov     r9d, dword [r13]",
    "test    r9d, r9d",
    "je      0xbca98",
    "mov     rax, qword [r13+0x18]",
    "test    rax, rax",
    "je      0xbcba8",
    "lea     rdi, [rel shell_flags]",
    "xor     ecx, ecx  {0x0}",
    "mov     eax, 0x61",
    "lea     rdx, [rdi+0x10]  {data_1558b0}",
    "jmp     0xbcb02",
    "mov     rax, qword [r13+0x8]",
    "mov     eax, dword [rax]",
    "jmp     0xbcaaa",
    "mov     rdi, r15",
    "call    rax",
    "cmp     r9d, eax",
    "jne     0xbcaf0",
    "cmp     ebx, 0xffffffff",
    "je      0xbcb78",
    "test    r12d, r12d",
    "jne     0xbcb30",
    "cmp     eax, ebx",
    "je      0xbcb78",
    "movsx   eax, byte [rdx]",
    "add     rdx, 0x10",
    "add     ecx, 0x1",
    "test    al, al",
    "je      0xbcbb8",
    "movsxd  rcx, ecx",
    "shl     rcx, 0x4",
    "mov     rax, qword [rdi+rcx+0x8]",
    "test    rax, rax",
    "je      0xbcbb8",
    "cmp     eax, 0x1",
    "sbb     edx, edx",
    "and     edx, 0xfffffffe",
    "add     edx, 0x2d",
    "test    eax, eax",
    "lea     rcx, [rel data_122c8a[0x12]]  {\"on\"}",
    "cmove   rcx, r14  {data_11f1e9}",
    "mov     r15, qword [r13+0x20]",
    "add     r13, 0x28",
    "test    r15, r15",
    "je      0xbcb62",
    "cmp     ebx, 0xffffffff",
    "je      0xbcbc5",
    "mov     eax, dword [rax]",
    "cmp     ebx, 0xffffffff",
    "je      0xbcb27",
    "add     rsp, 0x8",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     edx, 0x2b",
    "test    r12d, r12d",
    "jne     0xbcb3b",
    "test    ebx, ebx",
    "jne     0xbcabb",
    "test    r12d, r12d",
    "je      0xbcbe0",
    "cmp     ebx, eax",
    "jne     0xbcabb",
    "mov     rcx, r15",
    "lea     rsi, [rel data_121690]  {\"set %co %s\\n\"}",
    "xor     eax, eax  {0x0}",
    "add     r13, 0x28",
    "mov     edi, 0x2",
    "call    __printf_chk",
    "mov     r15, qword [r13-0x8]",
    "test    r15, r15",
    "jne     0xbcacc",
    "lea     rcx, [rel data_11f1e9]",
    "jmp     0xbcb8a",
    "test    eax, eax",
    "lea     rcx, [rel data_122c8a[0x12]]  {\"on\"}",
    "lea     rax, [rel data_11f1e9]",
    "cmove   rcx, rax  {data_11f1e9}",
    "jmp     0xbcb8a",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xbcabb"
  ],
  "high level IL": [
    "char const* const r15 = \"allexport\"",
    "void* const r13 = &data_155a08",
    "uint64_t result",
    "while (true)",
    "int32_t r9_1 = *r13",
    "char const* const rcx_5",
    "uint64_t rdx_2",
    "if (r9_1 == 0)",
    "int64_t rax_1 = *(r13 + 0x18)",
    "if (rax_1 == 0)",
    "result = zx.q(**(r13 + 8))",
    "result, arg3 = rax_1(r15)",
    "if (arg1 == 0xffffffff || result.d == arg1)",
    "if (arg2 != 0)",
    "label_bcb38:",
    "rdx_2 = zx.q((sbb.d(arg3.d, arg3.d, result.d u< 1) & 0xfffffffe) + 0x2d)",
    "label_bcb47:",
    "r13 += 0x28",
    "result, arg3 = __printf_chk(2, \"set %co %s\\n\", rdx_2, r15)",
    "r15 = *(r13 - 8)",
    "if (r15 == 0)",
    "break",
    "continue",
    "rcx_5 = \"on\"",
    "if (result.d == 0)",
    "rcx_5 = &data_11f1e9",
    "label_bcb9b:",
    "result, arg3 = __printf_chk(2, \"%-15s\\t%s\\n\", r15, rcx_5)",
    "int32_t rcx_1 = 0",
    "result = 0x61",
    "arg3 = &data_1558b0",
    "if (r9_1 == result.d)",
    "result = (&data_1558a8)[sx.q(rcx_1) * 2]",
    "if (result == 0)",
    "goto label_bcbb8",
    "result = zx.q(*result)",
    "if (arg1 != 0xffffffff && arg1 != result.d)",
    "goto label_bcabb",
    "if (arg2 != 0)",
    "goto label_bcb38",
    "rcx_5 = \"on\"",
    "if (result.d == 0)",
    "rcx_5 = &data_11f1e9",
    "goto label_bcb9b_1",
    "result = zx.q(sx.d(*arg3))",
    "arg3 += 0x10",
    "rcx_1 += 1",
    "do while (result.b != 0)",
    "label_bcbb8:",
    "if (arg1 == 0xffffffff || arg1 == 0)",
    "rdx_2 = 0x2b",
    "if (arg2 != 0)",
    "goto label_bcb47",
    "rcx_5 = &data_11f1e9",
    "label_bcb9b_1:",
    "result, arg3 = __printf_chk(2, \"%-15s\\t%s\\n\", r15, rcx_5)",
    "label_bcabb:",
    "r15 = *(r13 + 0x20)",
    "r13 += 0x28",
    "if (r15 == 0)",
    "break",
    "return result"
  ]
}