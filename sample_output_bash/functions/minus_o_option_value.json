{
  "address": "0xbc950",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     eax, 0x61",
    "lea     rsi, [rel data_11f68a]  {\"allexport\"}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "mov     r13, rdi",
    "push    r12 {__saved_r12}",
    "xor     r12d, r12d  {0x0}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x8",
    "lea     r14, [rel o_options]",
    "movzx   r15d, byte [rdi]",
    "lea     rbx, [r14+0x28]  {data_155a28}",
    "jmp     0xbc9a7",
    "cmp     r15b, al",
    "jne     0xbc990",
    "mov     rsi, qword [rbx]",
    "add     rbx, 0x28",
    "add     r12d, 0x1",
    "test    rsi, rsi",
    "je      0xbca2a",
    "mov     rdi, r13",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xbc990",
    "add     rsp, 0x8",
    "mov     eax, 0xffffffff",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "movzx   eax, byte [rsi]",
    "movsxd  r12, r12d",
    "lea     rdx, [r12+r12*4]",
    "lea     rdx, [r14+rdx*8]",
    "mov     esi, dword [rdx+0x8]",
    "test    esi, esi",
    "jne     0xbc9f0",
    "lea     rdi, [rel shell_flags]",
    "mov     edx, 0x61",
    "lea     rcx, [rdi+0x10]  {data_1558b0}",
    "jmp     0xbca16",
    "mov     rax, qword [rdx+0x20]",
    "test    rax, rax",
    "je      0xbca40",
    "cmp     esi, edx",
    "jne     0xbca08",
    "mov     rax, qword [rdx+0x10]",
    "add     rsp, 0x8",
    "mov     rdi, r13",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "\u2753jmp     rax",
    "movsx   edx, byte [rcx]",
    "add     rcx, 0x10",
    "add     eax, 0x1",
    "test    dl, dl",
    "je      0xbca2a",
    "cdqe    ",
    "shl     rax, 0x4",
    "mov     rax, qword [rdi+rax+0x8]",
    "test    rax, rax",
    "jne     0xbca44",
    "mov     eax, dword [rax]",
    "add     rsp, 0x8",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}"
  ],
  "high level IL": [
    "char const rax = 0x61",
    "char const* const rsi = \"allexport\"",
    "int32_t r12 = 0",
    "char r15 = *arg1",
    "char const (** const rbx)[0xc] = &data_155a28",
    "while (true)",
    "if (r15 == rax)",
    "int32_t rax_1 = strcmp(arg1, rsi)",
    "if (rax_1 == 0)",
    "int64_t r12_1 = sx.q(r12)",
    "int32_t rsi_1 = *(r12_1 * 0x28 + &data_155a08)",
    "if (rsi_1 == 0)",
    "int64_t rax_2 = *(r12_1 * 0x28 + 0x155a20)",
    "if (rax_2 != 0)",
    "jump(rax_2)",
    "return zx.q(**(r12_1 * 0x28 + 0x155a10))",
    "int32_t rdx_3 = 0x61",
    "void* const rcx_1 = &data_1558b0",
    "while (rsi_1 != rdx_3)",
    "rdx_3 = sx.d(*rcx_1)",
    "rcx_1 += 0x10",
    "rax_1 += 1",
    "if (rdx_3.b == 0)",
    "return 0xffffffff",
    "int32_t* rax_5 = (&data_1558a8)[sx.q(rax_1) * 2]",
    "if (rax_5 != 0)",
    "return zx.q(*rax_5)",
    "break",
    "rsi = *rbx",
    "rbx = &rbx[5]",
    "r12 += 1",
    "if (rsi == 0)",
    "break",
    "rax = *rsi",
    "return 0xffffffff"
  ]
}