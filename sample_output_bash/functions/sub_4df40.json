{
  "address": "0x4df40",
  "rules": [
    "hash data using jshash/9255647c2a3f4270934d9ee03325f205",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "encrypt data using HC-128/e8f9b1d76e624bf6b554df630e614cdc",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/bfdff12b2adb42709a78f0e77631902b",
    "decompress data using LZO/a647e432b8ad43c8a517335d581dcd40",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "allocate or change RW memory/877cb0b79bfa432e8e79b8bd20fa354f",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249",
    "encrypt data using Curve25519/a423aa5d0923438c8eac88d5abe4fcd5",
    "hide graphical window from taskbar/3804d9f76e4f47c8b3a7ed608bc3a556",
    "terminate process",
    "contain loop",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/416ed7212e694999bd9567d4aa818bae"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "xor     r15d, r15d",
    "push    r14",
    "mov     r14d, ecx",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "sub     rsp, 0x38",
    "lea     rax, [rel subshell_level]",
    "mov     ebx, dword [rdi+0x4]",
    "mov     dword [rbp-0x50], esi",
    "mov     qword [rbp-0x48], r8",
    "add     dword [rax], 0x1",
    "test    esi, esi",
    "je      0x4df86",
    "mov     eax, ebx",
    "mov     edx, dword [r12]",
    "mov     ecx, 0x1",
    "shr     eax, 0x2",
    "and     eax, 0x1",
    "mov     dword [rbp-0x3c], eax",
    "mov     eax, ebx",
    "and     eax, 0x1",
    "cmp     edx, 0xd",
    "cmove   eax, ecx",
    "mov     dword [rbp-0x34], eax",
    "xor     eax, eax",
    "cmp     edx, 0xe",
    "sete    al",
    "and     ebx, 0xfffffff8",
    "mov     dword [rbp-0x38], eax",
    "mov     eax, dword [rbp-0x50]",
    "mov     dword [r12+0x4], ebx",
    "test    eax, eax",
    "je      0x4dffc",
    "test    bh, 0x4",
    "je      0x4df83",
    "lea     rax, [rel interactive]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel login_shell]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x2c",
    "jle     0x4e02f",
    "lea     rax, [rel original_pgrp]",
    "mov     dword [rax], 0xffffffff",
    "lea     rax, [rel interactive_shell]",
    "mov     edx, dword [rax]",
    "mov     dword [rax], 0x0",
    "test    edx, edx",
    "je      0x4dffc",
    "xor     r15d, r15d",
    "cmp     edx, 0xffffffff",
    "je      0x4e5af",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "jne     0x4e3e5",
    "lea     rax, [rel loop_level]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel expaliases_flag]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel expand_aliases]",
    "mov     dword [rax], 0x0",
    "mov     rdi, qword [rdi+0x10]",
    "xor     r15d, r15d",
    "call    stdin_redirects",
    "test    eax, eax",
    "sete    r15b",
    "jmp     0x4df86",
    "mov     ebx, dword [rbp-0x50]",
    "lea     rax, [rel subshell_environment]",
    "test    ebx, ebx",
    "jne     0x4e55a",
    "mov     r11d, dword [rbp-0x50]",
    "xor     ecx, ecx",
    "mov     esi, r13d",
    "lea     rdx, [rel subshell_environment]",
    "test    r11d, r11d",
    "setne   cl",
    "and     esi, r14d",
    "mov     eax, ecx",
    "or      eax, 0x10",
    "cmp     esi, 0xffffffff",
    "cmove   eax, ecx",
    "mov     ecx, dword [rbp-0x38]",
    "mov     dword [rdx], eax",
    "mov     esi, eax",
    "or      eax, 0x40",
    "test    ecx, ecx",
    "cmove   eax, esi",
    "mov     dword [rdx], eax",
    "mov     dword [rax], 0x3",
    "jmp     0x4e06f",
    "mov     dword [rax], 0x2",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x4e080",
    "mov     r10d, dword [rel data_161100]",
    "mov     edi, dword [rax]",
    "test    r10d, r10d",
    "jne     0x4e080",
    "lea     rax, [rel interrupt_state]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x4e550",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x4e40e",
    "call    sub_8e2b0",
    "{ Does not return }",
    "call    throw_to_top_level",
    "jmp     0x4e091",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x4e0b0",
    "call    reset_terminating_signals",
    "lea     rdi, [rel pending_traps]",
    "mov     qword [rdi+0x4], 0x0",
    "lea     rax, [rdi+0x4]",
    "add     rdi, 0xc",
    "mov     qword [rdi+0xf0], 0x0",
    "and     rdi, 0xfffffffffffffff8",
    "sub     rax, rdi",
    "add     eax, 0x100",
    "shr     eax, 0x3",
    "mov     ecx, eax",
    "xor     eax, eax",
    "rep stosq qword [rdi]",
    "lea     rdi, [rel sub_8a770]",
    "call    sub_8a7b0",
    "lea     rdx, [rel subshell_environment]",
    "mov     eax, dword [rdx]",
    "and     ah, 0xfe",
    "or      al, 0x80",
    "mov     dword [rdx], eax",
    "lea     rdx, [rel running_trap]",
    "mov     eax, dword [rdx]",
    "test    eax, eax",
    "jle     0x4e12c",
    "mov     r9d, dword [rel data_161100]",
    "mov     edi, dword [rax]",
    "test    r9d, r9d",
    "je      0x4e420",
    "mov     r8d, dword [rbp-0x50]",
    "test    r8d, r8d",
    "je      0x4e546",
    "sub     eax, 0x1",
    "lea     rcx, [rel data_1611a0]",
    "mov     dword [rdx], 0x0",
    "cdqe    ",
    "and     dword [rcx+rax*4], 0xffffffcf",
    "call    set_sigint_handler",
    "jmp     0x4e151",
    "lea     rax, [rel job_control]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "je      0x4e565",
    "lea     rsi, [rel sub_66230]",
    "mov     edi, 0x11",
    "call    set_signal_handler",
    "call    without_job_control",
    "cmp     qword [rbp-0x48], 0x0",
    "je      0x4e1b9",
    "mov     edi, 0x2",
    "call    get_original_signal",
    "mov     esi, 0x1",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "mov     edi, 0x3",
    "call    get_original_signal",
    "mov     esi, 0x1",
    "mov     edi, 0x3",
    "call    set_signal_handler",
    "jmp     0x4e14a",
    "mov     dword [rbp-0x50], 0x0",
    "mov     edi, r13d",
    "mov     esi, r14d",
    "call    sub_51420",
    "lea     rbx, [rel sh_coproc]",
    "mov     edi, dword [rbx+0xc]",
    "test    edi, edi",
    "js      0x4e1de",
    "mov     rax, qword [rbp-0x48]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jle     0x4e1b9",
    "lea     rbx, [rel sh_coproc]",
    "mov     edi, dword [rbx+0x10]",
    "test    edi, edi",
    "js      0x4e1f8",
    "call    close",
    "mov     dword [rbx+0xc], 0xffffffff",
    "xor     ebx, ebx",
    "jmp     0x4e18c",
    "lea     rax, [rel sh_coproc]",
    "mov     qword [rax+0x14], 0xffffffffffffffff",
    "call    clear_fifo_list",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "jne     0x4e482",
    "call    close",
    "mov     dword [rbx+0x10], 0xffffffff",
    "mov     rax, qword [rbp-0x48]",
    "mov     rax, qword [rax+0x8]",
    "cmp     byte [rax+rbx], 0x0",
    "je      0x4e180",
    "mov     rdi, qword [r12+0x10]",
    "call    stdin_redirects",
    "test    eax, eax",
    "setne   al",
    "cmp     r13d, 0xffffffff",
    "setne   dl",
    "or      eax, edx",
    "lea     rdx, [rel stdin_redir]",
    "movzx   eax, al",
    "mov     dword [rdx], eax",
    "mov     eax, dword [r12]",
    "cmp     eax, 0xc",
    "ja      0x4e4a6",
    "mov     rax, qword [rbp-0x48]",
    "add     rbx, 0x1",
    "cmp     dword [rax], ebx",
    "jle     0x4e1b9",
    "mov     edi, ebx",
    "call    close",
    "mov     rax, qword [rbp-0x48]",
    "mov     rax, qword [rax+0x8]",
    "mov     byte [rax+rbx], 0x0",
    "mov     rax, qword [rbp-0x48]",
    "add     rbx, 0x1",
    "cmp     dword [rax], ebx",
    "jg      0x4e18c",
    "lea     rax, [rel default_buffered_input]",
    "mov     dword [rax], 0xffffffff",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "je      0x4e276",
    "lea     rax, [rel stdin_redir]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x4e24a",
    "test    r15d, r15d",
    "je      0x4e24a",
    "mov     edx, 0x1faf",
    "bt      rdx, rax",
    "jae     0x4e4a6",
    "mov     rdi, qword [r12+0x10]",
    "test    rdi, rdi",
    "je      0x4e2a5",
    "mov     rax, 0x84ffffffff",
    "and     rax, qword [r12]",
    "cmp     rax, 0xd",
    "je      0x4e59c",
    "call    async_redirect_stdin",
    "jmp     0x4e24a",
    "cmp     r13d, 0xffffffff",
    "je      0x4e4a6",
    "cmp     dword [r12], 0xd",
    "je      0x4e523",
    "mov     esi, 0x1",
    "call    do_redirections",
    "test    eax, eax",
    "jne     0x4e5c6",
    "mov     rax, qword [r12+0x18]",
    "mov     rdi, qword [rax+0x8]",
    "call    optimize_subshell_command",
    "jmp     0x4e276",
    "lea     rax, [rel stdin_redir]",
    "mov     dword [rax], 0x1",
    "mov     rax, qword [r12+0x18]",
    "mov     rax, qword [rax+0x8]",
    "cmp     rax, r12",
    "mov     qword [rbp-0x58], rax",
    "setne   dl",
    "jmp     0x4e2ce",
    "mov     eax, dword [rbp-0x38]",
    "test    eax, eax",
    "je      0x4e53b",
    "mov     eax, dword [rbp-0x3c]",
    "xor     edi, edi",
    "test    eax, eax",
    "sete    dil",
    "call    exit",
    "{ Does not return }",
    "mov     rdi, qword [r12+0x10]",
    "call    dispose_redirects",
    "mov     qword [r12+0x10], 0x0",
    "mov     eax, dword [r12+0x4]",
    "test    al, 0x80",
    "je      0x4e2e8",
    "mov     qword [rbp-0x58], r12",
    "xor     edx, edx",
    "jmp     0x4e2ce",
    "mov     rax, qword [r12+0x18]",
    "mov     rax, qword [rax+0x10]",
    "mov     qword [rbp-0x58], rax",
    "cmp     rax, r12",
    "setne   dl",
    "test    ah, 0x1",
    "je      0x4e2ff",
    "mov     rcx, qword [rbp-0x58]",
    "mov     eax, dword [rcx+0x4]",
    "or      al, 0x80",
    "mov     dword [rcx+0x4], eax",
    "mov     eax, dword [r12+0x4]",
    "test    al, 0x8",
    "je      0x4e314",
    "mov     rcx, qword [rbp-0x58]",
    "mov     eax, dword [rcx+0x4]",
    "or      ah, 0x1",
    "mov     dword [rcx+0x4], eax",
    "mov     eax, dword [r12+0x4]",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "jne     0x4e322",
    "test    dl, dl",
    "je      0x4e314",
    "mov     rbx, qword [rbp-0x58]",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x4",
    "je      0x4e4e9",
    "mov     eax, dword [rbp-0x38]",
    "test    eax, eax",
    "je      0x4e33c",
    "mov     rdi, qword [rbp-0x58]",
    "mov     eax, dword [rdi+0x4]",
    "or      eax, 0x8",
    "mov     dword [rdi+0x4], eax",
    "mov     rbx, qword [rbp-0x58]",
    "mov     eax, dword [rbx+0x4]",
    "test    al, 0x80",
    "jne     0x4e33c",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0xd",
    "je      0x4e4e9",
    "mov     rcx, qword [rbp-0x58]",
    "lea     rdi, [rel top_level]",
    "xor     esi, esi",
    "mov     eax, dword [rcx+0x4]",
    "shr     eax, 0x2",
    "and     eax, 0x1",
    "mov     dword [rbp-0x3c], eax",
    "mov     eax, dword [rcx+0x4]",
    "and     eax, 0xfffffffb",
    "mov     dword [rcx+0x4], eax",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     dword [rbp-0x4c], eax",
    "lea     rax, [rel return_catch_flag]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x4e389",
    "mov     eax, dword [rbx+0x4]",
    "test    al, 0x4",
    "jne     0x4e33c",
    "mov     esi, dword [rbp-0x4c]",
    "cmp     esi, 0x3",
    "je      0x4e428",
    "lea     rdi, [rel return_catch]",
    "xor     esi, esi",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     eax, dword [rbx+0x4]",
    "or      eax, 0x40",
    "mov     dword [rbx+0x4], eax",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x4",
    "jne     0x4e33c",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rbp-0x3c], 0x0",
    "mov     eax, dword [rax]",
    "jmp     0x4e3c0",
    "cmp     esi, 0x6",
    "je      0x4e428",
    "mov     rax, qword [rbx+0x18]",
    "or      dword [rax], 0x40",
    "jmp     0x4e33c",
    "mov     edx, dword [rbp-0x3c]",
    "test    edx, edx",
    "je      0x4e3cf",
    "mov     edx, dword [rbp-0x4c]",
    "test    edx, edx",
    "je      0x4e470",
    "mov     edx, dword [rbp-0x34]",
    "test    edx, edx",
    "jne     0x4e440",
    "test    eax, eax",
    "sete    al",
    "movzx   eax, al",
    "test    eax, eax",
    "je      0x4e4ca",
    "lea     rdx, [rel last_command_exit_value]",
    "mov     eax, 0x1",
    "mov     ecx, dword [rdx]",
    "test    ecx, ecx",
    "je      0x4e3c0",
    "test    byte [rel data_1611a0], 0x1",
    "je      0x4e3d6",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     r8, qword [rbp-0x48]",
    "mov     esi, dword [rbp-0x50]",
    "mov     ecx, 0xffffffff",
    "mov     edx, 0xffffffff",
    "mov     rdi, qword [rbp-0x58]",
    "call    execute_command_internal",
    "jmp     0x4e3c0",
    "lea     rax, [rel return_catch_value]",
    "mov     eax, dword [rax]",
    "jmp     0x4e3c0",
    "mov     eax, dword [rdx]",
    "nop     dword [rax]",
    "lea     rdx, [rel last_command_exit_value]",
    "mov     dword [rdx], eax",
    "call    run_exit_trap",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    "
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}