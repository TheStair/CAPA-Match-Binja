{
  "address": "0xd61f0",
  "rules": [
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "contain loop",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x1000",
    "or      qword [rsp], 0x0",
    "sub     rsp, 0x1000",
    "or      qword [rsp], 0x0",
    "sub     rsp, 0x58",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     rbx, rdi",
    "call    strlen",
    "mov     edi, 0x1001",
    "mov     r12, rax",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xd6756",
    "mov     esi, 0x1001",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "cmp     r12d, 0xfff",
    "jle     0xd6600",
    "mov     edi, 0x1001",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd6773",
    "mov     rdi, rbx",
    "call    strlen",
    "add     rax, 0x1",
    "mov     rdi, rax",
    "mov     qword [rbp-0x2060], rax",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xd678b",
    "mov     esi, 0x1001",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, 0x1001",
    "mov     rsi, rbx",
    "mov     rdi, r14",
    "call    __strcpy_chk",
    "movzx   eax, byte [r14]",
    "mov     qword [rbp-0x2060], 0x1001",
    "cmp     al, 0x2f",
    "jne     0xd62a2",
    "mov     rsi, qword [rbp-0x2060]",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, qword [rbp-0x2060]",
    "mov     rsi, rbx",
    "mov     rdi, r12",
    "mov     r14, r12",
    "call    __strcpy_chk",
    "movzx   eax, byte [r14]",
    "cmp     al, 0x2f",
    "je      0xd663d",
    "mov     dword [rbp-0x2058], 0x0",
    "lea     rbx, [r14+0x1]",
    "mov     r9d, 0x1",
    "cmp     byte [r14+0x1], 0x2f",
    "mov     r9d, 0x1",
    "mov     dword [rbp-0x2058], 0x0",
    "jne     0xd666b",
    "mov     rdx, rbx",
    "mov     rax, r14",
    "sub     rdx, r14",
    "and     edx, 0x1",
    "je      0xd62f0",
    "xor     eax, eax",
    "lea     rbx, [r14+r9]",
    "cmp     r14, rbx",
    "jb      0xd62b6",
    "xor     ecx, ecx",
    "cmp     byte [r14+0x2], 0x2f",
    "setne   cl",
    "mov     dword [rbp-0x2058], ecx",
    "lea     r9d, [rcx+0x1]",
    "movsxd  r9, r9d",
    "add     rax, 0x2",
    "cmp     rax, rbx",
    "jne     0xd62f0",
    "lea     rax, [r14+0x1]",
    "cmp     rax, rbx",
    "je      0xd62f9",
    "mov     edx, eax",
    "add     eax, 0x1",
    "movzx   ecx, byte [r14+rdx]",
    "mov     byte [r13+rdx], cl",
    "cmp     eax, esi",
    "jb      0xd62c0",
    "mov     esi, r9d",
    "test    r9d, r9d",
    "je      0xd62d3",
    "mov     r11, r13",
    "mov     r12, r13",
    "mov     rbx, r14",
    "jmp     0xd630c",
    "movzx   eax, byte [rbx]",
    "lea     r12, [r13+r9]",
    "test    al, al",
    "je      0xd6420",
    "nop     word [rax+rax]",
    "mov     dword [rbp-0x2054], 0x0",
    "mov     byte [r12], 0x0",
    "mov     rdi, r14",
    "call    free",
    "cmp     byte [r13], 0x2f",
    "jne     0xd6393",
    "mov     r11, r12",
    "movzx   eax, byte [rbx+0x1]",
    "add     rbx, 0x1",
    "cmp     al, 0x2e",
    "je      0xd6470",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd676e",
    "cmp     byte [r13+0x1], 0x2f",
    "jne     0xd6393",
    "cmp     al, 0x2f",
    "je      0xd6410",
    "movzx   eax, byte [rbx+0x1]",
    "cmp     al, 0x2f",
    "je      0xd66b0",
    "mov     r15, r12",
    "cmp     r12, r11",
    "je      0xd6338",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x2058",
    "mov     rax, r13",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "movzx   eax, byte [r13+0x2]",
    "cmp     al, 0x2f",
    "je      0xd6393",
    "add     rbx, 0x1",
    "jmp     0xd6418",
    "test    al, al",
    "je      0xd66b0",
    "movzx   eax, byte [rbx]",
    "test    al, al",
    "jne     0xd635e",
    "mov     byte [r12], 0x2f",
    "lea     r15, [r12+0x1]",
    "mov     edx, dword [rbp-0x2058]",
    "test    edx, edx",
    "jne     0xd6393",
    "test    al, al",
    "jne     0xd6316",
    "cmp     al, 0x2e",
    "jne     0xd6326",
    "cmp     al, 0x2f",
    "je      0xd64e0",
    "jmp     0xd64e0",
    "test    al, al",
    "jne     0xd6731",
    "movzx   eax, byte [rbx+0x2]",
    "cmp     al, 0x2f",
    "je      0xd649c",
    "mov     byte [r15], 0x0",
    "lea     rax, [rbp-0x2050]",
    "mov     edx, 0x1000",
    "mov     rdi, r13",
    "mov     rsi, rax",
    "mov     qword [rbp-0x2068], r11",
    "mov     qword [rbp-0x2070], rax",
    "call    readlink",
    "mov     r11, qword [rbp-0x2068]",
    "test    eax, eax",
    "js      0xd6690",
    "mov     rdx, r15",
    "sub     rdx, r13",
    "cmp     rdx, 0xfff",
    "jle     0xd6348",
    "lea     rbx, [r13+0x1]",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     ecx, 0x1001",
    "mov     rsi, rbx",
    "mov     rdi, r13",
    "lea     rdx, [rax+0x1]",
    "call    __memmove_chk",
    "jmp     0xd6393",
    "mov     byte [r13+0x1], 0x0",
    "jmp     0xd6393",
    "add     rbx, 0x2",
    "cmp     r11, r12",
    "jae     0xd6418",
    "test    al, al",
    "jne     0xd6326",
    "call    __errno_location",
    "cmp     dword [rax], 0x16",
    "jne     0xd6380",
    "add     dword [rbp-0x2054], 0x1",
    "mov     esi, dword [rbp-0x2054]",
    "cmp     esi, 0x14",
    "jg      0xd6721",
    "add     rbx, 0x1",
    "mov     byte [r15], al",
    "add     r15, 0x1",
    "movzx   eax, byte [rbx]",
    "test    al, al",
    "je      0xd64e0",
    "call    __errno_location",
    "mov     dword [rax], 0x24",
    "sub     r12, 0x1",
    "cmp     r12, r11",
    "je      0xd6418",
    "mov     rdi, r13",
    "xor     r13d, r13d",
    "call    free",
    "mov     rdi, r14",
    "call    free",
    "movzx   eax, byte [rbx]",
    "mov     r11, qword [rbp-0x2068]",
    "mov     r12, r15",
    "jmp     0xd6418",
    "call    __errno_location",
    "mov     dword [rax], 0x28",
    "jmp     0xd6380",
    "movsxd  r15, eax",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x2068], r11",
    "mov     byte [rbp+r15-0x2050], 0x0",
    "call    strlen",
    "mov     r11, qword [rbp-0x2068]",
    "mov     rcx, rax",
    "lea     rax, [r15+rax+0x2]",
    "cmp     rax, 0xfff",
    "ja      0xd6375",
    "nop     word [rax+rax]",
    "lea     rax, [rbp-0x1040]",
    "mov     rsi, qword [rbp-0x2070]",
    "mov     edx, 0x1001",
    "mov     qword [rbp-0x2080], r11",
    "mov     rdi, rax",
    "mov     qword [rbp-0x2078], rcx",
    "mov     qword [rbp-0x2068], rax",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x2078]",
    "mov     eax, 0x1001",
    "mov     rsi, rbx",
    "mov     byte [rbp+r15-0x1040], 0x2f",
    "sub     rax, r15",
    "lea     rdx, [rcx+0x1]",
    "mov     rcx, qword [rbp-0x2068]",
    "lea     rdi, [rcx+r15]",
    "mov     rcx, rax",
    "call    __memcpy_chk",
    "mov     rdx, qword [rbp-0x2060]",
    "mov     rsi, qword [rbp-0x2068]",
    "mov     rdi, r14",
    "call    __strcpy_chk",
    "cmp     byte [rbp-0x2050], 0x2f",
    "je      0xd63bb",
    "sub     r12, 0x1",
    "cmp     r12, r11",
    "jne     0xd64c0",
    "cmp     byte [r14], 0x2f",
    "jne     0xd66b9",
    "movzx   eax, byte [r14]",
    "mov     r11, qword [rbp-0x2080]",
    "mov     rbx, r14",
    "jmp     0xd6418",
    "cmp     byte [r12], 0x2f",
    "je      0xd6418",
    "jmp     0xd6418",
    "mov     dword [rbp-0x2058], 0x0",
    "lea     rbx, [r14+0x1]",
    "mov     r9d, 0x1",
    "cmp     byte [r14+0x1], 0x2f",
    "mov     r9d, 0x1",
    "mov     dword [rbp-0x2058], 0x0",
    "jne     0xd63f3",
    "mov     rdx, rbx",
    "mov     rax, r14",
    "sub     rdx, r14",
    "and     edx, 0x1",
    "je      0xd6708",
    "xor     eax, eax",
    "lea     rbx, [r14+r9]",
    "cmp     r14, rbx",
    "jb      0xd66cd",
    "xor     eax, eax",
    "cmp     byte [r14+0x2], 0x2f",
    "setne   al",
    "mov     dword [rbp-0x2058], eax",
    "lea     r9d, [rax+0x1]",
    "movsxd  r9, r9d",
    "add     rax, 0x2",
    "cmp     rax, rbx",
    "jne     0xd6708",
    "lea     rax, [r14+0x1]",
    "cmp     rax, rbx",
    "je      0xd6711",
    "mov     edx, eax",
    "add     eax, 0x1",
    "movzx   ecx, byte [r14+rdx]",
    "mov     byte [r13+rdx], cl",
    "cmp     eax, esi",
    "jb      0xd66d7",
    "mov     esi, r9d",
    "test    r9d, r9d",
    "je      0xd66ea",
    "mov     r11, r13",
    "mov     r12, r13",
    "mov     rbx, r14",
    "nop     dword [rax]",
    "lea     r12, [r13+r9]",
    "movzx   eax, byte [rbx]",
    "mov     r11, r12",
    "jmp     0xd6418",
    "nop     dword [rax]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}