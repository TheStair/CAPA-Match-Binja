{
  "address": "0x7d8f0",
  "rules": [
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/4f0637c1ae9b445ca3ec93a4b4e0bb6d",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/9710d9ee76a4466b954966f2a98c40ba",
    "check if file exists/e724fb9dd0e04bc2af009f8be857642c/229a7b83bcc7454aa2d6f8d97a1a725e",
    "encrypt data using Curve25519/7d070d905d0942e295bbb2c9df72fc86",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "encrypt data using Curve25519/a423aa5d0923438c8eac88d5abe4fcd5",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/bee29d5f30484915bb6e92fdf1038d2c",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "contain loop",
    "decompress data using LZO/8468a5c914d04c88af12e408441e5adc",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/af1fc90a7adf4a2ea648cfac1c599984",
    "hide graphical window from taskbar/3804d9f76e4f47c8b3a7ed608bc3a556",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/2602c80a9b3846b9ae92e2e83b13e866"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x88",
    "mov     dword [rbp-0x68], r9d",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rsi, rsi",
    "je      0x7e10e",
    "mov     qword [rbp-0x60], 0x0",
    "jmp     0x7decc",
    "sub     rsp, 0x8",
    "mov     r12d, r8d",
    "mov     r8d, dword [rbp+0x10]",
    "mov     r13, rcx",
    "lea     rax, [rel this_command_name]",
    "mov     ecx, r12d",
    "lea     r9, [rbp-0x50]",
    "mov     rax, qword [rax]",
    "mov     qword [rbp-0x80], rax",
    "lea     rax, [rel this_command_name]",
    "mov     qword [rax], rdi",
    "lea     rax, [rbp-0x48]",
    "push    rax",
    "call    sub_7c130",
    "pop     rdx",
    "pop     rcx",
    "cmp     eax, 0xffffffff",
    "je      0x7e100",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7e3d6",
    "lea     rax, [rel this_command_name]",
    "mov     rbx, qword [rbp-0x80]",
    "mov     qword [rax], rbx",
    "mov     r15d, eax",
    "xor     ebx, ebx",
    "and     al, 0x7f",
    "and     r15d, 0x80",
    "cmp     byte [r13], 0x2f",
    "mov     dword [rbp-0x74], eax",
    "jne     0x7d983",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x60]",
    "lea     rsp, [rbp-0x28]",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, r13",
    "call    strlen",
    "lea     r14, [rax+0x1]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x7e3db",
    "add     r13, 0x1",
    "mov     ebx, 0x10",
    "mov     qword [rbp-0x58], rax",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdi, rcx",
    "mov     rdx, r14",
    "mov     rsi, r13",
    "call    __strcpy_chk",
    "mov     ecx, dword [rbp-0x68]",
    "lea     rdx, [rel data_120961[4]]  {\"/\"}",
    "mov     rdi, rax",
    "mov     qword [rbp-0x70], rax",
    "mov     eax, ebx",
    "or      eax, 0x20",
    "test    r12b, 0x3",
    "cmovne  ebx, eax",
    "mov     eax, ebx",
    "or      al, 0x80",
    "test    r15d, r15d",
    "mov     r15, rdi",
    "cmovne  ebx, eax",
    "mov     eax, ebx",
    "or      eax, 0x40",
    "and     ecx, 0x8",
    "cmovne  ebx, eax",
    "xor     esi, esi",
    "cmp     byte [r13], 0x2f",
    "mov     dword [rbp-0x78], ecx",
    "sete    sil",
    "xor     ecx, ecx",
    "call    skip_to_delim",
    "mov     rdi, r15",
    "cdqe    ",
    "lea     rdx, [r15+rax]",
    "cmp     byte [rdx], 0x2f",
    "je      0x7db40",
    "mov     rdi, qword [rbp-0x70]",
    "mov     byte [rdx], 0x0",
    "mov     esi, r12d",
    "lea     r13, [rdi+rax+0x1]",
    "cmp     byte [r13], 0x0",
    "je      0x7de70",
    "mov     esi, r12d",
    "xor     r13d, r13d",
    "call    sub_118350",
    "mov     qword [rbp-0x58], rax",
    "mov     rdi, qword [rbp-0x70]",
    "xor     r13d, r13d",
    "call    sub_118350",
    "mov     qword [rbp-0x58], rax",
    "jmp     0x7da1c",
    "call    sub_118350",
    "mov     qword [rbp-0x58], rax",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x2a",
    "jle     0x7dd20",
    "mov     rax, qword [rbp-0x58]",
    "test    rax, rax",
    "je      0x7e060",
    "mov     eax, dword [rbp-0x74]",
    "cmp     eax, 0x2",
    "je      0x7df30",
    "test    bl, 0x10",
    "je      0x7dae8",
    "test    bl, 0x20",
    "jne     0x7de20",
    "lea     r15, [rel patsub_replacement]",
    "mov     esi, r12d",
    "and     esi, 0xfffffffc",
    "mov     eax, dword [r15]",
    "test    eax, eax",
    "je      0x7df10",
    "mov     eax, dword [rbp-0x74]",
    "cmp     eax, 0x2",
    "je      0x7e398",
    "movzx   eax, byte [rax]",
    "cmp     al, 0x23",
    "je      0x7def8",
    "mov     rsi, qword [rbp-0x58]",
    "jg      0x7de88",
    "cmp     byte [r13], 0x0",
    "je      0x7e180",
    "lea     rdx, [rel expand_string_unsplit]",
    "mov     rdi, r13",
    "mov     esi, r12d",
    "call    sub_75250",
    "lea     r15, [rel patsub_replacement]",
    "mov     r13, rax",
    "lea     rdx, [rel expand_string_unsplit]",
    "mov     rdi, r13",
    "call    sub_75250",
    "mov     r13, rax",
    "jmp     0x7dd45",
    "cmp     byte [r13], 0x0",
    "je      0x7e180",
    "xor     esi, esi",
    "jmp     0x7df34",
    "jg      0x7e380",
    "mov     rax, qword [rbp-0x58]",
    "or      ebx, 0x1",
    "lea     rsi, [rax+0x1]",
    "jmp     0x7db0f",
    "mov     rsi, qword [rbp-0x58]",
    "cmp     al, 0x25",
    "jne     0x7db0f",
    "lea     rax, [rel ifs_is_null]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x7df40",
    "mov     rax, qword [rbp-0x50]",
    "mov     ecx, ebx",
    "mov     rdx, r13",
    "mov     rdi, qword [rax+0x8]",
    "test    byte [rax+0x28], 0x40",
    "je      0x7e0f0",
    "cmp     dword [rbp-0x74], 0x3",
    "je      0x7e190",
    "mov     rsi, qword [rbp-0x58]",
    "test    eax, eax",
    "je      0x7e090",
    "xor     r13d, r13d",
    "jmp     0x7da1c",
    "mov     esi, r12d",
    "mov     rdi, r13",
    "call    expand_string_unsplit",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x7e180",
    "test    r13, r13",
    "je      0x7e180",
    "mov     r11d, dword [r15]",
    "test    r11d, r11d",
    "je      0x7da1c",
    "mov     rdi, r13",
    "call    sub_111a00",
    "mov     rdx, rax",
    "test    rax, rax",
    "je      0x7e180",
    "mov     eax, ebx",
    "not     eax",
    "test    al, 0xc0",
    "je      0x7e160",
    "xor     esi, esi",
    "cmp     dword [rbp-0x74], 0x3",
    "je      0x7e14a",
    "xor     esi, esi",
    "test    eax, eax",
    "je      0x7e090",
    "mov     eax, dword [rbp-0x74]",
    "cmp     eax, 0x2",
    "je      0x7df34",
    "or      ebx, 0x2",
    "lea     rsi, [rsi+0x1]",
    "or      ebx, 0x20",
    "jmp     0x7df40",
    "call    array_patsub",
    "mov     qword [rbp-0x60], rax",
    "jmp     0x7df60",
    "call    assoc_patsub",
    "mov     qword [rbp-0x60], rax",
    "mov     rsi, qword [rbp-0x58]",
    "jmp     0x7e14a",
    "nop     word [rax+rax]",
    "mov     r14, qword [rbp-0x48]",
    "mov     ecx, ebx",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "call    pat_subst",
    "mov     r12, rax",
    "test    r14, r14",
    "je      0x7e0b1",
    "cmp     eax, 0x1",
    "jne     0x7de98",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rdi, rax",
    "call    string_list_internal",
    "mov     rdi, r14",
    "mov     r13, rax",
    "call    dispose_words",
    "lea     r15, [rel patsub_replacement]",
    "jmp     0x7dd45",
    "cmp     byte [r13], 0x0",
    "je      0x7da1c",
    "mov     rax, qword [rax+0x8]",
    "test    rax, rax",
    "je      0x7dbd4",
    "mov     rdi, qword [rbp-0x48]",
    "mov     ecx, ebx",
    "mov     rdx, r13",
    "call    pat_subst",
    "mov     r12, rax",
    "jmp     0x7e0b1",
    "jmp     0x7dea8",
    "cmp     eax, 0x1",
    "je      0x7da4c",
    "jg      0x7e140",
    "cmp     qword [rbp-0x60], 0x0",
    "je      0x7e050",
    "mov     qword [rbp-0x60], 0x0",
    "jmp     0x7de98",
    "test    r12d, r12d",
    "jne     0x7e040",
    "test    r13, r13",
    "je      0x7deb5",
    "mov     rdi, qword [rbp-0x58]",
    "call    free",
    "test    r12, r12",
    "je      0x7e050",
    "mov     rdi, r14",
    "call    free",
    "cmp     qword [rbp-0x58], 0x0",
    "je      0x7dea8",
    "test    byte [rbp-0x68], 0x4",
    "je      0x7da5d",
    "mov     qword [rbp-0x40], 0x0",
    "movzx   r14d, byte [r13]",
    "test    r14b, r14b",
    "je      0x7da1c",
    "cmp     qword [rdx], 0x0",
    "je      0x7e3a0",
    "mov     rdi, qword [rax]",
    "mov     qword [rbp-0x88], rdx",
    "call    remove_quoted_nulls",
    "mov     rdx, qword [rbp-0x88]",
    "mov     rax, qword [rdx+0x8]",
    "and     dword [rax+0x8], 0xfffbffff",
    "jmp     0x7dea8",
    "cmp     dword [rbp-0x74], 0x3",
    "jne     0x7de9f",
    "test    eax, eax",
    "je      0x7e090",
    "cmp     qword [rbp-0x60], 0x0",
    "jne     0x7df85",
    "lea     rax, [rel ifs_is_null]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x7de98",
    "mov     rdi, qword [rbp-0x70]",
    "call    free",
    "lea     rax, [rel this_command_name]",
    "mov     rbx, qword [rbp-0x80]",
    "mov     qword [rax], rbx",
    "mov     rdi, r13",
    "call    free",
    "and     ebx, 0x20",
    "je      0x7e120",
    "mov     qword [rbp-0x60], rsi",
    "call    list_rest_of_args",
    "test    rax, rax",
    "je      0x7e050",
    "mov     eax, ebx",
    "or      eax, 0x40",
    "test    bl, 0x80",
    "cmovne  ebx, eax",
    "cmp     byte [r13+0x1], 0x0",
    "je      0x7e3c2",
    "mov     r11, qword [rax]",
    "jmp     0x7dbfe",
    "mov     rdi, rdx",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     qword [rbp-0x88], rdx",
    "call    string_list_internal",
    "mov     rdx, qword [rbp-0x88]",
    "mov     r11, rax",
    "cmp     eax, 0x1",
    "je      0x7da4c",
    "and     ebx, 0x20",
    "jne     0x7de98",
    "nop     dword [rax+rax]",
    "xor     esi, esi",
    "mov     rdi, r12",
    "call    sub_72bd0",
    "mov     qword [rbp-0x60], rax",
    "cmp     byte [r12], 0x0",
    "jne     0x7e1b0",
    "mov     dword [rbp-0x74], r12d",
    "mov     r12, rax",
    "mov     qword [rbp-0x68], rax",
    "jmp     0x7da9f",
    "mov     qword [rbp-0x90], 0x1",
    "movsx   eax, r14b",
    "jmp     0x7dda0",
    "cmp     byte [r13+0x2], 0x0",
    "jne     0x7e2f9",
    "mov     rdi, r11",
    "mov     qword [rbp-0x98], rdx",
    "mov     qword [rbp-0x88], r11",
    "mov     qword [rbp-0x40], 0x0",
    "call    strlen",
    "mov     r11, qword [rbp-0x88]",
    "lea     r14, [rax+rax+0x1]",
    "lea     rcx, [r11+rax]",
    "mov     rdi, r14",
    "mov     qword [rbp-0x90], rcx",
    "call    malloc",
    "mov     r11, qword [rbp-0x88]",
    "mov     rdx, qword [rbp-0x98]",
    "test    rax, rax",
    "mov     r13, rax",
    "je      0x7e427",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   eax, byte [r11]",
    "cmp     al, 0x1",
    "je      0x7e3a8",
    "jmp     0x7de9f",
    "mov     r14, qword [rbp-0x60]",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    sub_72bd0",
    "mov     rdi, r14",
    "mov     rbx, rax",
    "call    free",
    "mov     qword [rbp-0x60], rbx",
    "jmp     0x7de98",
    "mov     rdi, r12",
    "call    sub_87450",
    "mov     qword [rbp-0x60], rax",
    "jmp     0x7e12e",
    "mov     edi, 0x2",
    "call    malloc",
    "mov     qword [rbp-0x60], rax",
    "test    rax, rax",
    "je      0x7e411",
    "mov     rax, qword [r12+0x8]",
    "mov     rsi, qword [rbp-0x60]",
    "mov     ecx, ebx",
    "mov     rdx, r13",
    "mov     rdi, qword [rax]",
    "call    pat_subst",
    "mov     r14, rax",
    "call    alloc_word_desc",
    "mov     r15, rax",
    "test    r14, r14",
    "jne     0x7da80",
    "xor     r15d, r15d",
    "lea     rcx, [rbp-0x40]",
    "mov     r14d, r15d",
    "mov     qword [rbp-0x88], rcx",
    "mov     r15, r13",
    "jmp     0x7ddfa",
    "mov     rdi, r13",
    "call    strlen",
    "mov     qword [rbp-0x90], rax",
    "movsx   eax, r14b",
    "jmp     0x7dda0",
    "mov     qword [rbp-0x90], 0x2",
    "movsx   eax, r14b",
    "cmp     byte [r11+0x1], 0x0",
    "jne     0x7dc6c",
    "mov     r8, r13",
    "test    al, al",
    "je      0x7dcf2",
    "mov     rdi, r12",
    "call    free",
    "jmp     0x7de98",
    "mov     esi, 0x2",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x60]",
    "mov     r9d, 0x7f",
    "mov     word [rax], r9w",
    "jmp     0x7e12e",
    "mov     qword [r15], r14",
    "mov     rdi, qword [r12+0x8]",
    "call    dispose_word",
    "mov     qword [r12+0x8], r15",
    "mov     r12, qword [r12]",
    "test    r12, r12",
    "je      0x7dfb0",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x7e3f9",
    "cmp     eax, 0x5c",
    "je      0x7e1c8",
    "mov     rsi, r11",
    "lea     rcx, [rbp-0x40]",
    "mov     dword [rbp-0x9c], ebx",
    "mov     r14, rdx",
    "mov     qword [rbp-0xa8], r11",
    "mov     rbx, rsi",
    "mov     r11, r13",
    "mov     qword [rbp-0x98], rcx",
    "jmp     0x7dcbd",
    "mov     eax, 0x1",
    "mov     word [r13], ax",
    "jmp     0x7dcf6",
    "mov     byte [r8], 0x0",
    "mov     edx, ebx",
    "mov     ecx, ebx",
    "mov     r10, qword [rbp-0x68]",
    "mov     r12d, dword [rbp-0x74]",
    "sar     edx, 0x5",
    "sar     ecx, 0x3",
    "mov     edi, 0x40",
    "and     edx, 0x1",
    "and     ecx, 0x8",
    "test    bl, 0x80",
    "je      0x7e000",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r14], 0x0",
    "jmp     0x7da80",
    "add     r14d, 0x1",
    "movsxd  rax, r14d",
    "movzx   eax, byte [r15+rax]",
    "test    al, al",
    "je      0x7e370",
    "cmp     eax, 0x26",
    "je      0x7e1e8",
    "cmp     al, 0x1",
    "jne     0x7dc98",
    "mov     rax, qword [rdx+0x8]",
    "cmp     r11, qword [rax]",
    "je      0x7dd15",
    "mov     rdi, rdx",
    "call    dispose_words",
    "jmp     0x7dd45",
    "mov     rdi, r11",
    "mov     qword [rbp-0x88], rdx",
    "call    free",
    "mov     rdx, qword [rbp-0x88]",
    "mov     rsi, r10",
    "mov     qword [rbp-0x68], r10",
    "call    string_list_pos_params",
    "mov     rdi, qword [rbp-0x68]",
    "mov     r14, rax",
    "mov     qword [rbp-0x60], rax",
    "call    dispose_words",
    "test    r14, r14",
    "je      0x7e050",
    "test    bl, 0x40",
    "je      0x7e1a0",
    "mov     r13, r15",
    "jmp     0x7da1c",
    "cmp     al, 0x26",
    "je      0x7e1e8",
    "mov     r13, r15",
    "or      bh, 0x1",
    "jmp     0x7da1c",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jg      0x7ddc0",
    "movzx   ecx, byte [rbx]",
    "movzx   ecx, byte [rbx+0x1]",
    "cmp     cl, 0x26",
    "je      0x7e2e0",
    "test    r12d, r12d",
    "jne     0x7e040",
    "xor     ecx, ecx",
    "mov     edi, 0x2a",
    "jmp     0x7e000",
    "mov     r8d, dword [rel data_1619c4]",
    "mov     edi, 0x2a",
    "test    r8d, r8d",
    "je      0x7e000",
    "cmp     al, 0x5c",
    "jne     0x7de0c",
    "movsxd  rdx, r14d",
    "lea     rdi, [rel is_basic_table]",
    "lea     rsi, [r15+rdx]",
    "movzx   ecx, byte [rsi]",
    "mov     eax, ecx",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdi+rax*4]",
    "shr     eax, cl",
    "and     eax, 0x1",
    "je      0x7e1f8",
    "add     r14d, 0x1",
    "jmp     0x7ddea",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x7e2a0",
    "mov     byte [r11], cl",
    "add     rbx, 0x1",
    "add     r11, 0x1",
    "mov     byte [r11], 0x5c",
    "movzx   eax, byte [rbx+0x1]",
    "add     r11, 0x2",
    "add     rbx, 0x2",
    "mov     byte [r11-0x1], al",
    "jmp     0x7dcb6",
    "cmp     cl, 0x5c",
    "je      0x7e2e0",
    "lea     rax, [rel ifs_is_null]",
    "mov     ecx, dword [rbp-0x78]",
    "or      ecx, dword [rax]",
    "jne     0x7de98",
    "lea     rax, [rel ifs_is_null]",
    "mov     esi, dword [rax]",
    "mov     eax, 0x1",
    "test    esi, esi",
    "cmovne  edx, eax",
    "nop     ",
    "lea     rax, [rel locale_utf8locale]",
    "mov     r10d, dword [rax]",
    "test    r10d, r10d",
    "je      0x7e220",
    "add     r14d, eax",
    "movsxd  rax, r14d",
    "movsx   eax, byte [r15+rax]",
    "test    eax, eax",
    "je      0x7e370",
    "lea     rax, [rel locale_utf8locale]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x7e318",
    "movzx   eax, byte [rbx]",
    "mov     byte [r11], al",
    "mov     eax, 0x1",
    "mov     r8, r11",
    "mov     ebx, dword [rbp-0x9c]",
    "mov     r11, qword [rbp-0xa8]",
    "mov     rdx, r14",
    "movzx   eax, byte [rbx]",
    "test    al, al",
    "je      0x7dcdf",
    "add     rbx, 0x1",
    "test    cl, cl",
    "jne     0x7dc9b",
    "jmp     0x7df85",
    "mov     rax, qword [rbp-0x90]",
    "mov     rcx, qword [rbp-0x88]",
    "xor     edi, edi",
    "mov     r13, qword [rbp-0x40]",
    "sub     rax, rdx",
    "mov     rdx, rax",
    "call    mbrtowc",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0x7e290",
    "test    cl, cl",
    "js      0x7e220",
    "mov     rdx, qword [rbp-0x90]",
    "mov     rax, qword [rbp-0x40]",
    "xor     edi, edi",
    "mov     rsi, rbx",
    "mov     rcx, qword [rbp-0x98]",
    "mov     qword [rbp-0x88], r11",
    "sub     rdx, rbx",
    "mov     qword [rbp-0xb0], rax",
    "call    mbrtowc",
    "mov     r11, qword [rbp-0x88]",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0x7e2b7",
    "test    cl, cl",
    "js      0x7e318",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jg      0x7e258",
    "test    rax, rax",
    "je      0x7de18",
    "mov     qword [rbp-0x40], r13",
    "add     r14d, 0x1",
    "jmp     0x7ddea",
    "mov     eax, 0x1",
    "je      0x7de18",
    "test    rax, rax",
    "mov     ecx, 0x1",
    "cmovne  rcx, rax",
    "xor     eax, eax",
    "nop     dword [rax]",
    "mov     rax, qword [rbp-0xb0]",
    "mov     qword [rbp-0x40], rax",
    "jmp     0x7e270",
    "setne   al",
    "movzx   eax, al",
    "jmp     0x7dde7",
    "jmp     0x7dde7",
    "movzx   edx, byte [rbx+rax]",
    "mov     byte [r11+rax], dl",
    "add     rax, 0x1",
    "cmp     rcx, rax",
    "jne     0x7e2c8",
    "jmp     0x7e27b",
    "add     r11, rax",
    "add     rbx, rax",
    "jmp     0x7dcb6"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}