{
  "address": "0x8d890",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "lea     rdi, [rel data_11f1a4]  {\"PIPESTATUS\"}",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edx, dword [rax]",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     dword [rax], edx",
    "call    find_variable",
    "mov     qword [rbp-0x28], rax",
    "test    rax, rax",
    "je      0x8d8e8",
    "mov     eax, dword [rel data_1611a0]",
    "and     eax, 0x51",
    "cmp     eax, 0x1",
    "je      0x8d920",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0x8da90",
    "lea     rax, [rel trap_list]",
    "mov     r13, qword [rax]",
    "mov     rdi, r13",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x8dab1",
    "mov     rdi, qword [rbp-0x28]",
    "call    restore_pipestatus_array",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x2c], eax",
    "mov     qword [rbp-0x28], 0x0",
    "jmp     0x8d8e8",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x28], rdi",
    "test    rdi, rdi",
    "je      0x8d8e8",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "mov     rdx, rbx",
    "call    __strcpy_chk",
    "mov     eax, dword [rel data_1611a0]",
    "xor     esi, esi",
    "mov     qword [rbp-0x40], r12",
    "lea     rdi, [rel top_level]",
    "mov     dword [rbp-0x34], 0x0",
    "and     eax, 0xfffffffe",
    "or      eax, 0x10",
    "mov     dword [rel data_1611a0], eax",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x2c], eax",
    "lea     rax, [rel running_trap]",
    "mov     dword [rax], 0x1",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     dword [rbp-0x30], eax",
    "lea     rax, [rel return_catch_flag]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x8d9c5",
    "call    array_copy",
    "mov     qword [rbp-0x28], rax",
    "mov     eax, dword [rbp-0x30]",
    "or      eax, dword [rbp-0x34]",
    "je      0x8da08",
    "lea     rdi, [rel return_catch]",
    "xor     esi, esi",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     dword [rbp-0x34], eax",
    "call    reset_parser",
    "mov     rdi, qword [rbp-0x40]",
    "mov     edx, 0x415",
    "lea     rsi, [rel data_120a7d]  {\"exit trap\"}",
    "call    parse_and_execute",
    "cmp     dword [rbp-0x30], 0x4",
    "je      0x8da80",
    "mov     eax, dword [rbp-0x2c]",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     rdi, rbx",
    "call    array_flush",
    "mov     rbx, qword [rbx+0x10 {Elf64_Header::type}] {Elf64_Header::machine} {Elf64_Header::version}",
    "test    rbx, rbx",
    "je      0x8da63",
    "lea     rax, [rel last_command_exit_value]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x2c], eax",
    "jmp     0x8da22",
    "mov     eax, dword [rbp-0x30]",
    "cmp     eax, 0x3",
    "je      0x8da80",
    "mov     rdi, qword [rbp-0x28]",
    "call    free",
    "mov     eax, dword [rbp-0x2c]",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbx+0x8]",
    "test    rdi, rdi",
    "je      0x8da5b",
    "lea     rax, [rel running_trap]",
    "mov     rbx, qword [rbp-0x28]",
    "mov     dword [rax], 0x0",
    "test    rbx, rbx",
    "je      0x8d90b",
    "cmp     eax, 0x6",
    "je      0x8da80",
    "mov     rdi, rbx",
    "call    free",
    "call    free",
    "mov     eax, dword [rbp-0x34]",
    "test    eax, eax",
    "je      0x8daa0",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x2c], eax",
    "jmp     0x8da22",
    "lea     rax, [rel return_catch_value]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x2c], eax",
    "jmp     0x8da22"
  ]
}