{
  "address": "0xe5e80",
  "rules": [
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "mov     eax, dword [rel data_16a45c]",
    "test    eax, eax",
    "je      0xe5e98",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "lea     r14, [rel rl_instream]",
    "push    r13",
    "lea     r13, [rel data_16a420]",
    "push    r12",
    "push    rbx",
    "mov     rdi, qword [r14]",
    "call    fileno",
    "mov     rsi, r13",
    "mov     edi, eax",
    "call    sub_e5310",
    "test    eax, eax",
    "js      0xe5fa5",
    "xor     eax, eax",
    "retn    ",
    "mov     eax, 0xffffffff",
    "jmp     0xe5f5f",
    "movdqa  xmm0, xmmword [rel data_16a420]",
    "movdqa  xmm1, xmmword [rel data_16a430]",
    "lea     r12, [rel data_16a520]",
    "movdqa  xmm2, xmmword [rel data_16a440]",
    "movdqu  xmm3, xmmword [rel data_16a440+0xc]",
    "mov     rdi, qword [r14]",
    "movaps  xmmword [rel data_16a520], xmm0",
    "movaps  xmmword [rel data_16a540], xmm2",
    "and     dword [rel data_16a520+0xc], 0xfffffffe",
    "and     dword [rel data_16a520], 0xfffffbff",
    "movaps  xmmword [rel data_16a530], xmm1",
    "movups  xmmword [rel data_16a540+0xc], xmm3",
    "call    fileno",
    "mov     ebx, eax",
    "jmp     0xe5f40",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "mov     rdx, r12",
    "mov     esi, 0x1",
    "mov     edi, ebx",
    "call    tcsetattr",
    "test    eax, eax",
    "js      0xe5f30",
    "call    __errno_location",
    "cmp     dword [rax], 0x4",
    "jne     0xe5f70",
    "mov     dword [rel data_16a45c], 0x1",
    "mov     rdi, qword [r14]",
    "call    fileno",
    "mov     ebx, eax",
    "jmp     0xe5f90",
    "mov     dword [rax], 0x0",
    "mov     rdx, r13",
    "mov     esi, 0x1",
    "mov     edi, ebx",
    "call    tcsetattr",
    "test    eax, eax",
    "js      0xe5f80",
    "call    __errno_location",
    "cmp     dword [rax], 0x4",
    "jne     0xe5fa5",
    "jmp     0xe5f5d",
    "mov     dword [rax], 0x0",
    "xor     eax, eax"
  ]
}