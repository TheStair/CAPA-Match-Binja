{
  "address": "0xd1bf0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x48",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xd2040",
    "xor     r12d, r12d",
    "lea     rcx, [rbp-0x48]",
    "lea     rdx, [rbp-0x40]",
    "xor     esi, esi",
    "mov     qword [rbp-0x48], 0x0",
    "mov     qword [rbp-0x40], 0x0",
    "mov     qword [rel data_168fd0], 0x0",
    "mov     qword [rel data_168fc8], 0x0",
    "mov     qword [rel data_168fc0], 0x0",
    "mov     qword [rel data_168fb8], 0x0",
    "mov     qword [rel data_168fb0], 0x0",
    "mov     qword [rel data_168fa8], 0x0",
    "mov     qword [rel data_168fa0], 0x0",
    "call    sub_1132c0",
    "mov     r12d, eax",
    "cmp     eax, 0x102",
    "je      0xd2043",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x48",
    "mov     eax, r12d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd2148",
    "cmp     eax, 0x1",
    "je      0xd2040",
    "lea     rax, [rel loptend]",
    "lea     r15, [rel data_122e02]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0xd1cc2",
    "cmp     qword [rel data_168fc8], 0x0",
    "je      0xd1ce9",
    "mov     rax, qword [rax+0x8]",
    "test    rax, rax",
    "je      0xd1cc2",
    "cmp     qword [rel data_168fd0], 0x0",
    "je      0xd1d10",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1344e8]  {\"warning: -F option may not work \u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     r15, qword [rax]",
    "call    compspec_create",
    "movq    xmm0, qword [rbp-0x40]",
    "mov     r12, qword [rel data_168fa0]",
    "mov     rbx, rax",
    "mov     rax, qword [rbp-0x48]",
    "mov     dword [rbx], 0x1",
    "mov     qword [rbp-0x58], rax",
    "movhps  xmm0, qword [rbp-0x58]",
    "movups  xmmword [rbx+0x8], xmm0",
    "test    r12, r12",
    "je      0xd1d70",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_134518]  {\"warning: -C option may not work \u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     qword [rbx+0x18], r12",
    "mov     r12, qword [rel data_168fa8]",
    "test    r12, r12",
    "je      0xd1db1",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd2179",
    "mov     qword [rbx+0x20], r12",
    "mov     r12, qword [rel data_168fb0]",
    "test    r12, r12",
    "je      0xd1df2",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd21d1",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     qword [rbx+0x28], r12",
    "mov     r12, qword [rel data_168fb8]",
    "test    r12, r12",
    "je      0xd1e33",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd2163",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     qword [rbx+0x30], r12",
    "mov     r12, qword [rel data_168fc8]",
    "test    r12, r12",
    "je      0xd1e74",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd214d",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     qword [rbx+0x38], r12",
    "mov     r12, qword [rel data_168fd0]",
    "test    r12, r12",
    "je      0xd1eb5",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd218f",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     qword [rbx+0x40], r12",
    "mov     r12, qword [rel data_168fc0]",
    "test    r12, r12",
    "je      0xd1ef6",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd21a5",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "lea     r13, [rel pcomp_line]",
    "mov     qword [rbx+0x50], r12",
    "xor     r9d, r9d",
    "xor     ecx, ecx",
    "lea     r12, [rel pcomp_ind]",
    "xor     r8d, r8d",
    "mov     rdx, r15",
    "mov     rdi, rbx",
    "mov     r11, qword [r13]",
    "lea     rsi, [rel data_11f668]  {\"compgen\"}",
    "mov     qword [r13], 0x0",
    "mov     r10d, dword [r12]",
    "mov     dword [r12], 0x0",
    "mov     qword [rbp-0x68], r11",
    "mov     dword [rbp-0x5c], r10d",
    "call    gen_compspec_completions",
    "mov     r11, qword [rbp-0x68]",
    "mov     r10d, dword [rbp-0x5c]",
    "mov     r14, rax",
    "mov     qword [r13], r11",
    "mov     dword [r12], r10d",
    "test    rax, rax",
    "je      0xd2108",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xd21bb",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     rax, qword [rbp-0x58]",
    "test    al, 0x40",
    "jne     0xd2070",
    "mov     edx, dword [rax+0xc]",
    "test    edx, edx",
    "jne     0xd20d8",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, r12",
    "mov     rdx, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "xor     r8d, r8d",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, r15",
    "call    bash_default_completion",
    "mov     rdi, rax",
    "mov     r12, rax",
    "call    completions_to_stringlist",
    "mov     r14, rax",
    "test    r12, r12",
    "je      0xd20c2",
    "test    al, 0x2",
    "jne     0xd2140",
    "cmp     qword [r14], 0x0",
    "jne     0xd2120",
    "test    byte [rbp-0x58], 0x40",
    "jne     0xd2070",
    "test    r14, r14",
    "je      0xd2130",
    "mov     rdi, qword [r12]",
    "test    rdi, rdi",
    "je      0xd20ba",
    "xor     r14d, r14d",
    "jmp     0xd1f7d",
    "mov     r12d, 0x1",
    "jmp     0xd20ec",
    "mov     eax, dword [r14+0xc]",
    "jmp     0xd1ff8",
    "mov     r12d, 0x1",
    "test    byte [rbp-0x58], 0x2",
    "je      0xd20de",
    "test    byte [rbp-0x58], 0x2",
    "je      0xd2118",
    "mov     eax, dword [r14+0xc]",
    "test    eax, eax",
    "je      0xd1f73",
    "mov     rdi, r12",
    "call    free",
    "lea     r13, [r12+0x8]",
    "nop     word [rax+rax]",
    "lea     rsi, [rel rl_filename_completion_function]",
    "mov     rdi, r15",
    "call    rl_completion_matches",
    "mov     rdi, r14",
    "mov     r13, rax",
    "call    strlist_dispose",
    "mov     rdi, r13",
    "call    completions_to_stringlist",
    "mov     r14, rax",
    "test    r13, r13",
    "je      0xd1fd2",
    "sub     dword [rbx], 0x1",
    "jne     0xd2043",
    "test    eax, eax",
    "jle     0xd2033",
    "mov     rdi, rbx",
    "call    sub_a7690",
    "jmp     0xd2043",
    "nop     word [rax+rax]",
    "nop     dword [rax+rax]",
    "call    free",
    "mov     rdi, qword [r13]",
    "add     r13, 0x8",
    "test    rdi, rdi",
    "jne     0xd20a8",
    "test    r14, r14",
    "je      0xd2118",
    "mov     rdi, qword [r13]",
    "test    rdi, rdi",
    "je      0xd1fca",
    "xor     r12d, r12d",
    "jmp     0xd20e4",
    "xor     r12d, r12d",
    "lea     r15, [rel data_122e02]",
    "lea     r13, [rel data_12161c[6]]  {\"%s%s\\n\"}",
    "nop     dword [rax]",
    "cmp     qword [r14], 0x0",
    "je      0xd20de",
    "mov     rdi, r13",
    "call    free",
    "lea     r12, [r13+0x8]",
    "nop     dword [rax]",
    "mov     rdi, r14",
    "call    strlist_dispose",
    "mov     rax, qword [r14]",
    "mov     rdx, r15",
    "mov     rsi, r13",
    "mov     edi, 0x2",
    "mov     rcx, qword [rax+r12*8]",
    "xor     eax, eax",
    "add     r12, 0x1",
    "call    __printf_chk",
    "cmp     dword [r14+0xc], r12d",
    "jg      0xd2010",
    "mov     eax, dword [r14+0xc]",
    "test    eax, eax",
    "je      0xd20de",
    "call    free",
    "mov     rdi, qword [r12]",
    "add     r12, 0x8",
    "test    rdi, rdi",
    "jne     0xd1fb8",
    "nop     dword [rax]"
  ]
}