{
  "address": "0xdc4f0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "test    rdi, rdi",
    "je      0xdc5e8",
    "xor     ebx, ebx",
    "jmp     0xdc5c0",
    "mov     r12, rdi",
    "mov     edi, dword [rdi+0x8]",
    "call    strlist_create",
    "mov     r14, qword [r12]",
    "mov     rbx, rax",
    "test    r14, r14",
    "je      0xdc5d8",
    "add     rsp, 0x28",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edx, dword [r12+0x8]",
    "mov     rax, qword [rax]",
    "mov     dword [rbp-0x44], edx",
    "jmp     0xdc59c",
    "movsxd  r13, dword [r12+0x8]",
    "lea     rdx, [r13*8]",
    "mov     rax, r13",
    "mov     dword [rbp-0x44], r13d",
    "xor     r13d, r13d",
    "mov     qword [rbp-0x38], rdx",
    "test    eax, eax",
    "jle     0xdc5f0",
    "movsxd  rdx, dword [r12+0xc]",
    "movd    xmm0, dword [rbp-0x44]",
    "movd    xmm1, edx",
    "punpckldq xmm0, xmm1",
    "movq    qword [rbx+0x8], xmm0",
    "test    rax, rax",
    "je      0xdc5c0",
    "mov     rax, qword [rbx]",
    "jmp     0xdc59c",
    "nop     dword [rax]",
    "mov     qword [rax+rdx*8], 0x0",
    "mov     rax, qword [rbx]",
    "mov     qword [rax+r13], rsi",
    "add     r13, 0x8",
    "cmp     qword [rbp-0x38], r13",
    "jne     0xdc550",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x40], rsi",
    "call    strlen",
    "lea     r15, [rax+0x1]",
    "mov     rdi, r15",
    "call    malloc",
    "mov     rsi, qword [rbp-0x40]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0xdc5f5",
    "mov     rsi, qword [r14+r13]",
    "test    rsi, rsi",
    "je      0xdc58b",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "call    dcgettext",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rcx, r15",
    "mov     rdx, r15",
    "call    __memcpy_chk",
    "mov     rsi, rax"
  ]
}