{
  "address": "0x51530",
  "rules": [
    "create or open file",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "read file on Linux",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "check if file exists/9e9f210df85141fd87185852507ad125/0fcfdde5a12c4c95b0c37ee23bca2635",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "create process on Linux",
    "get file attributes",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdx",
    "push    r14",
    "mov     r14, rsi",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0xc8",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    execve",
    "call    __errno_location",
    "mov     r13d, dword [rax]",
    "mov     r12, rax",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x516a8",
    "mov     r11d, dword [rel data_161100]",
    "mov     edi, dword [rax]",
    "test    r11d, r11d",
    "jne     0x51581",
    "cmp     r13d, 0x8",
    "je      0x516c0",
    "call    sub_8e2b0",
    "{ Does not return }",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "xor     eax, eax",
    "call    open",
    "mov     edi, eax",
    "test    eax, eax",
    "jns     0x51a90",
    "xor     eax, eax",
    "cmp     r13d, 0x2",
    "lea     r14, [rel last_command_exit_value]",
    "mov     rdi, rbx",
    "sete    al",
    "lea     r15, [rbp-0xd0]",
    "add     eax, 0x7e",
    "mov     rsi, r15",
    "mov     dword [r14], eax",
    "call    stat",
    "test    eax, eax",
    "jne     0x515cd",
    "lea     rcx, [rbp-0xd0]",
    "mov     edx, 0x80",
    "mov     dword [rbp-0xe4], eax",
    "mov     rsi, rcx",
    "mov     qword [rbp-0xd8], rcx",
    "call    read",
    "mov     edi, dword [rbp-0xe4]",
    "mov     qword [rbp-0xe0], rax",
    "mov     r13d, eax",
    "call    close",
    "mov     rdx, qword [rbp-0xe0]",
    "test    edx, edx",
    "je      0x5163e",
    "call    reset_parser",
    "lea     r12, [rel aliases]",
    "mov     rdi, qword [r12]",
    "test    rdi, rdi",
    "je      0x51723",
    "mov     rdi, rbx",
    "call    file_status",
    "test    al, 0x10",
    "je      0x515e1",
    "mov     eax, dword [rbp-0xb8]",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "je      0x51670",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x51b9c",
    "jle     0x516d6",
    "lea     rax, [rel history_lines_this_session]",
    "xor     edx, edx",
    "mov     dword [rax], edx",
    "call    without_job_control",
    "lea     rsi, [rel sub_66230]",
    "mov     edi, 0x11",
    "call    set_signal_handler",
    "lea     rdi, [rel js]",
    "mov     ecx, 0x12",
    "lea     rsi, [rel data_136820]",
    "rep movsd dword [rdi], [rsi]",
    "call    reset_shell_flags",
    "lea     rax, [rel pipefail_opt]",
    "xor     ecx, ecx",
    "xor     esi, esi",
    "xor     edi, edi",
    "xor     r8d, r8d",
    "mov     dword [rax], ecx",
    "lea     rax, [rel ignoreeof]",
    "mov     dword [rax], esi",
    "lea     rax, [rel posixly_correct]",
    "mov     dword [rax], edi",
    "lea     rax, [rel dont_save_function_defs]",
    "mov     dword [rax], r8d",
    "lea     rax, [rel enable_history_list]",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel remember_on_history]",
    "mov     dword [rax], 0x1",
    "call    reset_shopt_options",
    "lea     rax, [rel shell_variables]",
    "mov     rdx, qword [rax]",
    "test    byte [rdx+0xc], 0x8",
    "je      0x517c2",
    "cmp     dword [rdi+0xc], 0x0",
    "je      0x516fd",
    "and     eax, 0x12",
    "cmp     eax, 0x2",
    "jne     0x5161b",
    "mov     dword [r12], 0x15",
    "mov     edi, 0x15",
    "call    strerror",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     r12, rax",
    "call    dcgettext",
    "mov     rdx, r12",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "jmp     0x5163b",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0xc8",
    "mov     eax, r13d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbp-0xd8]",
    "mov     esi, r13d",
    "call    check_binary_file",
    "test    eax, eax",
    "je      0x516d6",
    "cmp     qword [rel data_161a50], 0x0",
    "je      0x517d6",
    "mov     rdx, qword [rdx+0x18]",
    "mov     qword [rax], rdx",
    "mov     r13, qword [r12]",
    "mov     rdi, qword [r13]",
    "call    free",
    "mov     rdi, r13",
    "call    free",
    "lea     rax, [rel it_aliases]",
    "xor     r9d, r9d",
    "mov     qword [r12], r9",
    "or      dword [rax], 0x2",
    "lea     rsi, [rel sub_87160]",
    "call    sub_87820",
    "mov     dword [r12], r13d",
    "mov     edi, r13d",
    "call    strerror",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    report_error",
    "cmp     r13d, 0x7",
    "je      0x5161b",
    "mov     r13d, dword [r14]",
    "mov     edi, 0x8",
    "call    strerror",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132b20]  {\"%s: cannot execute binary file: \u2026\"}",
    "xor     edi, edi",
    "mov     r13, rax",
    "call    dcgettext",
    "mov     rdx, r13",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "mov     dword [r12], 0x8",
    "lea     rax, [rel parse_and_execute_level]",
    "xor     esi, esi",
    "xor     edi, edi",
    "xor     r8d, r8d",
    "xor     r9d, r9d",
    "xor     r10d, r10d",
    "xor     r11d, r11d",
    "xor     r12d, r12d",
    "mov     dword [rax], esi",
    "lea     rax, [rel sourcenest]",
    "mov     dword [rax], edi",
    "lea     rax, [rel evalnest]",
    "mov     dword [rax], r8d",
    "lea     rax, [rel funcnest]",
    "mov     dword [rax], r9d",
    "lea     rax, [rel return_catch_flag]",
    "mov     dword [rax], r10d",
    "lea     rax, [rel variable_context]",
    "mov     dword [rax], r11d",
    "lea     rax, [rel executing_list]",
    "mov     dword [rax], r12d",
    "lea     rax, [rel interactive_shell]",
    "cmp     dword [rax], 0x0",
    "je      0x51bb5",
    "xor     r13d, r13d",
    "mov     qword [rel data_161a50], r13",
    "cmp     r13d, 0xc",
    "je      0x5161b",
    "lea     r12, [rel default_buffered_input]",
    "mov     edi, dword [r12]",
    "test    edi, edi",
    "jle     0x5183d",
    "call    set_sigint_handler",
    "mov     rdi, r14",
    "call    strvec_len",
    "mov     rdi, r14",
    "lea     esi, [rax+0x2]",
    "mov     r12d, eax",
    "lea     r13d, [rax+0x1]",
    "call    strvec_resize",
    "mov     r14, rax",
    "test    r12d, r12d",
    "je      0x51893",
    "cmp     r13d, 0x2",
    "je      0x51b38",
    "call    close_buffered_fd",
    "lea     rax, [rel bash_input]",
    "xor     ecx, ecx",
    "mov     dword [r12], 0xffffffff",
    "mov     dword [rax+0x10], 0xffffffff",
    "mov     dword [rax], ecx",
    "jmp     0x5183d",
    "lea     rax, [rel shell_name]",
    "movq    xmm1, rbx",
    "xor     edx, edx",
    "movq    xmm0, qword [rax]",
    "movsxd  rax, r13d",
    "punpcklqdq xmm0, xmm1",
    "movups  xmmword [r14], xmm0",
    "mov     qword [r14+rax*8], rdx",
    "mov     rax, qword [r14]",
    "cmp     byte [rax], 0x2d",
    "jne     0x518c3",
    "lea     ecx, [r12-0x1]",
    "movsxd  rax, r12d",
    "imul    rdx, rcx, 0xfffffffffffffff8",
    "shl     rax, 0x3",
    "lea     rcx, [rcx*8+0x8]",
    "lea     rsi, [rdx+rax-0x8]",
    "add     rdx, rax",
    "lea     rdi, [r14+rdx]",
    "add     rsi, r14",
    "mov     rdx, rcx",
    "call    memmove",
    "mov     dword [r12], 0x2",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132af0]  {\"%s: cannot execute: required fil\u2026\"}",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "jmp     0x5163b",
    "mov     dword [rbp-0xd8], eax",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "xor     eax, eax",
    "call    open",
    "mov     edi, eax",
    "test    eax, eax",
    "jns     0x51960",
    "lea     rax, [rel restricted]",
    "cmp     dword [rax], 0x0",
    "jne     0x51ba1",
    "add     rax, 0x1",
    "mov     qword [r14], rax",
    "mov     edx, 0x80",
    "mov     rsi, r15",
    "mov     dword [rbp-0xe4], eax",
    "call    read",
    "mov     edi, dword [rbp-0xe4]",
    "mov     qword [rbp-0xe0], rax",
    "mov     dword [rbp-0xe8], eax",
    "call    close",
    "mov     rdx, qword [rbp-0xe0]",
    "test    edx, edx",
    "jle     0x5161b",
    "mov     esi, 0x2b",
    "mov     edi, 0x72",
    "call    change_flag",
    "jmp     0x518d3",
    "lea     rbx, [rel subshell_argv]",
    "cmp     qword [rbx], 0x0",
    "je      0x51bec",
    "lea     eax, [rdx-0x1]",
    "cdqe    ",
    "mov     byte [rbp+rax-0xd0], 0x0",
    "cmp     edx, 0x2",
    "jle     0x5161b",
    "lea     r12, [rel subshell_argc]",
    "jmp     0x51918",
    "lea     r12, [rel subshell_argc]",
    "xor     eax, eax",
    "jmp     0x51906",
    "cmp     byte [rbp-0xd0], 0x23",
    "jne     0x5161b",
    "mov     rdi, qword [rel data_161a20]",
    "call    dispose_command",
    "xor     eax, eax",
    "mov     dword [r12], r13d",
    "mov     qword [rel data_161a20], rax",
    "lea     rax, [rel subshell_envp]",
    "mov     qword [rbx], r14",
    "mov     qword [rax], r15",
    "call    unbind_args",
    "call    clear_fifo_list",
    "lea     rdi, [rel subshell_top_level]",
    "mov     esi, 0x1",
    "call    __longjmp_chk",
    "{ Does not return }",
    "mov     rdi, qword [rbx]",
    "add     rax, 0x1",
    "cmp     dword [r12], eax",
    "jg      0x518ef",
    "cmp     byte [rbp-0xcf], 0x21",
    "mov     esi, dword [rbp-0xe8]",
    "mov     ecx, dword [rbp-0xd8]",
    "jne     0x5161b",
    "mov     rdi, qword [rdi+rax*8]",
    "mov     qword [rbp-0xd8], rax",
    "call    free",
    "mov     rax, qword [rbp-0xd8]",
    "call    free",
    "lea     rax, [rbp-0xce]",
    "jmp     0x519ef",
    "movzx   edi, byte [rax]",
    "cmp     dil, 0x20",
    "je      0x519e0",
    "add     ecx, 0x1",
    "add     rax, 0x1",
    "cmp     esi, ecx",
    "je      0x51b65",
    "cmp     dil, 0x9",
    "je      0x519e0",
    "mov     edx, ecx",
    "jmp     0x51a2e",
    "cmp     edx, ecx",
    "jle     0x51b65",
    "mov     esi, ecx",
    "mov     rdi, r15",
    "call    substring",
    "mov     rdi, rax",
    "mov     r14, rax",
    "call    strlen",
    "mov     dword [r12], r13d",
    "movsxd  r13, eax",
    "cmp     byte [r14+r13-0x1], 0xd",
    "je      0x51b6c",
    "movsxd  rax, ecx",
    "mov     edx, ecx",
    "add     rax, r15",
    "jmp     0x51a21",
    "add     eax, 0x2",
    "mov     rdi, r14",
    "movsxd  r12, eax",
    "mov     rsi, r12",
    "call    realloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x51bf8",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fe47]  {\"%s: %s: bad interpreter\"}",
    "call    dcgettext",
    "mov     rdx, r14",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    sys_error",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x51b2a",
    "movzx   edi, byte [rax]",
    "lea     r8d, [rdi-0x9]",
    "cmp     r8b, 0x1",
    "ja      0x51a10",
    "mov     rsi, r12",
    "xor     eax, eax",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     r10d, 0x4d5e",
    "mov     byte [rax+r13+0x1], 0x0",
    "mov     word [rax+r13-0x1], r10w",
    "jmp     0x51a56",
    "mov     r13d, 0x7e",
    "jmp     0x5163e",
    "cmp     dil, 0x20",
    "je      0x51a2e",
    "add     edx, 0x1",
    "add     rax, 0x1",
    "cmp     esi, edx",
    "je      0x51a2e"
  ]
}