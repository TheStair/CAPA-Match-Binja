{
  "address": "0xccad0",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "lea     rdi, [rel data_11f1dc]  {\"autocd\"}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "xor     r14d, r14d  {0x0}",
    "push    r13 {__saved_r13}",
    "lea     r13, [rbp-0x80 {var_88}]",
    "push    r12 {__saved_r12}",
    "mov     r12, r13 {var_88}",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rel data_156088]",
    "sub     rsp, 0x68",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "nop     dword [rax]",
    "mov     rdi, qword [rbx+0x10]",
    "add     r12, 0x1",
    "add     rbx, 0x18",
    "test    rdi, rdi",
    "jne     0xccb10",
    "call    strlen",
    "mov     byte [r12], 0x1",
    "lea     r14d, [r14+rax+0x1]",
    "mov     rax, qword [rbx]",
    "mov     byte [r12], 0x0",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0xccb2d",
    "add     r14d, 0x1",
    "movsxd  r14, r14d",
    "mov     rdi, r14",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xccc75",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rbx, [rel data_156098]",
    "xor     ecx, ecx  {0x0}",
    "lea     r12, [rel data_11f1dc]  {\"autocd\"}",
    "jmp     0xccb80",
    "cmp     byte [r13], 0x0",
    "je      0xccb70",
    "mov     r12, qword [rbx]",
    "add     r13, 0x1",
    "add     rbx, 0x18",
    "test    r12, r12",
    "je      0xccbd3",
    "movsxd  rdi, ecx",
    "mov     rsi, r12",
    "mov     dword [rbp-0x84 {var_8c_1}], ecx",
    "cmp     r14, rdi",
    "mov     rdx, rdi",
    "cmovae  rdx, r14",
    "add     r13, 0x1",
    "add     rbx, 0x18",
    "sub     rdx, rdi",
    "add     rdi, r15",
    "call    __strcpy_chk",
    "mov     rdi, r12",
    "call    strlen",
    "mov     ecx, dword [rbp-0x84 {var_8c_1}]",
    "mov     r12, qword [rbx-0x18]",
    "add     eax, ecx",
    "lea     ecx, [rax+0x1]",
    "cdqe    ",
    "mov     byte [r15+rax], 0x3a",
    "test    r12, r12",
    "jne     0xccb80",
    "mov     rax, r15",
    "test    ecx, ecx",
    "je      0xccbe4",
    "mov     byte [rax], 0x0",
    "lea     r12, [rel data_121b52]",
    "mov     ebx, 0x1",
    "mov     rdi, r12  {data_121b52, \"BASHOPTS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0xccc10",
    "sub     ecx, 0x1",
    "movsxd  rcx, ecx",
    "lea     rax, [r15+rcx]",
    "xor     edx, edx  {0x0}",
    "mov     rsi, r15",
    "mov     rdi, r12  {data_121b52, \"BASHOPTS\"}",
    "call    bind_variable",
    "mov     edx, dword [rax+0x28]",
    "mov     ecx, edx",
    "or      ecx, 0x2",
    "mov     dword [rax+0x28], ecx",
    "lea     rcx, [rel mark_modified_vars]",
    "mov     ecx, dword [rcx]  {mark_modified_vars}",
    "test    ecx, ecx",
    "je      0xccc39",
    "mov     ebx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     edx, ebx",
    "not     ebx",
    "and     edx, 0xfffffffd",
    "and     ebx, 0x1",
    "mov     dword [rax+0x28 {Elf64_Header::section_header_offset.d}], edx",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xccc70",
    "test    bl, bl",
    "jne     0xccc60",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x68",
    "mov     rdi, r15",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     free",
    "test    dl, 0x1",
    "je      0xccc39",
    "and     edx, 0xfffffffe",
    "or      edx, 0x2",
    "mov     dword [rax+0x28], edx",
    "jmp     0xccc39"
  ]
}