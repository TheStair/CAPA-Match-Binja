{
  "address": "0x72180",
  "rules": [
    "encrypt data using RC4 KSA/89b7ba675fcb4f4eac2317f83c0a9436",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "mov     r12, rdi",
    "mov     edi, 0x11",
    "push    rbx",
    "sub     rsp, 0x8",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7220c",
    "mov     esi, 0x11",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel ifs_firstc_len]",
    "mov     r13, qword [rax]",
    "cmp     r13, 0x1",
    "jne     0x721e8",
    "lea     rsi, [rel ifs_firstc]",
    "mov     rdx, r13",
    "mov     ecx, 0x11",
    "mov     rdi, rbx",
    "call    __memcpy_chk",
    "mov     eax, r13d",
    "movsxd  r13, r13d",
    "mov     byte [rbx+r13], 0x0",
    "jmp     0x721ce",
    "lea     rax, [rel ifs_firstc]",
    "mov     byte [rbx+0x1], 0x0",
    "movzx   eax, byte [rax]",
    "test    al, al",
    "mov     byte [rbx], al",
    "setne   al",
    "movzx   eax, al",
    "test    r12, r12",
    "je      0x721d7",
    "add     rsp, 0x8",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     dword [r12], eax"
  ]
}