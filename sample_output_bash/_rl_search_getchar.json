{
  "address": "0xf2900",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "encrypt data using Curve25519/a423aa5d0923438c8eac88d5abe4fcd5"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     r12, [rel rl_readline_state]",
    "or      qword [r12], 0x40",
    "call    rl_read_key",
    "and     qword [r12], 0xffffffffffffffbf",
    "mov     dword [r13+0x6c], eax",
    "mov     ebx, eax",
    "test    eax, eax",
    "jns     0xf2950",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0xf2934",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xf2988",
    "lea     rax, [rel rl_byte_oriented]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xf2934",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "add     rsp, 0x8",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x8",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     edi, dword [r13+0x6c]",
    "lea     rsi, [r13+0x70]",
    "mov     edx, 0x10",
    "call    _rl_read_mbstring",
    "mov     dword [r13+0x6c], eax",
    "mov     ebx, eax",
    "jmp     0xf2934"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}