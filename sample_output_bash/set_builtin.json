{
  "address": "0xc2440",
  "rules": [
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xc2550",
    "xor     edi, edi",
    "call    sub_5b3c0",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xc2598",
    "lea     rax, [rel loptend]",
    "mov     r14, rdi",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     qword [rax], 0x0",
    "lea     rax, [rel lcurrent]",
    "mov     qword [rax], 0x0",
    "lea     rax, [rel posixly_correct]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0xc25d0",
    "mov     rdi, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "lea     rbx, [rax+0x8] {Elf64_Header::ident.abi_version}",
    "test    rdi, rdi",
    "jne     0xc257c",
    "mov     dword [rbp-0x48], 0x0",
    "xor     r15d, r15d",
    "cmp     eax, 0x3f",
    "je      0xc2538",
    "xor     edi, edi",
    "call    map_over_funcs",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xc25a5",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xc2817",
    "test    byte [rdi+0x29], 0x10",
    "jne     0xc2570",
    "jmp     0xc2590",
    "movzx   r12d, byte [rcx+0x1]",
    "test    r12b, r12b",
    "je      0xc281c",
    "cmp     byte [rbp-0x49], 0x2b",
    "jne     0xc2805",
    "call    builtin_usage",
    "lea     rax, [rel list_optopt]",
    "cmp     dword [rax], 0x3f",
    "jne     0xc24cd",
    "cmp     eax, 0x69",
    "je      0xc24f8",
    "cmp     qword [rax], 0x0",
    "je      0xc27fb",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "xor     edi, edi",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sh_chkwrite",
    "mov     rdi, qword [rbx]",
    "add     rbx, 0x8 {Elf64_Header::ident.abi_version}",
    "test    rdi, rdi",
    "je      0xc2590",
    "call    print_assignment",
    "jmp     0xc2570",
    "mov     rdi, r12",
    "call    free",
    "mov     rbx, qword [r14]",
    "mov     esi, 0x2b",
    "mov     edi, 0x78",
    "call    change_flag",
    "mov     esi, 0x2b",
    "mov     edi, 0x76",
    "call    change_flag",
    "test    rbx, rbx",
    "jne     0xc284a",
    "cmp     r12b, 0x2d",
    "je      0xc27de",
    "mov     esi, 0x1",
    "mov     rdi, r14",
    "call    remember_args",
    "jmp     0xc273c",
    "movsx   edi, byte [rcx+0x1]",
    "lea     r13, [rcx+0x1]",
    "mov     r12d, edi",
    "test    edi, edi",
    "je      0xc2730",
    "mov     eax, 0x102",
    "xor     eax, eax",
    "jmp     0xc24d2",
    "lea     rax, [rel list_opttype]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_11f222]  {\"%s: invalid option\"}",
    "mov     eax, dword [rax]",
    "mov     byte [rbp-0x3b], al",
    "mov     eax, 0x69",
    "mov     word [rbp-0x3a], ax",
    "call    dcgettext",
    "lea     rsi, [rbp-0x3b]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "call    builtin_usage",
    "jmp     0xc24cd",
    "cmp     eax, 0xffffff9d",
    "jne     0xc24a1",
    "xor     esi, esi",
    "jmp     0xc25ff",
    "mov     edx, 0x1",
    "nop     ",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "call    remember_args",
    "jmp     0xc2842",
    "mov     eax, dword [rbp-0x48]",
    "jmp     0xc2748",
    "cmp     byte [rcx+0x2], 0x0",
    "je      0xc2802",
    "mov     byte [rbp-0x44], 0x0",
    "lea     r13, [rcx+0x1]",
    "movsx   edi, r12b",
    "mov     ebx, 0x2d",
    "jmp     0xc26ce",
    "mov     eax, dword [rbp-0x48]",
    "test    r15d, r15d",
    "je      0xc24d2",
    "mov     r14, qword [r14]",
    "test    r14, r14",
    "jne     0xc263a",
    "mov     byte [rbp-0x44], 0x1",
    "mov     ebx, 0x2b",
    "jmp     0xc26ce",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xc2817",
    "lea     rsi, [rel optflags]",
    "mov     rdi, r14",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xc2630",
    "call    builtin_help",
    "lea     rcx, [rel sub_5acd0]",
    "mov     edx, 0x8",
    "mov     rdi, rbx",
    "call    qsort",
    "mov     rdi, rbx",
    "call    print_func_list",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0xc25a5",
    "mov     rsi, rdx",
    "add     rdx, 0x1",
    "cmp     qword [rbx+rdx*8-0x8], 0x0",
    "jne     0xc25f0",
    "mov     dword [rbp-0x44], eax",
    "call    set_shellopts",
    "mov     eax, dword [rbp-0x44]",
    "jmp     0xc24d2",
    "mov     r14, qword [r14]",
    "mov     byte [rbp-0x44], 0x0",
    "lea     r13, [rcx+0x1]",
    "mov     edi, 0x2d",
    "mov     ebx, 0x2d",
    "jmp     0xc26ce",
    "cmp     edi, 0x3f",
    "je      0xc2760",
    "mov     rax, qword [r14+0x8]",
    "mov     rcx, qword [rax]",
    "movzx   eax, byte [rcx]",
    "mov     byte [rbp-0x49], al",
    "cmp     al, 0x2d",
    "je      0xc2770",
    "call    builtin_usage",
    "xor     eax, eax",
    "jmp     0xc24d2",
    "cmp     edi, 0x6f",
    "je      0xc2680",
    "mov     r12, qword [r14]",
    "test    r12, r12",
    "je      0xc2710",
    "mov     esi, ebx",
    "call    change_flag",
    "cmp     eax, 0xffffffff",
    "je      0xc279a",
    "movzx   esi, byte [rbp-0x44]",
    "mov     edi, 0xffffffff",
    "call    list_minus_o_opts",
    "mov     edi, dword [rbp-0x48]",
    "call    sh_chkwrite",
    "mov     dword [rbp-0x48], eax",
    "jmp     0xc26be",
    "mov     rax, qword [r12+0x8]",
    "mov     rsi, qword [rax]",
    "test    rsi, rsi",
    "je      0xc26b0",
    "movzx   eax, byte [rbp-0x49]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "mov     byte [rbp-0x3a], r12b",
    "lea     rsi, [rel data_11f222]  {\"%s: invalid option\"}",
    "mov     byte [rbp-0x39], 0x0",
    "mov     byte [rbp-0x3b], al",
    "call    dcgettext",
    "lea     rsi, [rbp-0x3b]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "call    builtin_usage",
    "call    set_shellopts",
    "mov     eax, 0x1",
    "jmp     0xc24d2",
    "mov     r15d, 0x1",
    "jmp     0xc26be",
    "movsx   edi, byte [r13+0x1]",
    "add     r13, 0x1",
    "mov     r12d, edi",
    "test    edi, edi",
    "je      0xc2730",
    "movzx   esi, byte [rbp-0x44]",
    "mov     edi, 0xffffffff",
    "call    list_minus_o_opts",
    "movzx   eax, byte [rsi]",
    "cmp     al, 0x2d",
    "ja      0xc26f8",
    "mov     edi, ebx",
    "call    set_minus_o_option",
    "test    eax, eax",
    "jne     0xc2748",
    "mov     rcx, 0x280000000001",
    "bt      rcx, rax",
    "jae     0xc26f8",
    "mov     r14, r12",
    "mov     r15d, 0x1",
    "jmp     0xc26be"
  ]
}