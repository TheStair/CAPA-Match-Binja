{
  "address": "0x10bec0",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "mov     ebx, edi",
    "test    edi, edi",
    "js      0x10bfe8",
    "pop     rbx",
    "neg     edi",
    "pop     r12",
    "pop     rbp",
    "jmp     rl_get_next_history",
    "jne     0x10bee0",
    "cmp     qword [rel data_1688b8], 0x0",
    "je      0x10bed7",
    "pop     rbx",
    "xor     eax, eax",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel _rl_history_saved_point]",
    "mov     edx, dword [rax]",
    "cmp     edx, 0xffffffff",
    "je      0x10bff8",
    "lea     rcx, [rel rl_point]",
    "lea     rsi, [rel rl_end]",
    "mov     ecx, dword [rcx]",
    "mov     esi, dword [rsi]",
    "test    ecx, ecx",
    "jne     0x10c040",
    "lea     rax, [rel _rl_saved_line_for_history]",
    "mov     r12, qword [rax]",
    "test    r12, r12",
    "je      0x10c030",
    "cmp     ecx, esi",
    "cmove   ecx, edx",
    "mov     dword [rax], ecx",
    "jmp     0x10befc",
    "test    esi, esi",
    "je      0x10befc",
    "call    sub_105640",
    "jmp     0x10bf0f",
    "call    rl_maybe_replace_line",
    "lea     r8, [rel history_offset]",
    "mov     rsi, qword [rel data_1688b8]",
    "movsxd  rcx, dword [r8]",
    "mov     rdx, rcx",
    "shl     rcx, 0x3",
    "lea     rdi, [rsi+rcx-0x8]",
    "lea     rax, [rsi+rcx]",
    "xor     esi, esi",
    "lea     ecx, [rbx-0x1]",
    "shl     rcx, 0x3",
    "sub     rdi, rcx",
    "xor     ecx, ecx",
    "jmp     0x10bf69",
    "mov     dword [rax], ecx",
    "jmp     0x10befc",
    "test    edx, edx",
    "jne     0x10bf48",
    "mov     rbx, qword [rax-0x8]",
    "sub     edx, 0x1",
    "test    rbx, rbx",
    "je      0x10c04c",
    "test    cl, cl",
    "je      0x10bf78",
    "mov     dword [r8], edx",
    "jmp     0x10bf78",
    "sub     rax, 0x8",
    "mov     ecx, 0x1",
    "cmp     rax, rdi",
    "je      0x10bfe0",
    "mov     rbx, rsi",
    "test    rsi, rsi",
    "je      0x10c020",
    "mov     dword [r8], 0x0",
    "mov     dword [r8], edx",
    "jmp     0x10bf84",
    "mov     rsi, rbx",
    "test    r12, r12",
    "je      0x10c054",
    "mov     rdi, qword [rbx]",
    "xor     esi, esi",
    "call    rl_replace_line",
    "mov     rdx, qword [rbx+0x10]",
    "lea     rax, [rel rl_undo_list]",
    "lea     rsi, [rel rl_editing_mode]",
    "lea     rcx, [rel rl_point]",
    "mov     qword [rax], rdx",
    "lea     rax, [rel rl_end]",
    "mov     esi, dword [rsi]",
    "mov     edx, dword [rax]",
    "lea     rax, [rel rl_mark]",
    "mov     dword [rcx], edx",
    "mov     dword [rax], 0x0",
    "test    esi, esi",
    "jne     0x10bfd0",
    "call    _rl_free_saved_history_line",
    "jmp     0x10c025",
    "call    rl_ding",
    "jmp     0x10bed7",
    "call    sub_104a40",
    "pop     rbx",
    "xor     eax, eax",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "mov     dword [rcx], 0x0",
    "mov     dword [rax], edx"
  ]
}