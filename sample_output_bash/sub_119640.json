{
  "address": "0x119640",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, esi",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "test    rdi, rdi",
    "je      0x119669",
    "mov     dword [rbp-0x3c], 0x0",
    "mov     ecx, 0x40",
    "mov     ebx, 0x40",
    "cmp     byte [rdi], 0x0",
    "jne     0x119750",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x28",
    "mov     edi, 0x1",
    "mov     r15d, 0x1",
    "test    r14b, 0x4",
    "jne     0x1197a0",
    "call    strlen",
    "mov     ecx, 0x1",
    "mov     dword [rbp-0x3c], eax",
    "add     eax, 0x40",
    "movsxd  rbx, eax",
    "test    rbx, rbx",
    "cmovne  rcx, rbx",
    "jmp     0x11967a",
    "sub     rcx, 0x1",
    "lea     rdi, [r12+0x1]",
    "mov     edx, 0x8",
    "mov     r15d, 0x8",
    "lea     rsi, [rel data_122fd9]  {\"failed \"}",
    "call    __memcpy_chk",
    "mov     ecx, 0x8",
    "mov     edi, 0x8",
    "cmp     rbx, rcx",
    "cmovae  rcx, rbx",
    "jmp     0x1196b0",
    "and     r14d, 0x1",
    "jne     0x119770",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x38], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x38]",
    "test    rax, rax",
    "mov     r12, rax",
    "je      0x119806",
    "sub     rcx, rdi",
    "add     r15d, 0x8",
    "add     rdi, r12",
    "mov     edx, 0x9",
    "lea     rsi, [rel data_122fe1]  {\"reverse-\"}",
    "call    __memcpy_chk",
    "movsxd  rdi, r15d",
    "cmp     rbx, rdi",
    "mov     rcx, rdi",
    "cmovae  rcx, rbx",
    "jmp     0x1196ba",
    "sub     rcx, rdi",
    "mov     edx, 0xb",
    "lea     r14d, [r15+0xa]",
    "add     rdi, r12",
    "lea     rsi, [rel data_122fea]  {\"i-search)`\"}",
    "call    __memcpy_chk",
    "test    r13, r13",
    "je      0x1196e5",
    "lea     rax, [rel _rl_vis_botlin]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x1196fc",
    "cmp     byte [r13], 0x0",
    "jne     0x1197e0",
    "movsxd  rdi, r14d",
    "mov     edx, 0x4",
    "lea     rsi, [rel data_122ff5]",
    "cmp     rdi, rbx",
    "cmovae  rbx, rdi",
    "mov     rcx, rbx",
    "sub     rcx, rdi",
    "add     rdi, r12",
    "call    __memcpy_chk",
    "mov     rsi, r12",
    "lea     rdi, [rel data_1217ad[6]]  {\"%s\"}",
    "xor     eax, eax",
    "call    rl_message",
    "add     rsp, 0x18",
    "mov     rdi, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     free",
    "mov     dword [rel data_16a710], 0x1",
    "movsxd  rdi, r14d",
    "mov     rsi, r13",
    "cmp     rbx, rdi",
    "mov     rdx, rdi",
    "cmovae  rdx, rbx",
    "sub     rdx, rdi",
    "add     rdi, r12",
    "call    __strcpy_chk",
    "mov     eax, dword [rbp-0x3c]",
    "add     r14d, eax",
    "jmp     0x1196fc"
  ]
}