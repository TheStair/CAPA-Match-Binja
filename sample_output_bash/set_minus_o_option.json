{
  "address": "0xc1ee0",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "contain loop",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "xor     r15d, r15d  {0x0}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "mov     r12, rsi",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x18",
    "lea     rax, [rel o_options]",
    "movzx   r13d, byte [rsi]",
    "mov     dword [rbp-0x34 {var_3c}], edi",
    "lea     rsi, [rel data_11f68a]  {\"allexport\"}",
    "lea     rbx, [rax+0x28]  {data_155a28}",
    "mov     eax, 0x61",
    "jmp     0xc1f37",
    "cmp     al, r13b",
    "jne     0xc1f20",
    "mov     rsi, qword [rbx]",
    "add     rbx, 0x28",
    "add     r15d, 0x1",
    "test    rsi, rsi",
    "je      0xc1ff8",
    "mov     rdi, r12",
    "call    strcmp",
    "mov     r14d, eax",
    "test    eax, eax",
    "jne     0xc1f20",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1210b0]  {\"%s: invalid option name\"}",
    "xor     edi, edi  {0x0}",
    "mov     r14d, 0x102",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xc1f92",
    "movzx   eax, byte [rsi]",
    "lea     rdx, [rel o_options]",
    "movsxd  r15, r15d",
    "lea     rax, [r15+r15*4]",
    "lea     rax, [rdx+rax*8]",
    "mov     edi, dword [rax+0x8]",
    "test    edi, edi",
    "jne     0xc1fa8",
    "add     rsp, 0x18",
    "mov     eax, r14d",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     esi, dword [rbp-0x34 {var_3c}]",
    "call    change_flag",
    "cmp     eax, 0xffffffff",
    "jne     0xc1f92",
    "mov     rcx, qword [rax+0x20]",
    "test    rcx, rcx",
    "je      0xc1f72",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1210b0]  {\"%s: invalid option name\"}",
    "xor     edi, edi  {0x0}",
    "mov     r14d, 0x1",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xc1f92",
    "lea     rdx, [rel o_options]",
    "lea     rax, [r15+r15*4]",
    "lea     rcx, [rdx+rax*8]",
    "mov     rax, qword [rcx+0x18]",
    "test    rax, rax",
    "je      0xc1fe0",
    "mov     rdi, qword [rax]",
    "call    rcx",
    "mov     rax, qword [rcx+0x10]",
    "xor     ecx, ecx  {0x0}",
    "cmp     dword [rbp-0x34 {var_3c}], 0x2d",
    "sete    cl",
    "mov     dword [rax], ecx",
    "jmp     0xc1f92",
    "mov     edi, dword [rbp-0x34 {var_3c}]",
    "mov     rsi, r12",
    "call    rax"
  ],
  "high level IL": [
    "int32_t r15 = 0",
    "char r13 = *arg2",
    "char const* const rsi = \"allexport\"",
    "char const (** const rbx)[0xc] = &data_155a28",
    "char const rax = 0x61",
    "int32_t r14_1",
    "while (true)",
    "if (rax == r13)",
    "int32_t rax_1 = strcmp(arg2, rsi)",
    "r14_1 = rax_1",
    "if (rax_1 == 0)",
    "int64_t r15_1 = sx.q(r15)",
    "int32_t rdi_1 = *(r15_1 * 0x28 + &data_155a08)",
    "if (rdi_1 != 0)",
    "if (change_flag(rdi_1, arg1) == 0xffffffff)",
    "r14_1 = 1",
    "builtin_error(dcgettext(nullptr, \"%s: invalid option name\", 5), 0)",
    "int64_t rcx_1 = *(r15_1 * 0x28 + 0x155a20)",
    "if (rcx_1 != 0)",
    "rcx_1((&o_options)[r15_1 * 5])",
    "int64_t rax_5 = *(r15_1 * 0x28 + 0x155a18)",
    "if (rax_5 == 0)",
    "int32_t rcx_3",
    "rcx_3.b = arg1 == 0x2d",
    "**(r15_1 * 0x28 + 0x155a10) = rcx_3",
    "rax_5(zx.q(arg1), arg2, &o_options)",
    "break",
    "rsi = *rbx",
    "rbx = &rbx[5]",
    "r15 += 1",
    "if (rsi == 0)",
    "r14_1 = 0x102",
    "builtin_error(dcgettext(nullptr, \"%s: invalid option name\", 5), 0)",
    "break",
    "rax = *rsi",
    "return zx.q(r14_1)"
  ]
}