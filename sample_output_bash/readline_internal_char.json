{
  "address": "0xdf300",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "xor     esi, esi",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "lea     rax, [rel _rl_last_command_was_kill]",
    "lea     rdi, [rel _rl_top_level]",
    "mov     dword [rel data_1691b8], 0xffffffff",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x24], eax",
    "call    __sigsetjmp",
    "endbr64 ",
    "test    eax, eax",
    "je      0xdf373",
    "lea     rax, [rel rl_pending_input]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0xdf4b0",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "lea     rax, [rel _rl_want_redisplay]",
    "lea     rdx, [rel rl_readline_state]",
    "mov     dword [rax], 0x0",
    "mov     rax, qword [rdx]",
    "test    eax, 0x4000000",
    "jne     0xdf5a0",
    "lea     rax, [rel rl_arg_sign]",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel rl_numeric_arg]",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel rl_explicit_arg]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel _rl_argcxt]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel rl_key_sequence_length]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel rl_executing_keyseq]",
    "mov     rax, qword [rax]",
    "mov     byte [rax], 0x0",
    "jmp     0xdf384",
    "lea     rbx, [rel rl_readline_state]",
    "or      qword [rbx], 0x8",
    "call    rl_read_key",
    "mov     rdx, qword [rbx]",
    "and     rdx, 0xfffffffffffffff7",
    "mov     qword [rbx], rdx",
    "cmp     eax, 0xfffffffe",
    "je      0xdf5f0",
    "or      rax, 0x2000000",
    "mov     qword [rdx], rax",
    "lea     rax, [rel rl_done]",
    "mov     dword [rax], 0x1",
    "test    eax, 0x80000",
    "jne     0xdf49e",
    "lea     rax, [rel rl_done]",
    "or      rdx, 0x2000000",
    "mov     qword [rbx], rdx",
    "mov     dword [rax], 0x1",
    "jmp     0xdf5b6",
    "cmp     eax, 0xffffffff",
    "je      0xdf508",
    "add     rsp, 0x18",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x18",
    "mov     eax, 0x1",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel rl_end]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0xdf579",
    "lea     rdx, [rel _rl_eof_char]",
    "movzx   edi, al",
    "cmp     eax, dword [rdx]",
    "je      0xdf610",
    "lea     rax, [rel rl_readline_state]",
    "or      rdx, 0x2000000",
    "mov     qword [rax], rdx",
    "lea     rax, [rel rl_done]",
    "mov     dword [rax], 0x1",
    "jmp     0xdf5b6",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0xdf547",
    "cmp     eax, dword [rel data_1691b8]",
    "je      0xdf3c2",
    "mov     dword [rel data_1691b8], eax",
    "lea     rax, [rel _rl_keymap]",
    "xor     edx, edx",
    "mov     rsi, qword [rax]",
    "lea     rax, [rel _rl_dispatching_keymap]",
    "mov     qword [rax], rsi",
    "call    _rl_dispatch_subseq",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xdf5e0",
    "lea     rax, [rel _rl_eof_char]",
    "mov     eax, dword [rax]",
    "test    dl, 0x4",
    "je      0xdf648",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xdf670",
    "lea     rdx, [rel rl_end]",
    "mov     edx, dword [rdx]",
    "test    edx, edx",
    "je      0xdf67c",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0xdf3f4",
    "lea     r12, [rel _rl_command_to_execute]",
    "cmp     qword [r12], 0x0",
    "je      0xdf47a",
    "cmp     eax, 0xa",
    "je      0xdf660",
    "mov     ecx, dword [rel data_1691b8]",
    "cmp     ecx, eax",
    "je      0xdf56c",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0xdf52c",
    "lea     rax, [rel rl_signal_event_hook]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0xdf53d",
    "lea     rax, [rel rl_readline_state]",
    "mov     rdx, qword [rax]",
    "jmp     0xdf579",
    "movzx   edi, al",
    "jmp     0xdf3c2",
    "lea     rax, [rel rl_pending_input]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xdf499",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "mov     rax, qword [r12]",
    "lea     rdx, [rel rl_executing_keymap]",
    "lea     r13, [rel rl_dispatching]",
    "lea     rbx, [rel rl_readline_state]",
    "mov     rcx, qword [rax]",
    "mov     esi, dword [rax+0xc]",
    "or      qword [rbx], 0x20",
    "mov     edi, dword [rax+0x8]",
    "mov     qword [rdx], rcx",
    "lea     rdx, [rel rl_executing_key]",
    "lea     rcx, [rel _rl_executing_func]",
    "mov     dword [r13], 0x1",
    "mov     dword [rdx], esi",
    "mov     rdx, qword [rax+0x10]",
    "mov     qword [rcx], rdx",
    "call    rdx",
    "lea     rax, [rel _rl_caught_signal]",
    "and     qword [rbx], 0xffffffffffffffdf",
    "mov     qword [r12], 0x0",
    "mov     edx, dword [rax]",
    "mov     dword [r13], 0x0",
    "test    edx, edx",
    "jne     0xdf638",
    "mov     edi, dword [rel data_1691b8]",
    "cmp     edi, 0xa",
    "jne     0xdf61c",
    "mov     edi, 0xa",
    "mov     eax, 0xa",
    "jmp     0xdf3c2",
    "lea     rax, [rel rl_end]",
    "mov     dword [rax], 0x0",
    "cmp     ecx, 0xffffffff",
    "jne     0xdf61c",
    "lea     rax, [rel rl_readline_state]",
    "mov     rdx, qword [rax]",
    "call    rax",
    "call    _rl_internal_char_cleanup",
    "lea     rax, [rel _rl_last_command_was_kill]",
    "mov     ecx, dword [rbp-0x24]",
    "cmp     dword [rax], ecx",
    "je      0xdf5d0",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0xdf47a",
    "jmp     0xdf3c2",
    "mov     dword [rax], 0x0",
    "jmp     0xdf499"
  ]
}