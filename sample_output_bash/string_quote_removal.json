{
  "address": "0x7bbd0",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/4f0637c1ae9b445ca3ec93a4b4e0bb6d",
    "hash data using aphash/2602c80a9b3846b9ae92e2e83b13e866",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/af1fc90a7adf4a2ea648cfac1c599984",
    "contain loop",
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/bee29d5f30484915bb6e92fdf1038d2c",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/9710d9ee76a4466b954966f2a98c40ba",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/85d53756af1244948e9b515ea3abe5ce",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x68",
    "mov     dword [rbp-0x54], esi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "call    strlen",
    "lea     r15, [rax+0x1]",
    "mov     qword [rbp-0x88], rax",
    "mov     rdi, r15",
    "call    malloc",
    "mov     rdx, rax",
    "test    rax, rax",
    "je      0x7bf4c",
    "mov     qword [rbp-0x60], rax",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   eax, byte [r14]",
    "test    al, al",
    "je      0x7bf38",
    "mov     rax, rdx",
    "jmp     0x7bd34",
    "mov     edi, dword [rbp-0x54]",
    "xor     r9d, r9d",
    "mov     r10, r14",
    "mov     qword [rbp-0x80], rdx",
    "mov     rbx, r15",
    "mov     r13, rdx",
    "xor     r12d, r12d",
    "mov     r14d, r9d",
    "and     edi, 0x3",
    "mov     dword [rbp-0x54], edi",
    "jmp     0x7bd05",
    "mov     byte [rax], 0x0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7bf6a",
    "cmp     al, 0x27",
    "je      0x7bd60",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x68",
    "mov     rax, rdx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, dword [rbp-0x54]",
    "add     r12d, 0x1",
    "or      eax, r14d",
    "je      0x7bec0",
    "cmp     al, 0x5c",
    "jne     0x7bc60",
    "xor     edx, edx",
    "mov     rdi, r10",
    "lea     rsi, [rbp-0x44]",
    "mov     dword [rbp-0x44], r12d",
    "mov     qword [rbp-0x60], r10",
    "call    sub_6d0a0",
    "mov     r10, qword [rbp-0x60]",
    "test    rax, rax",
    "mov     r12, rax",
    "je      0x7bf28",
    "cmp     r15, rbx",
    "mov     rdx, rbx",
    "mov     byte [r13], 0x27",
    "cmovae  rdx, r15",
    "mov     rax, rdx",
    "sub     rax, rbx",
    "add     rax, 0x1",
    "cmp     rax, rdx",
    "cmovb   rax, rdx",
    "sub     rbx, 0x1",
    "add     r13, 0x1",
    "sub     rbx, rdx",
    "add     rbx, rax",
    "jmp     0x7bcf5",
    "cmp     al, 0x22",
    "je      0x7bda8",
    "add     r12d, 0x1",
    "movsxd  rax, r12d",
    "lea     rsi, [r10+rax]",
    "movzx   ecx, byte [rsi]",
    "test    cl, cl",
    "jne     0x7bde8",
    "mov     r12d, dword [rbp-0x44]",
    "xor     r14d, r14d",
    "jmp     0x7bcf5",
    "mov     rdx, rbx",
    "mov     rsi, rax",
    "mov     rdi, r13",
    "call    __strcpy_chk",
    "mov     rdi, r13",
    "call    strlen",
    "cmp     r15, rbx",
    "mov     rcx, rbx",
    "mov     rdi, r12",
    "cmovae  rcx, r15",
    "lea     rsi, [rax+rcx]",
    "mov     rdx, rsi",
    "sub     rdx, rbx",
    "cmp     rdx, rcx",
    "cmovb   rdx, rcx",
    "sub     rbx, rsi",
    "add     r13, rax",
    "add     rbx, rdx",
    "call    free",
    "mov     r10, qword [rbp-0x60]",
    "movsxd  rax, r12d",
    "movzx   eax, byte [r10+rax]",
    "test    al, al",
    "je      0x7bf40",
    "xor     r14d, 0x1",
    "add     r12d, 0x1",
    "jmp     0x7bcf5",
    "movsxd  rax, r12d",
    "lea     rsi, [r10+rax]",
    "movzx   ecx, byte [rsi]",
    "mov     edi, dword [rbp-0x54]",
    "or      edi, r14d",
    "je      0x7bc72",
    "mov     byte [r13], 0x5c",
    "mov     rdx, qword [rbp-0x80]",
    "lea     rax, [r13+0x1]",
    "mov     rdx, qword [rbp-0x80]",
    "mov     rax, r13",
    "jmp     0x7bd34",
    "mov     rax, r8",
    "mov     byte [r13], cl",
    "sub     rax, rbx",
    "add     rax, 0x1",
    "cmp     rax, r8",
    "cmovb   rax, r8",
    "sub     rbx, 0x1",
    "add     r12d, 0x1",
    "add     r13, 0x1",
    "sub     rbx, r8",
    "add     rbx, rax",
    "jmp     0x7bcf5",
    "mov     edx, ecx",
    "lea     rdi, [rel is_basic_table]",
    "shr     dl, 0x5",
    "and     edx, 0x7",
    "mov     edx, dword [rdi+rdx*4]",
    "shr     edx, cl",
    "and     edx, 0x1",
    "je      0x7be40",
    "lea     rdx, [rel locale_mb_cur_max]",
    "cmp     r15, rbx",
    "mov     r8, rbx",
    "cmovae  r8, r15",
    "cmp     dword [rdx], 0x1",
    "jle     0x7bdb8",
    "lea     rdi, [rel sh_syntaxtab]",
    "movzx   edx, cl",
    "test    byte [rdi+rdx*4], 0x40",
    "jne     0x7bc72",
    "lea     rdx, [rel locale_utf8locale]",
    "mov     edx, dword [rdx]",
    "test    edx, edx",
    "je      0x7be70",
    "mov     dword [rbp-0x78], 0x1",
    "mov     edx, 0x1",
    "cmp     r15, rbx",
    "mov     rdi, rbx",
    "mov     byte [r13], 0x5c",
    "cmovae  rdi, r15",
    "mov     rdx, rdi",
    "sub     rdx, rbx",
    "add     rdx, 0x1",
    "cmp     rdx, rdi",
    "cmovb   rdx, rdi",
    "sub     rbx, 0x1",
    "add     r13, 0x1",
    "sub     rbx, rdi",
    "add     rbx, rdx",
    "jmp     0x7bc72",
    "mov     rdi, qword [rbp-0x40]",
    "mov     rdx, qword [rbp-0x88]",
    "lea     rcx, [rbp-0x40]",
    "mov     qword [rbp-0x70], r10",
    "mov     qword [rbp-0x68], r8",
    "mov     qword [rbp-0x78], rdi",
    "sub     rdx, rax",
    "xor     edi, edi",
    "mov     qword [rbp-0x60], rsi",
    "call    mbrtowc",
    "mov     rsi, qword [rbp-0x60]",
    "mov     r8, qword [rbp-0x68]",
    "cmp     rax, 0xfffffffffffffffd",
    "mov     r10, qword [rbp-0x70]",
    "jbe     0x7be57",
    "test    cl, cl",
    "js      0x7be70",
    "test    rax, rax",
    "mov     edx, 0x1",
    "cmovne  rdx, rax",
    "mov     dword [rbp-0x78], edx",
    "jmp     0x7bcb5",
    "mov     rdi, qword [rbp-0x78]",
    "mov     qword [rbp-0x40], rdi",
    "jmp     0x7bca9",
    "setne   al",
    "movzx   eax, al",
    "mov     rdi, r13",
    "mov     qword [rbp-0x70], r10",
    "mov     qword [rbp-0x68], r8",
    "mov     qword [rbp-0x60], rdx",
    "call    memcpy",
    "mov     r8, qword [rbp-0x68]",
    "mov     rdx, qword [rbp-0x60]",
    "mov     r10, qword [rbp-0x70]",
    "lea     rcx, [rdx+r8]",
    "mov     rax, rcx",
    "sub     rax, rbx",
    "cmp     rax, r8",
    "cmovb   rax, r8",
    "sub     rbx, rcx",
    "add     r13, rdx",
    "add     rbx, rax",
    "mov     eax, dword [rbp-0x78]",
    "add     r12d, eax"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}