{
  "address": "0xdc960",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     r9, rdi",
    "mov     r10, rsi",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x48",
    "test    rsi, rsi",
    "je      0xdc9b8",
    "test    rdx, rdx",
    "je      0xdcb0a",
    "cmp     byte [rsi], 0x0",
    "je      0xdc9b8",
    "add     rsp, 0x48",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "cmp     byte [rdx], 0x0",
    "je      0xdcb0a",
    "cmp     byte [rsi+0x1], 0x0",
    "je      0xdcb20",
    "mov     dword [rbp-0x34], 0x0",
    "test    rdx, rdx",
    "je      0xdcbd0",
    "cmp     byte [rsi+0x2], 0x0",
    "jne     0xdcbe8",
    "cmp     byte [rdx+0x2], 0x0",
    "je      0xdcc28",
    "mov     dword [rbp-0x40], 0x1",
    "mov     dword [rbp-0x40], 0x0",
    "mov     dword [rbp-0x34], 0x1",
    "jmp     0xdc9e2",
    "cmp     byte [rdx], 0x0",
    "je      0xdcbd0",
    "mov     qword [rbp-0x48], rdi",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x50], rdx",
    "mov     qword [rbp-0x40], rsi",
    "call    strlen",
    "mov     rdx, qword [rbp-0x50]",
    "mov     r10, qword [rbp-0x40]",
    "mov     dword [rbp-0x34], eax",
    "mov     r9, qword [rbp-0x48]",
    "test    rdx, rdx",
    "je      0xdcc19",
    "test    rdx, rdx",
    "je      0xdcb3e",
    "mov     dword [rbp-0x40], 0x2",
    "jmp     0xdc9e2",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x58], r10",
    "mov     qword [rbp-0x50], r9",
    "mov     qword [rbp-0x48], rdx",
    "call    strlen",
    "mov     ebx, dword [rbp-0x34]",
    "mov     rdx, qword [rbp-0x48]",
    "mov     r9, qword [rbp-0x50]",
    "mov     r10, qword [rbp-0x58]",
    "mov     dword [rbp-0x40], eax",
    "or      eax, ebx",
    "mov     qword [rbp-0x58], r9",
    "mov     r12, qword [r9]",
    "xor     r14d, r14d",
    "mov     qword [rbp-0x60], r10",
    "mov     qword [rbp-0x68], rdx",
    "jmp     0xdca9d",
    "mov     ecx, dword [r9+0xc]",
    "test    ecx, ecx",
    "jle     0xdcb0a",
    "mov     dword [rbp-0x34], 0x1",
    "jmp     0xdc9d1",
    "mov     dword [rbp-0x40], 0x0",
    "jmp     0xdcb02",
    "cmp     byte [rdx], 0x0",
    "jne     0xdc9d1",
    "mov     dword [rbp-0x40], 0x0",
    "mov     dword [rbp-0x34], 0x2",
    "jmp     0xdc9e2",
    "cmp     byte [rdx], 0x0",
    "je      0xdcb3e",
    "lea     r13, [r14*8]",
    "add     r12, r13",
    "mov     rsi, qword [r12]",
    "test    rsi, rsi",
    "je      0xdcaba",
    "cmp     byte [rdx+0x1], 0x0",
    "jne     0xdcad0",
    "test    eax, eax",
    "jne     0xdc9e2",
    "mov     dword [rbp-0x34], 0x2",
    "jmp     0xdc9d1",
    "mov     dword [rbp-0x50], 0x0",
    "mov     eax, dword [rbp-0x34]",
    "jmp     0xdca20",
    "cmp     byte [rsi], 0x0",
    "jne     0xdca08",
    "mov     ebx, dword [rbp-0x40]",
    "mov     qword [rbp-0x48], rsi",
    "lea     r15d, [rbx+rax+0x2]",
    "movsxd  r15, r15d",
    "mov     rdi, r15",
    "call    malloc",
    "mov     rsi, qword [rbp-0x48]",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0xdcc34",
    "cmp     byte [rsi+0x1], 0x0",
    "jne     0xdcb98",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     edx, dword [rbp-0x34]",
    "test    edx, edx",
    "jne     0xdcb58",
    "cmp     byte [rsi+0x2], 0x0",
    "jne     0xdcbb0",
    "mov     eax, dword [rbp-0x34]",
    "mov     dword [rbp-0x50], 0x1",
    "add     eax, 0x1",
    "nop     ",
    "mov     rsi, qword [rbp-0x60]",
    "mov     rdx, r15",
    "mov     rdi, rax",
    "call    __strcpy_chk",
    "mov     rsi, qword [r12]",
    "jmp     0xdca52",
    "movsxd  rcx, dword [rbp-0x34]",
    "cmp     r15, rcx",
    "mov     rdx, rcx",
    "lea     rdi, [rbx+rcx]",
    "mov     qword [rbp-0x48], rcx",
    "cmovae  rdx, r15",
    "sub     rdx, rcx",
    "call    __strcpy_chk",
    "mov     eax, dword [rbp-0x40]",
    "mov     rcx, qword [rbp-0x48]",
    "test    eax, eax",
    "jne     0xdcb70",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x48], rsi",
    "call    strlen",
    "mov     ebx, dword [rbp-0x34]",
    "mov     rsi, qword [rbp-0x48]",
    "mov     dword [rbp-0x50], eax",
    "add     eax, ebx",
    "jmp     0xdca20",
    "mov     eax, dword [rbp-0x34]",
    "mov     dword [rbp-0x50], 0x2",
    "add     eax, 0x2",
    "jmp     0xdca20",
    "movsxd  rdi, dword [rbp-0x50]",
    "mov     rdx, r15",
    "mov     rsi, qword [rbp-0x68]",
    "add     rdi, rcx",
    "cmp     r15, rdi",
    "cmovb   rdx, rdi",
    "sub     rdx, rdi",
    "add     rdi, rbx",
    "call    __strcpy_chk",
    "jmp     0xdca7f",
    "mov     rdi, qword [r12]",
    "add     r14, 0x1",
    "call    free",
    "mov     rax, qword [rbp-0x58]",
    "mov     r12, qword [rax]",
    "mov     qword [r12+r13], rbx",
    "cmp     dword [rax+0xc], r14d",
    "jle     0xdcb0a"
  ]
}