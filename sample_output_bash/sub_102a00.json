{
  "address": "0x102a00",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "read file on Linux",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15d, 0x1",
    "push    r14",
    "lea     r14, [rbp-0x140]",
    "push    r13",
    "lea     r13, [rbp-0xc0]",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x148",
    "lea     r12, [rel rl_instream]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     byte [rbp-0x155], 0x0",
    "mov     dword [rbp-0x154], 0x0",
    "mov     rdi, qword [r12]",
    "call    fileno",
    "mov     ecx, 0x10",
    "mov     rdi, r13",
    "mov     ebx, eax",
    "xor     eax, eax",
    "rep stosq qword [rdi]",
    "mov     ecx, 0x10",
    "mov     rdi, r14",
    "rep stosq qword [rdi]",
    "movsxd  rdi, ebx",
    "mov     qword [rbp-0x168], rdi",
    "call    __fdelt_chk",
    "mov     rdi, qword [rbp-0x168]",
    "mov     ecx, ebx",
    "shl     r15, cl",
    "or      qword [rbp+rax*8-0xc0], r15",
    "call    __fdelt_chk",
    "xor     r9d, r9d",
    "lea     edi, [rbx+0x1]",
    "mov     rsi, r13",
    "or      qword [rbp+rax*8-0x140], r15",
    "movsxd  rax, dword [rel data_160314]",
    "lea     r8, [rbp-0x150]",
    "mov     rdx, rax",
    "imul    rax, rax, 0x431bde83",
    "mov     ecx, edx",
    "sar     ecx, 0x1f",
    "sar     rax, 0x32",
    "sub     eax, ecx",
    "movsxd  rcx, eax",
    "imul    eax, eax, 0xf4240",
    "mov     qword [rbp-0x150], rcx",
    "mov     rcx, r14",
    "sub     edx, eax",
    "movsxd  rdx, edx",
    "mov     qword [rbp-0x148], rdx",
    "xor     edx, edx",
    "call    _rl_timeout_select",
    "test    eax, eax",
    "jle     0x102c60",
    "xor     r13d, r13d",
    "call    __errno_location",
    "lea     rdx, [rbp-0x154]",
    "mov     esi, 0x541b",
    "mov     edi, ebx",
    "mov     dword [rax], 0x0",
    "mov     r14, rax",
    "xor     eax, eax",
    "call    ioctl",
    "mov     edx, dword [rbp-0x154]",
    "mov     r13d, eax",
    "cmp     eax, 0xffffffff",
    "je      0x102be0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x148",
    "mov     eax, r13d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "cmp     dword [r14], 0x5",
    "je      0x102c63",
    "test    edx, edx",
    "jle     0x102c60",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x102ccf",
    "xor     edx, edx",
    "mov     esi, 0x3",
    "mov     edi, ebx",
    "xor     eax, eax",
    "mov     dword [rbp-0x154], 0x0",
    "call    fcntl",
    "mov     esi, 0x4",
    "mov     edi, ebx",
    "mov     edx, eax",
    "mov     r15d, eax",
    "xor     eax, eax",
    "or      dh, 0x8",
    "call    fcntl",
    "lea     rsi, [rbp-0x155]",
    "mov     edx, 0x1",
    "mov     edi, ebx",
    "call    read",
    "mov     edx, r15d",
    "mov     esi, 0x4",
    "mov     edi, ebx",
    "mov     dword [rbp-0x154], eax",
    "xor     eax, eax",
    "call    fcntl",
    "mov     edx, dword [rbp-0x154]",
    "cmp     edx, 0xffffffff",
    "je      0x102cb8",
    "mov     eax, dword [rel data_16a508]",
    "mov     ecx, dword [rel data_16a50c]",
    "cmp     eax, ecx",
    "jg      0x102c90",
    "mov     eax, dword [r14]",
    "cmp     eax, 0xb",
    "je      0x102c60",
    "test    edx, edx",
    "jne     0x102b31",
    "sub     eax, ecx",
    "sub     eax, 0x1",
    "jmp     0x102b54",
    "sub     eax, ecx",
    "add     eax, 0x1ff",
    "xor     r13d, r13d",
    "cmp     eax, 0x5",
    "sete    r13b",
    "neg     r13d",
    "jmp     0x102c63",
    "mov     edi, 0xffffffff",
    "call    rl_stuff_char",
    "nop     dword [rax]",
    "cmp     edx, eax",
    "jle     0x102b5e",
    "cmp     eax, 0x1fe",
    "jle     0x102cb0",
    "mov     dword [rbp-0x154], eax",
    "mov     r13d, 0x1",
    "jmp     0x102c63",
    "mov     eax, dword [rbp-0x154]",
    "cmp     r13d, 0xffffffff",
    "jne     0x102bb6",
    "lea     edx, [rax-0x1]",
    "mov     dword [rbp-0x154], edx",
    "test    eax, eax",
    "je      0x102cb0",
    "jmp     0x102c9a",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x102b80",
    "test    eax, eax",
    "je      0x102cb0",
    "lea     rax, [rel rl_getc_function]",
    "mov     rdi, qword [r12]",
    "call    qword [rax]",
    "mov     edi, eax",
    "mov     ebx, eax",
    "call    rl_stuff_char",
    "test    eax, eax",
    "je      0x102cb0",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0x102b80",
    "movsx   edi, byte [rbp-0x155]",
    "call    rl_stuff_char",
    "nop     word [rax+rax]",
    "cmp     ebx, 0xa",
    "je      0x102cb0",
    "cmp     ebx, 0xd",
    "je      0x102cb0",
    "mov     eax, dword [rbp-0x154]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}