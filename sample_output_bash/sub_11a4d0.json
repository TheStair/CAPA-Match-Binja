{
  "address": "0x11a4d0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "contain loop",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x18",
    "mov     dword [rbp-0x34 {var_3c}], edi",
    "test    rsi, rsi",
    "je      0x11a5d9",
    "mov     dword [rbp-0x38 {var_40}], 0x0",
    "jmp     0x11a585",
    "mov     dword [rbp-0x38 {var_40}], 0x0",
    "mov     r12, rsi",
    "nop     dword [rax+rax]",
    "lea     rdi, [rel data_121b52]  {\"BASHOPTS\"}",
    "call    find_variable",
    "test    rax, rax",
    "je      0x11a59b",
    "cmp     r13b, al",
    "jne     0x11a528",
    "mov     eax, dword [rbp-0x38 {var_40}]",
    "add     rsp, 0x18",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "call    set_bashopts",
    "mov     rsi, qword [r14]",
    "add     r14, 0x18",
    "add     r15d, 0x1",
    "test    rsi, rsi",
    "je      0x11a5b0",
    "mov     rdi, rbx",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x11a528",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121b34]  {\"%s: invalid shell option name\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "mov     dword [rbp-0x38 {var_40}], 0x1",
    "jmp     0x11a578",
    "movzx   eax, byte [rsi]",
    "movsxd  rcx, r15d",
    "lea     rax, [rcx+rcx*2]",
    "lea     rcx, [rel data_156080]",
    "lea     rax, [rcx+rax*8]",
    "mov     ecx, dword [rbp-0x34 {var_3c}]",
    "mov     rdx, qword [rax+0x8]",
    "mov     dword [rdx], ecx",
    "mov     rdx, qword [rax+0x10]",
    "test    rdx, rdx",
    "je      0x11a578",
    "mov     r12, qword [r12]",
    "test    r12, r12",
    "jne     0x11a500",
    "mov     rdi, qword [rax]",
    "mov     esi, dword [rbp-0x34 {var_3c}]",
    "call    rdx",
    "mov     rax, qword [r12+0x8]",
    "lea     r14, [rel data_156098]",
    "xor     r15d, r15d  {0x0}",
    "lea     rsi, [rel data_11f1dc]  {\"autocd\"}",
    "mov     rbx, qword [rax]",
    "mov     eax, 0x61",
    "movzx   r13d, byte [rbx]",
    "jmp     0x11a53b"
  ],
  "high level IL": [
    "int32_t var_40",
    "if (arg2 == 0)",
    "var_40 = 0",
    "var_40 = 0",
    "void** i = arg2",
    "char const (** const r14_1)[0x12] = &data_156098",
    "int32_t r15_1 = 0",
    "char const* const rsi = \"autocd\"",
    "char* rbx_1 = *i[1]",
    "char const rax_2 = 0x61",
    "char r13_1 = *rbx_1",
    "while (true)",
    "if (r13_1 == rax_2 && strcmp(rbx_1, rsi) == 0)",
    "int64_t rcx_1 = sx.q(r15_1)",
    "*(&data_156088)[rcx_1 * 3] = arg1",
    "int64_t rdx_2 = *(rcx_1 * 0x18 + 0x156090)",
    "if (rdx_2 != 0)",
    "rdx_2((&data_156080)[rcx_1 * 3], zx.q(arg1))",
    "break",
    "rsi = *r14_1",
    "r14_1 = &r14_1[3]",
    "r15_1 += 1",
    "if (rsi == 0)",
    "builtin_error(dcgettext(nullptr, \"%s: invalid shell option name\", 5), 0)",
    "var_40 = 1",
    "break",
    "rax_2 = *rsi",
    "i = *i",
    "do while (i != 0)",
    "if (find_variable(\"BASHOPTS\") != 0)",
    "set_bashopts()",
    "return zx.q(var_40)"
  ]
}