{
  "address": "0x4e5e0",
  "rules": [
    "terminate process",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13d, esi",
    "push    r12",
    "mov     r12d, edx",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x148",
    "lea     r15, [rel sh_coproc]",
    "mov     qword [rbp-0x168], rcx",
    "mov     r14d, dword [r15+0x8]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "cmp     r14d, 0xffffffff",
    "je      0x4e65f",
    "pcmpeqd xmm0, xmm0",
    "mov     qword [r15], 0x0",
    "movups  xmmword [r15+0x8], xmm0",
    "movdqa  xmm0, xmmword [rel data_136760]",
    "movups  xmmword [r15+0x18], xmm0",
    "mov     eax, dword [rbx+0x4]",
    "and     eax, 0x4",
    "mov     dword [rbp-0x158], eax",
    "mov     rax, qword [rbx+0x18]",
    "mov     rdi, qword [rax+0x8]",
    "test    rdi, rdi",
    "je      0x4e908",
    "mov     eax, dword [r15+0xc]",
    "and     eax, dword [r15+0x10]",
    "js      0x4e65f",
    "xor     r14d, r14d",
    "mov     rdi, r14",
    "call    legal_identifier",
    "test    eax, eax",
    "jne     0x4e6df",
    "cmp     byte [rdi], 0x0",
    "je      0x4e908",
    "mov     rax, qword [r15]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132a40]  {\"execute_coproc: coproc [%d:%s] s\u2026\"}",
    "xor     edi, edi",
    "mov     qword [rbp-0x158], rax",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x158]",
    "mov     esi, r14d",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_warning",
    "mov     rax, qword [rbx+0x18]",
    "lea     r15, [rbp-0x140]",
    "mov     rdi, qword [rax+0x8]",
    "call    free",
    "mov     rax, qword [rbx+0x18]",
    "mov     rdi, rbx",
    "mov     dword [rel data_16105c], 0x0",
    "mov     qword [rel data_161050], 0x0",
    "mov     qword [rax+0x8], r14",
    "lea     rax, [rel command_string_index]",
    "lea     r14, [rbp-0xc0]",
    "mov     dword [rax], 0x0",
    "call    sub_48540",
    "lea     rax, [rel the_printed_command]",
    "lea     rdi, [rbp-0x148]",
    "mov     rax, qword [rax]",
    "mov     qword [rbp-0x160], rax",
    "call    sh_openpipe",
    "lea     rdi, [rbp-0x150]",
    "call    sh_openpipe",
    "mov     rdi, r14",
    "call    sigemptyset",
    "mov     esi, 0x11",
    "mov     rdi, r14",
    "call    sigaddset",
    "mov     rdi, r15",
    "call    sigemptyset",
    "mov     rsi, r14",
    "mov     rdx, r15",
    "xor     edi, edi",
    "call    sigprocmask",
    "mov     rdi, qword [rbp-0x160]",
    "call    strlen",
    "lea     r14, [rax+0x1]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x4e9d2",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_11fa8b]  {\"`%s': not a valid identifier\"}",
    "call    dcgettext",
    "mov     rsi, r14",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "mov     rdi, r14",
    "call    free",
    "mov     edi, dword [rbp-0x158]",
    "xor     eax, eax",
    "test    edi, edi",
    "sete    al",
    "jmp     0x4e8a0",
    "xor     esi, esi",
    "call    expand_string_unsplit",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x4e908",
    "mov     qword [rbp-0x170], rax",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x160]",
    "mov     rdx, r14",
    "mov     rdi, rcx",
    "call    __strcpy_chk",
    "mov     esi, 0x1",
    "mov     rdi, rax",
    "mov     qword [rbp-0x160], rax",
    "call    make_child",
    "mov     r14d, eax",
    "test    eax, eax",
    "je      0x4e95a",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x4e955",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rdi, rax",
    "call    string_list_internal",
    "mov     rdi, r15",
    "mov     r14, rax",
    "call    dispose_words",
    "mov     rdi, r14",
    "call    legal_identifier",
    "test    eax, eax",
    "je      0x4e91b",
    "mov     edi, dword [rbp-0x148]",
    "call    close",
    "mov     edi, dword [rbp-0x14c]",
    "call    close",
    "mov     rdi, qword [rbp-0x160]",
    "call    free",
    "xor     edx, edx",
    "mov     rsi, r15",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "mov     r8, qword [rbp-0x168]",
    "mov     ecx, dword [rbp-0x144]",
    "mov     rdi, rbx",
    "mov     edx, dword [rbp-0x150]",
    "mov     esi, 0x1",
    "call    sub_4df40",
    "mov     ebx, eax",
    "mov     rax, qword [rel stdout]",
    "mov     rdi, qword [rax]",
    "call    fflush",
    "mov     rax, qword [rel stderr]",
    "mov     rdi, qword [rax]",
    "call    fflush",
    "mov     edi, ebx",
    "call    exit",
    "{ Does not return }",
    "mov     edi, dword [rbp-0x144]",
    "call    close",
    "mov     edi, dword [rbp-0x150]",
    "call    close",
    "mov     rax, qword [rbx+0x18]",
    "mov     esi, r14d",
    "mov     rdi, qword [rax+0x8]",
    "call    coproc_alloc",
    "mov     edi, dword [rbp-0x148]",
    "mov     edx, 0x1",
    "movd    xmm1, dword [rbp-0x14c]",
    "or      dword [rax+0x1c], 0x1",
    "mov     rbx, rax",
    "mov     esi, 0x2",
    "movd    xmm0, edi",
    "punpckldq xmm0, xmm1",
    "movq    qword [rax+0xc], xmm0",
    "xor     eax, eax",
    "call    fcntl",
    "mov     edi, dword [rbx+0x10]",
    "mov     edx, 0x1",
    "xor     eax, eax",
    "mov     esi, 0x2",
    "call    fcntl",
    "mov     rdi, rbx",
    "call    coproc_setvars",
    "xor     edx, edx",
    "mov     rsi, r15",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "test    r13d, r13d",
    "jns     0x4e8e0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x148",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edi, r13d",
    "call    close",
    "test    r12d, r12d",
    "js      0x4e866",
    "test    r12d, r12d",
    "jns     0x4e8c8",
    "mov     esi, dword [rel data_161064]",
    "test    esi, esi",
    "je      0x4e875",
    "jmp     0x4e8c8",
    "mov     edi, r12d",
    "call    close",
    "mov     esi, dword [rel data_161064]",
    "test    esi, esi",
    "jne     0x4e870",
    "xor     esi, esi",
    "mov     edi, 0x1",
    "call    stop_pipeline",
    "lea     rax, [rel interactive]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x4e8f8",
    "call    sub_875b0",
    "jmp     0x4e875",
    "mov     edi, r14d",
    "call    describe_pid",
    "jmp     0x4e88e",
    "call    run_pending_traps",
    "mov     edx, dword [rbp-0x158]",
    "xor     eax, eax",
    "test    edx, edx",
    "setne   al"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}