{
  "address": "0x8cac0",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "mov     r14d, esi",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "mov     r12, rdi",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rbp-0x40 {result_2}]",
    "mov     rsi, rbx {result_2}",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x8cbf0",
    "mov     rbx, qword [rbp-0x40 {result_2}]",
    "mov     rax, 0xffffffffffffffff",
    "cmp     rbx, 0x41",
    "cmovb   rax, rbx",
    "jmp     0x8cb79",
    "movzx   r13d, byte [r12]",
    "cmp     r13b, 0x53",
    "je      0x8cba0",
    "mov     rdx, qword [rbp-0x38 {var_40}]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x8cd8e",
    "lea     r13, [rel data_120a0d]",
    "mov     edx, 0x9",
    "mov     rdi, r12",
    "mov     rsi, r13  {data_120a0d, \"SIGRTMIN+\"}",
    "call    strncmp",
    "test    eax, eax",
    "je      0x8cb36",
    "mov     r15d, r14d",
    "and     r15d, 0x2",
    "je      0x8cc10",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rdi, [r12+0x9]",
    "mov     rsi, rbx {result_2}",
    "call    legal_number",
    "test    eax, eax",
    "je      0x8ccd0",
    "mov     r15d, r14d",
    "and     r15d, 0x2",
    "je      0x8cc1a",
    "cmp     r13b, 0x52",
    "je      0x8cd58",
    "mov     edx, 0x9",
    "lea     rsi, [rel data_120a0d]  {\"SIGRTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "jne     0x8cd10",
    "mov     eax, 0xffffffff",
    "jmp     0x8cb79",
    "cmp     qword [rbp-0x40 {result_2}], 0x0",
    "js      0x8ccd0",
    "and     r14d, 0x1",
    "mov     qword [rbp-0x40 {result_2}], 0x0",
    "lea     r13, [rel signal_names]",
    "xor     ebx, ebx  {0x0}",
    "mov     dword [rbp-0x44 {var_4c_1}], r14d",
    "jmp     0x8cc55",
    "mov     edx, 0x9",
    "mov     rsi, r13  {data_120a0d, \"SIGRTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "je      0x8cb36",
    "mov     edx, 0x6",
    "lea     rsi, [rel data_120a0d[3]]  {\"RTMIN+\"}",
    "mov     rdi, r12",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x8cc1a",
    "cmp     r13b, 0x52",
    "jne     0x8cbe0",
    "call    __libc_current_sigrtmax",
    "mov     ebx, eax",
    "call    __libc_current_sigrtmin",
    "sub     ebx, eax",
    "movsxd  rbx, ebx",
    "cmp     rbx, qword [rbp-0x40 {result_2}]",
    "jl      0x8ccd0",
    "mov     r14, qword [r13+rbx*8]",
    "test    r14, r14",
    "je      0x8cc47",
    "lea     r13, [rel data_120a0d[3]]  {\"RTMIN+\"}",
    "jmp     0x8cd35",
    "lea     rdi, [r12+0x6]",
    "mov     rsi, rbx {result_2}",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x8cb4b",
    "lea     r13, [rel data_120a0d[3]]",
    "mov     edx, 0x6",
    "mov     rdi, r12",
    "mov     rsi, r13  {data_120a0d[3], \"RTMIN+\"}",
    "call    strncmp",
    "test    eax, eax",
    "je      0x8cd74",
    "call    __libc_current_sigrtmin",
    "add     eax, dword [rbp-0x40 {result_2}]",
    "add     rbx, 0x1",
    "mov     qword [rbp-0x40 {result_2}], rbx",
    "cmp     rbx, 0x44",
    "je      0x8ccd0",
    "movzx   eax, byte [r14]",
    "test    al, al",
    "je      0x8cc47",
    "mov     edx, 0x6",
    "mov     rsi, r13  {data_120a0d[3], \"RTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "je      0x8cd74",
    "jmp     0x8ccd0",
    "cmp     al, 0x53",
    "je      0x8cc90",
    "mov     r15d, 0x2",
    "jmp     0x8cc1a",
    "cmp     byte [r14+0x1], 0x49",
    "jne     0x8cc6b",
    "test    r15d, r15d",
    "jne     0x8cc38",
    "cmp     byte [r14+0x2], 0x47",
    "jne     0x8cc6b",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x8cc47",
    "lea     rsi, [r14+0x3]",
    "mov     rdi, r12",
    "test    r15d, r15d",
    "je      0x8cce0",
    "mov     eax, ebx",
    "jmp     0x8cb79",
    "call    strcmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "mov     edx, dword [rbp-0x44 {var_4c_1}]",
    "test    edx, edx",
    "je      0x8cc47",
    "mov     eax, dword [rbp-0x44 {var_4c_1}]",
    "test    eax, eax",
    "jne     0x8cc38",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x8cc47",
    "add     rbx, 0x1",
    "mov     qword [rbp-0x40 {result_2}], rbx",
    "cmp     rbx, 0x44",
    "jne     0x8cc55",
    "jmp     0x8cc7f",
    "nop     dword [rax]"
  ]
}