{
  "address": "0x8cac0",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "contain loop",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "mov     r14d, esi",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "mov     r12, rdi",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rbp-0x40 {result_2}]",
    "mov     rsi, rbx {result_2}",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x8cbf0",
    "mov     rbx, qword [rbp-0x40 {result_2}]",
    "mov     rax, 0xffffffffffffffff",
    "cmp     rbx, 0x41",
    "cmovb   rax, rbx",
    "jmp     0x8cb79",
    "movzx   r13d, byte [r12]",
    "cmp     r13b, 0x53",
    "je      0x8cba0",
    "mov     rdx, qword [rbp-0x38 {var_40}]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x8cd8e",
    "lea     r13, [rel data_120a0d]",
    "mov     edx, 0x9",
    "mov     rdi, r12",
    "mov     rsi, r13  {data_120a0d, \"SIGRTMIN+\"}",
    "call    strncmp",
    "test    eax, eax",
    "je      0x8cb36",
    "mov     r15d, r14d",
    "and     r15d, 0x2",
    "je      0x8cc10",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rdi, [r12+0x9]",
    "mov     rsi, rbx {result_2}",
    "call    legal_number",
    "test    eax, eax",
    "je      0x8ccd0",
    "mov     r15d, r14d",
    "and     r15d, 0x2",
    "je      0x8cc1a",
    "cmp     r13b, 0x52",
    "je      0x8cd58",
    "mov     edx, 0x9",
    "lea     rsi, [rel data_120a0d]  {\"SIGRTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "jne     0x8cd10",
    "mov     eax, 0xffffffff",
    "jmp     0x8cb79",
    "cmp     qword [rbp-0x40 {result_2}], 0x0",
    "js      0x8ccd0",
    "and     r14d, 0x1",
    "mov     qword [rbp-0x40 {result_2}], 0x0",
    "lea     r13, [rel signal_names]",
    "xor     ebx, ebx  {0x0}",
    "mov     dword [rbp-0x44 {var_4c_1}], r14d",
    "jmp     0x8cc55",
    "mov     edx, 0x9",
    "mov     rsi, r13  {data_120a0d, \"SIGRTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "je      0x8cb36",
    "mov     edx, 0x6",
    "lea     rsi, [rel data_120a0d[3]]  {\"RTMIN+\"}",
    "mov     rdi, r12",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x8cc1a",
    "cmp     r13b, 0x52",
    "jne     0x8cbe0",
    "call    __libc_current_sigrtmax",
    "mov     ebx, eax",
    "call    __libc_current_sigrtmin",
    "sub     ebx, eax",
    "movsxd  rbx, ebx",
    "cmp     rbx, qword [rbp-0x40 {result_2}]",
    "jl      0x8ccd0",
    "mov     r14, qword [r13+rbx*8]",
    "test    r14, r14",
    "je      0x8cc47",
    "lea     r13, [rel data_120a0d[3]]  {\"RTMIN+\"}",
    "jmp     0x8cd35",
    "lea     rdi, [r12+0x6]",
    "mov     rsi, rbx {result_2}",
    "call    legal_number",
    "test    eax, eax",
    "jne     0x8cb4b",
    "lea     r13, [rel data_120a0d[3]]",
    "mov     edx, 0x6",
    "mov     rdi, r12",
    "mov     rsi, r13  {data_120a0d[3], \"RTMIN+\"}",
    "call    strncmp",
    "test    eax, eax",
    "je      0x8cd74",
    "call    __libc_current_sigrtmin",
    "add     eax, dword [rbp-0x40 {result_2}]",
    "add     rbx, 0x1",
    "mov     qword [rbp-0x40 {result_2}], rbx",
    "cmp     rbx, 0x44",
    "je      0x8ccd0",
    "movzx   eax, byte [r14]",
    "test    al, al",
    "je      0x8cc47",
    "mov     edx, 0x6",
    "mov     rsi, r13  {data_120a0d[3], \"RTMIN+\"}",
    "mov     rdi, r12",
    "call    strncasecmp",
    "test    eax, eax",
    "je      0x8cd74",
    "jmp     0x8ccd0",
    "cmp     al, 0x53",
    "je      0x8cc90",
    "mov     r15d, 0x2",
    "jmp     0x8cc1a",
    "cmp     byte [r14+0x1], 0x49",
    "jne     0x8cc6b",
    "test    r15d, r15d",
    "jne     0x8cc38",
    "cmp     byte [r14+0x2], 0x47",
    "jne     0x8cc6b",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x8cc47",
    "lea     rsi, [r14+0x3]",
    "mov     rdi, r12",
    "test    r15d, r15d",
    "je      0x8cce0",
    "mov     eax, ebx",
    "jmp     0x8cb79",
    "call    strcmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0x8cc7f",
    "mov     edx, dword [rbp-0x44 {var_4c_1}]",
    "test    edx, edx",
    "je      0x8cc47",
    "mov     eax, dword [rbp-0x44 {var_4c_1}]",
    "test    eax, eax",
    "jne     0x8cc38",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x8cc47",
    "add     rbx, 0x1",
    "mov     qword [rbp-0x40 {result_2}], rbx",
    "cmp     rbx, 0x44",
    "jne     0x8cc55",
    "jmp     0x8cc7f",
    "nop     dword [rax]"
  ],
  "high level IL": [
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "uint64_t result_2",
    "uint64_t result",
    "if (legal_number(arg1, &result_2) != 0)",
    "uint64_t result_1 = result_2",
    "result = -1",
    "if (result_1 u< 0x41)",
    "result = result_1",
    "char r13_1 = *arg1",
    "int32_t r15_2",
    "if (r13_1 == 0x53)",
    "if (strncmp(arg1, \"SIGRTMIN+\", 9) == 0)",
    "label_8cb3e:",
    "if (legal_number(&arg1[9], &result_2) == 0 || result_2 s< 0)",
    "label_8ccd0:",
    "result = 0xffffffff",
    "label_8cb64:",
    "if (sx.q(__libc_current_sigrtmax() - __libc_current_sigrtmin()) s< result_2)",
    "label_8ccd0_1:",
    "result = 0xffffffff",
    "result = zx.q(__libc_current_sigrtmin() + result_2.d)",
    "r15_2 = arg2 & 2",
    "if (r15_2 == 0)",
    "goto label_8cc1a",
    "if (strncasecmp(arg1, \"SIGRTMIN+\", 9) == 0)",
    "goto label_8cb3e",
    "label_8cd40:",
    "if (strncasecmp(arg1, \"RTMIN+\", 6) == 0)",
    "goto label_8cd7c",
    "r15_2 = 2",
    "label_8cc1a:",
    "int32_t r14_1 = arg2 & 1",
    "result_2 = 0",
    "uint64_t result_3 = 0",
    "while (true)",
    "char* r14_2 = (&signal_names)[result_3]",
    "if (r14_2 != 0)",
    "char rax_11 = *r14_2",
    "if (rax_11 != 0)",
    "if (rax_11 == 0x53 && r14_2[1] == 0x49 && r14_2[2] == 0x47)",
    "char* rdi_6 = arg1",
    "if (r15_2 != 0)",
    "if (strcasecmp(rdi_6, &r14_2[3]) == 0)",
    "result = zx.q(result_3.d)",
    "break",
    "if (r14_1 != 0)",
    "goto label_8cc3e",
    "result_3 += 1",
    "result_2 = result_3",
    "if (result_3 == 0x44)",
    "goto label_8ccd0_2",
    "continue",
    "if (strcmp(rdi_6, &r14_2[3]) == 0)",
    "result = zx.q(result_3.d)",
    "break",
    "if (r14_1 != 0 && strcmp(arg1, r14_2) == 0)",
    "result = zx.q(result_3.d)",
    "break",
    "if (r15_2 != 0)",
    "label_8cc3e:",
    "if (strcasecmp(arg1, r14_2) == 0)",
    "result = zx.q(result_3.d)",
    "break",
    "if (strcmp(arg1, r14_2) == 0)",
    "result = zx.q(result_3.d)",
    "break",
    "result_3 += 1",
    "result_2 = result_3",
    "if (result_3 == 0x44)",
    "goto label_8ccd0_2",
    "r15_2 = arg2 & 2",
    "if (r15_2 != 0)",
    "if (strncasecmp(arg1, \"SIGRTMIN+\", 9) == 0)",
    "goto label_8cb3e",
    "if (r13_1 != 0x52)",
    "goto label_8cd40",
    "if (strncmp(arg1, \"RTMIN+\", 6) == 0)",
    "goto label_8cd7c",
    "goto label_8cd40",
    "if (r13_1 != 0x52)",
    "goto label_8cc1a",
    "if (strncmp(arg1, \"RTMIN+\", 6) != 0)",
    "goto label_8cc1a",
    "label_8cd7c:",
    "if (legal_number(&arg1[6], &result_2) != 0 && result_2 s>= 0)",
    "goto label_8cb64",
    "label_8ccd0_2:",
    "result = 0xffffffff",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return result",
    "__stack_chk_fail()",
    "noreturn"
  ]
}