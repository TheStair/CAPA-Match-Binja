{
  "address": "0x102ce0",
  "rules": [
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "lea     rax, [rel rl_pending_input]",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "mov     ebx, dword [rax]",
    "test    ebx, ebx",
    "je      0x102d18",
    "call    _rl_next_macro_key",
    "mov     ebx, eax",
    "test    eax, eax",
    "jne     0x102dc8",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel rl_readline_state]",
    "and     qword [rax], 0xfffffffffffdffff",
    "movzx   ebx, al",
    "jmp     0x102d0c",
    "lea     r12, [rel rl_event_hook]",
    "mov     rax, qword [r12]",
    "test    rax, rax",
    "je      0x102de0",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "movsxd  rax, dword [rel data_16a508]",
    "cmp     dword [rel data_16a50c], eax",
    "je      0x102e73",
    "nop     dword [rax+rax]",
    "lea     rax, [rel rl_instream]",
    "mov     rdi, qword [rax]",
    "lea     rax, [rel rl_getc_function]",
    "call    qword [rax]",
    "mov     ebx, eax",
    "jmp     0x102e10",
    "lea     edx, [rax+0x1]",
    "cmp     edx, 0x200",
    "cmovge  edx, ebx",
    "mov     dword [rel data_16a508], edx",
    "lea     rdx, [rel data_16abe0]",
    "movzx   ebx, byte [rdx+rax]",
    "call    sub_102a00",
    "test    eax, eax",
    "js      0x102e30",
    "lea     edx, [rax+0x1]",
    "xor     ecx, ecx",
    "cmp     edx, 0x200",
    "cmovge  edx, ecx",
    "mov     dword [rel data_16a508], edx",
    "lea     rdx, [rel data_16abe0]",
    "movzx   ebx, byte [rdx+rax]",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x102d0c",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0x102d0c",
    "lea     rax, [rel rl_done]",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel rl_readline_state]",
    "mov     rbx, qword [rax]",
    "mov     rdx, rbx",
    "or      rdx, 0x2000000",
    "mov     qword [rax], rdx",
    "call    __errno_location",
    "cmp     dword [rax], 0x5",
    "jne     0x102dd0",
    "jne     0x102da5",
    "mov     ebx, 0xa",
    "jmp     0x102d0c",
    "and     ebx, 0x8",
    "sete    bl",
    "movzx   ebx, bl",
    "sub     ebx, 0x2",
    "jmp     0x102d0c",
    "mov     rax, qword [r12]",
    "test    rax, rax",
    "jne     0x102d40",
    "lea     rax, [rel _rl_caught_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x102db8",
    "movsxd  rax, dword [rel data_16a508]",
    "cmp     dword [rel data_16a50c], eax",
    "je      0x102d78",
    "jmp     0x102d0c",
    "mov     edi, dword [rax]",
    "call    _rl_signal_handler",
    "jmp     0x102d94",
    "lea     rax, [rel rl_done]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x102dd0",
    "call    qword [r12]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}