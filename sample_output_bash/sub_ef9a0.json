{
  "address": "0xef9a0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13, rcx",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "mov     ebx, esi",
    "mov     esi, edx",
    "mov     rdx, rcx",
    "sub     rsp, 0x8",
    "movzx   r14d, byte [rcx]",
    "call    sub_eafa0",
    "test    rax, rax",
    "je      0xefad0",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, rax",
    "mov     r15, rax",
    "call    strlen",
    "mov     rcx, rax",
    "movzx   eax, byte [r13]",
    "lea     r13, [rel rl_point]",
    "mov     edx, dword [r13]",
    "lea     esi, [rdx-0x1]",
    "test    al, al",
    "je      0xefae0",
    "test    r14b, r14b",
    "je      0xefa38",
    "test    ebx, ebx",
    "je      0xefa30",
    "lea     rax, [rel _rl_skip_completed_text]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0xefb38",
    "test    ebx, ebx",
    "je      0xefa38",
    "test    esi, esi",
    "jne     0xefb50",
    "lea     r8, [rel rl_line_buffer]",
    "movsxd  rdi, ebx",
    "mov     r8, qword [r8]",
    "movzx   edi, byte [r8+rdi-0x1]",
    "cmp     al, dil",
    "je      0xefb77",
    "mov     edx, esi",
    "mov     rdi, r15",
    "mov     esi, ebx",
    "call    _rl_replace_text",
    "jmp     0xefaab",
    "lea     rax, [rel rl_end]",
    "mov     ecx, dword [rax]",
    "cmp     ecx, ebx",
    "jle     0xefb87",
    "lea     rdx, [rel rl_line_buffer]",
    "movsxd  rax, ebx",
    "mov     rdx, qword [rdx]",
    "cmp     r14b, byte [rdx+rax-0x1]",
    "jne     0xefa38",
    "lea     r8, [rel rl_line_buffer]",
    "movsxd  rdi, edx",
    "mov     r8, qword [r8]",
    "cmp     al, byte [r8+rdi]",
    "jne     0xefa38",
    "xor     edi, edi",
    "cmp     al, byte [r15]",
    "sete    dil",
    "sub     ebx, edi",
    "jmp     0xefa30",
    "cmp     al, r14b",
    "je      0xefa30",
    "cmp     r12, r15",
    "je      0xefad0",
    "mov     r14, r15",
    "jmp     0xefa8b",
    "lea     rdx, [rel rl_line_buffer]",
    "movsxd  rax, ebx",
    "mov     r14, r15",
    "add     rax, qword [rdx]",
    "jmp     0xefa83",
    "xor     eax, eax",
    "cmp     r14b, byte [r15]",
    "setne   al",
    "sub     ebx, eax",
    "jmp     0xefa38",
    "movsxd  rcx, ecx",
    "cmp     al, byte [r15+rcx-0x1]",
    "cmove   esi, edx",
    "jmp     0xefa38",
    "cmp     dil, r14b",
    "jne     0xefa30",
    "add     rsp, 0x8",
    "mov     rdi, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     free",
    "cmp     esi, ebx",
    "jge     0xefb20",
    "movzx   edx, byte [r14]",
    "test    dl, dl",
    "jne     0xefa70",
    "cmp     dil, byte [r15]",
    "setne   dil",
    "movzx   edi, dil",
    "sub     ebx, edi",
    "mov     edx, esi",
    "mov     rdi, r14",
    "mov     esi, ebx",
    "call    _rl_replace_text",
    "jmp     0xefa9d",
    "cmp     byte [r14], 0x0",
    "jne     0xefb20",
    "cmp     dl, byte [rax]",
    "jne     0xefa8b",
    "mov     rdi, r14",
    "call    strlen",
    "add     eax, ebx",
    "mov     dword [r13], eax",
    "add     ebx, 0x1",
    "add     r14, 0x1",
    "add     rax, 0x1",
    "cmp     ecx, ebx",
    "je      0xefa8b"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}