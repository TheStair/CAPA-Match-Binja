{
  "address": "0x5d2e0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     edx, 0x220",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     rbx, rdi",
    "sub     rsp, 0x18",
    "mov     rsi, qword [rdi+0x8]",
    "mov     rdi, qword [rdi]",
    "call    bind_variable",
    "mov     ecx, dword [rax+0x2c]",
    "test    ecx, ecx",
    "jne     0x5d388",
    "mov     edx, dword [rax+0x28]",
    "or      edx, dword [rbx+0x28]",
    "test    ecx, ecx",
    "jle     0x5d31f",
    "mov     edx, dword [rbx+0x28]",
    "and     edx, 0xffcfffff",
    "mov     dword [rbx+0x28], edx",
    "or      edx, dword [rax+0x28]",
    "and     edx, 0xffdfffff",
    "test    dl, 0x20",
    "jne     0x5d31f",
    "add     rsp, 0x18",
    "mov     rdi, rbx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     dispose_variable",
    "movsx   r14d, byte [r12]",
    "lea     r13, [rel data_1599f0]",
    "jmp     0x5d355",
    "or      edx, 0x200000",
    "jmp     0x5d325",
    "movsx   eax, byte [rdi]",
    "sub     eax, r14d",
    "jne     0x5d369",
    "mov     rdi, qword [rel data_1599e0]",
    "mov     r12, qword [rbx]",
    "mov     dword [rax+0x28], edx",
    "test    rdi, rdi",
    "je      0x5d36d",
    "test    eax, eax",
    "jle     0x5d348",
    "mov     rsi, r12",
    "call    strcmp",
    "test    eax, eax",
    "je      0x5d3a0",
    "mov     rdi, qword [r13]",
    "add     r13, 0x10",
    "test    rdi, rdi",
    "je      0x5d36d",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5d3f5",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel tempvar_list]",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "mov     rcx, qword [rax]  {tempvar_list}",
    "lea     rax, [rel tvlist_ind]",
    "movsxd  r15, dword [rax]  {tvlist_ind}",
    "mov     qword [rbp-0x38 {var_40_1}], rcx",
    "lea     edx, [r15+0x1]",
    "mov     dword [rax], edx  {tvlist_ind}",
    "mov     rdx, r13",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x38 {var_40_1}]",
    "mov     qword [rcx+r15*8], r14",
    "jmp     0x5d36d"
  ],
  "high level IL": [
    "void* rax = bind_variable(*arg1, arg1[1], 0x220)",
    "int32_t rcx = *(rax + 0x2c)",
    "int32_t rdx_3",
    "if (rcx != 0)",
    "int32_t rdx_2 = *(rax + 0x28) | arg1[5].d",
    "if (rcx s<= 0 || (rdx_2.b & 0x20) != 0)",
    "rdx_3 = rdx_2 & 0xffdfffff",
    "rdx_3 = rdx_2 | 0x200000",
    "int32_t rdx_1 = arg1[5].d & 0xffcfffff",
    "arg1[5].d = rdx_1",
    "rdx_3 = (rdx_1 | *(rax + 0x28)) & 0xffdfffff",
    "char const (* i)[0xc] = data_1599e0",
    "char* r12 = *arg1",
    "*(rax + 0x28) = rdx_3",
    "if (i != 0)",
    "int32_t r14_1 = sx.d(*r12)",
    "char const (** r13_1)[0xe] = &data_1599f0",
    "int32_t rax_1 = sx.d(*i)",
    "int32_t rax_2 = rax_1 - r14_1",
    "if (rax_1 == r14_1)",
    "rax_2 = strcmp(i, r12)",
    "if (rax_2 == 0)",
    "uint64_t r13_2 = strlen(r12) + 1",
    "char* rax_5 = malloc(r13_2)",
    "if (rax_5 == 0)",
    "sub_a7f00()",
    "noreturn",
    "uint64_t tempvar_list_1 = tempvar_list",
    "int64_t tvlist_ind_1 = sx.q(tvlist_ind)",
    "tvlist_ind = (tvlist_ind_1 + 1).d",
    "__strcpy_chk(rax_5, r12, r13_2)",
    "*(tempvar_list_1 + (tvlist_ind_1 << 3)) = rax_5",
    "break",
    "if (rax_2 s> 0)",
    "break",
    "i = *r13_1",
    "r13_1 = &r13_1[2]",
    "do while (i != 0)",
    "return dispose_variable(arg1) __tailcall"
  ]
}