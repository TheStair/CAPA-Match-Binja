{
  "address": "0x5d2e0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     edx, 0x220",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x18",
    "mov     rsi, qword [rdi+0x8]",
    "mov     rdi, qword [rdi]",
    "call    bind_variable",
    "mov     ecx, dword [rax+0x2c]",
    "test    ecx, ecx",
    "jne     0x5d388",
    "mov     edx, dword [rax+0x28]",
    "or      edx, dword [rbx+0x28]",
    "test    ecx, ecx",
    "jle     0x5d31f",
    "mov     edx, dword [rbx+0x28]",
    "and     edx, 0xffcfffff",
    "mov     dword [rbx+0x28], edx",
    "or      edx, dword [rax+0x28]",
    "and     edx, 0xffdfffff",
    "test    dl, 0x20",
    "jne     0x5d31f",
    "add     rsp, 0x18",
    "mov     rdi, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     dispose_variable",
    "movsx   r14d, byte [r12]",
    "lea     r13, [rel data_1599f0]",
    "jmp     0x5d355",
    "or      edx, 0x200000",
    "jmp     0x5d325",
    "movsx   eax, byte [rdi]",
    "sub     eax, r14d",
    "jne     0x5d369",
    "mov     rdi, qword [rel data_1599e0]",
    "mov     r12, qword [rbx]",
    "mov     dword [rax+0x28], edx",
    "test    rdi, rdi",
    "je      0x5d36d",
    "test    eax, eax",
    "jle     0x5d348",
    "mov     rsi, r12",
    "call    strcmp",
    "test    eax, eax",
    "je      0x5d3a0",
    "mov     rdi, qword [r13]",
    "add     r13, 0x10",
    "test    rdi, rdi",
    "je      0x5d36d",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x5d3f5",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel tempvar_list]",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "mov     rcx, qword [rax]",
    "lea     rax, [rel tvlist_ind]",
    "movsxd  r15, dword [rax]",
    "mov     qword [rbp-0x38], rcx",
    "lea     edx, [r15+0x1]",
    "mov     dword [rax], edx",
    "mov     rdx, r13",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x38]",
    "mov     qword [rcx+r15*8], r14",
    "jmp     0x5d36d"
  ]
}