{
  "address": "0x104ee0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "check if file exists/9e9f210df85141fd87185852507ad125/0fcfdde5a12c4c95b0c37ee23bca2635",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15d, esi",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     ebx, edx",
    "sub     ebx, esi",
    "sub     rsp, 0x18",
    "mov     qword [rbp-0x38], rdi",
    "cmp     ecx, 0x3",
    "je      0x104fe0",
    "mov     eax, 0x1d",
    "lea     r12, [rel data_122ea2]  {\"unrecognized history modifier\"}",
    "jmp     0x104f48",
    "mov     eax, 0x18",
    "lea     r12, [rel data_122ec0]  {\"no previous substitution\"}",
    "cmp     ecx, 0x4",
    "je      0x104f48",
    "lea     r13d, [rax+rbx+0x3]",
    "movsxd  r13, r13d",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x104ff1",
    "mov     eax, 0x12",
    "lea     r12, [rel data_122e7b]  {\"bad word specifier\"}",
    "cmp     ecx, 0x1",
    "je      0x104f48",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x38]",
    "movsxd  r8, r15d",
    "add     rsi, r8",
    "cmp     byte [rsi], 0x0",
    "jne     0x104fb8",
    "xor     eax, eax",
    "lea     r12, [rel data_122e8e]  {\"substitution failed\"}",
    "lea     rdx, [rel data_122e6b]  {\"event not found\"}",
    "cmp     ecx, 0x2",
    "sete    al",
    "cmovne  r12, rdx",
    "lea     eax, [rax*4+0xf]",
    "movsxd  rbx, ebx",
    "mov     rdi, r14",
    "mov     rcx, r13",
    "mov     rdx, rbx",
    "call    __strncpy_chk",
    "lea     rdx, [r14+rbx]",
    "lea     rax, [rbx+0x1]",
    "lea     rdi, [rbx+0x2]",
    "jmp     0x104f80",
    "mov     rdx, r14",
    "mov     edi, 0x2",
    "mov     eax, 0x1",
    "cmp     r13, rdi",
    "mov     byte [rdx], 0x3a",
    "mov     rdx, r13",
    "mov     rsi, r12",
    "cmovb   rdx, rdi",
    "mov     byte [r14+rax], 0x20",
    "sub     rdx, rdi",
    "add     rdi, r14",
    "call    __strcpy_chk",
    "add     rsp, 0x18",
    "mov     rax, r14",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    "
  ]
}