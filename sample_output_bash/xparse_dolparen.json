{
  "address": "0x403e0",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "check OS version/c5098bae8b7e44529b35d3b557d2b976",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     ebx, ecx",
    "sub     rsp, 0x178",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "lea     rax, [rel line_number]",
    "cmp     byte [rsi], 0x0",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x184], eax",
    "jne     0x40468",
    "mov     eax, ecx",
    "mov     r13, rdx",
    "mov     r12, rdi",
    "mov     r15, rsi",
    "and     eax, 0x40",
    "cmp     eax, 0x1",
    "mov     dword [rbp-0x1a0], eax",
    "lea     rax, [rbp-0x140]",
    "sbb     edx, edx",
    "mov     rdi, rax",
    "mov     qword [rbp-0x190], rax",
    "and     edx, 0xffffffc0",
    "add     edx, 0x4d",
    "mov     dword [rbp-0x19c], edx",
    "call    save_parser_state",
    "lea     rax, [rbp-0x170]",
    "mov     rdi, rax",
    "mov     qword [rbp-0x198], rax",
    "call    save_input_line_state",
    "lea     rax, [rel pushed_string_list]",
    "mov     rdi, r15",
    "lea     r14, [rel parser_state]",
    "lea     rsi, [rel shell_eof_token]",
    "mov     edx, dword [rbp-0x19c]",
    "lea     r8, [rbp-0x178]",
    "mov     dword [rel data_161060], 0x130",
    "mov     qword [rax], 0x0",
    "mov     eax, dword [r14]",
    "mov     dword [rsi], 0x29",
    "lea     rsi, [rel data_11f317]  {\"command substitution\"}",
    "mov     ecx, eax",
    "or      eax, 0x808040",
    "or      ecx, 0x8040",
    "test    bh, 0x4",
    "cmove   eax, ecx",
    "xor     ecx, ecx",
    "mov     dword [r14], eax",
    "lea     rax, [rel expand_aliases]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel extended_glob]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x188], eax",
    "call    parse_string",
    "lea     rsi, [rel shell_eof_token]",
    "lea     rdx, [rel current_token]",
    "mov     edi, dword [rsi]",
    "cmp     dword [rdx], edi",
    "je      0x406a0",
    "and     ebx, 0x1",
    "jne     0x40630",
    "lea     rdx, [rel yychar]",
    "mov     dword [rdx], 0xfffffffe",
    "jmp     0x40550",
    "mov     dword [rbp-0x19c], eax",
    "call    reset_parser",
    "mov     rdi, qword [rbp-0x198]",
    "call    restore_input_line_state",
    "mov     rdi, qword [rbp-0x190]",
    "call    restore_parser_state",
    "lea     rax, [rel extended_glob]",
    "mov     esi, dword [rbp-0x188]",
    "mov     dword [rel data_161060], 0x0",
    "mov     dword [rax], esi",
    "mov     eax, dword [rbp-0x19c]",
    "test    eax, eax",
    "js      0x40640",
    "xor     ebx, ebx",
    "jmp     0x4043d",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x406ba",
    "mov     rdx, qword [rel data_160958]",
    "test    rdx, rdx",
    "je      0x4065a",
    "mov     rax, qword [rbp-0x178]",
    "cmp     byte [rax-0x1], 0x29",
    "mov     rcx, rax",
    "je      0x405e2",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x406d2",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rbx], 0x0",
    "lea     rdx, [rel bash_input]",
    "cmp     dword [rdx], 0x3",
    "je      0x4066d",
    "mov     qword [rel data_160d88], 0x0",
    "mov     byte [rdx], 0x0",
    "mov     edx, ecx",
    "sub     rcx, r12",
    "sub     ecx, 0x1",
    "sub     edx, r15d",
    "mov     dword [r13], ecx",
    "movsxd  rcx, ecx",
    "cmp     byte [r12+rcx], 0x29",
    "je      0x40609",
    "cmp     r15, rax",
    "jae     0x406b2",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x178",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edx, dword [rbp-0x1a0]",
    "test    edx, edx",
    "je      0x406e6",
    "and     dword [r14], 0xffff7fbf",
    "and     ebx, 0x1",
    "jne     0x40630",
    "mov     eax, dword [rbp-0x1a0]",
    "test    eax, eax",
    "je      0x406d7",
    "mov     rcx, rax",
    "jmp     0x405e2",
    "sub     rax, 0x1",
    "jmp     0x405d3",
    "neg     eax",
    "mov     edi, eax",
    "call    jump_to_top_level",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x178]",
    "cmp     byte [rax-0x1], 0x29",
    "jne     0x405aa",
    "test    edx, edx",
    "je      0x40424",
    "and     bh, 0x10",
    "je      0x406ef",
    "cmp     byte [rax], 0xa",
    "mov     rcx, rax",
    "je      0x405c0",
    "mov     edx, eax",
    "sub     rax, r12",
    "sub     eax, 0x1",
    "sub     edx, r15d",
    "mov     dword [r13], eax",
    "jmp     0x40609",
    "sub     edx, 0x1",
    "xor     esi, esi",
    "mov     rdi, r15",
    "call    substring",
    "mov     rbx, rax",
    "jmp     0x4043d",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_123380]  {\"unexpected EOF while looking for\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [rbp-0x184]",
    "mov     edx, 0x29",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x406dc",
    "mov     edi, 0x2",
    "call    jump_to_top_level",
    "{ Does not return }",
    "mov     qword [rbp-0x178], rax",
    "lea     rdx, [rax-0x1]",
    "cmp     r15, rax",
    "je      0x405e2",
    "mov     rcx, qword [rbp-0x178]",
    "mov     rax, rdx"
  ]
}