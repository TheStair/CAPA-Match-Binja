{
  "address": "0xabda0",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "contain loop",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, r8d",
    "push    r13",
    "mov     r13d, esi",
    "mov     rsi, rdi",
    "mov     r15d, r14d",
    "push    r12",
    "mov     r12, rdi",
    "lea     rdi, [rel data_120fff]  {\"COMP_LINE\"}",
    "and     r15d, 0x1",
    "push    rbx",
    "mov     rbx, rdx",
    "xor     edx, edx",
    "sub     rsp, 0x38",
    "mov     dword [rbp-0x58], ecx",
    "mov     dword [rbp-0x54], r8d",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    bind_variable",
    "test    rax, rax",
    "je      0xabdfd",
    "movsxd  rdx, r13d",
    "lea     r14, [r12+rdx]",
    "movzx   r13d, byte [r14]",
    "mov     byte [r14], 0x0",
    "call    __ctype_get_mb_cur_max",
    "xor     edi, edi",
    "cmp     rax, 0x1",
    "jbe     0xabf38",
    "test    r15b, r15b",
    "je      0xabdfd",
    "test    r12, r12",
    "je      0xabe40",
    "test    r12, r12",
    "je      0xabe40",
    "or      dword [rax+0x28], 0x1",
    "mov     byte [r14], r13b",
    "lea     r13, [rbp-0x44]",
    "xor     r8d, r8d",
    "mov     esi, 0xa",
    "mov     rdx, r13",
    "mov     ecx, 0xc",
    "call    fmtulong",
    "xor     edx, edx",
    "lea     rdi, [rel data_121009]  {\"COMP_POINT\"}",
    "mov     rsi, rax",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xabe7b",
    "cmp     byte [r12], 0x0",
    "je      0xabe40",
    "cmp     byte [r12], 0x0",
    "je      0xabe40",
    "xor     r8d, r8d",
    "mov     rdx, r13",
    "mov     esi, 0xa",
    "mov     ecx, 0xc",
    "lea     rax, [rel rl_completion_type]",
    "movsxd  rdi, dword [rax]",
    "call    fmtulong",
    "xor     edx, edx",
    "lea     rdi, [rel data_121014]  {\"COMP_TYPE\"}",
    "mov     rsi, rax",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xabeb9",
    "test    r15b, r15b",
    "je      0xabe7b",
    "cmp     byte [r12+0x1], 0x0",
    "mov     edi, 0x1",
    "je      0xabe40",
    "cmp     byte [r12+0x1], 0x0",
    "mov     edi, 0x1",
    "jne     0xac070",
    "xor     r8d, r8d",
    "mov     rdx, r13",
    "mov     esi, 0xa",
    "mov     ecx, 0xc",
    "lea     rax, [rel rl_completion_invoking_key]",
    "movsxd  rdi, dword [rax]",
    "call    fmtulong",
    "xor     edx, edx",
    "lea     rdi, [rel data_12101e]  {\"COMP_KEY\"}",
    "mov     rsi, rax",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xabef7",
    "test    r15b, r15b",
    "je      0xabeb9",
    "or      dword [rax+0x28], 0x1",
    "cmp     byte [r12+0x2], 0x0",
    "mov     edi, 0x2",
    "je      0xabe40",
    "mov     rdi, r12",
    "call    mbstrlen",
    "mov     rdi, rax",
    "jmp     0xabe40",
    "nop     word [rax+rax]",
    "mov     edx, dword [rbp-0x54]",
    "test    edx, edx",
    "je      0xabf80",
    "test    r15b, r15b",
    "je      0xabef7",
    "or      dword [rax+0x28], 0x1",
    "mov     rdi, r12",
    "call    strlen",
    "mov     rdi, rax",
    "jmp     0xabe40",
    "lea     rax, [rel expanding_redir]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0xac048",
    "lea     rax, [rel array_needs_making]",
    "mov     dword [rax], 0x1",
    "or      dword [rax+0x28], 0x1",
    "lea     rax, [rel assigning_in_environment]",
    "lea     rdx, [rel executing_builtin]",
    "mov     eax, dword [rax]",
    "or      eax, dword [rdx]",
    "setne   al",
    "movzx   eax, al",
    "mov     dword [rbp-0x54], eax",
    "jmp     0xabf91",
    "mov     esi, dword [rbp-0x54]",
    "lea     r12, [rel data_121027]  {\"COMP_WORDS\"}",
    "mov     rdi, r12",
    "call    sub_502c0",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xac080",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, r12",
    "call    make_new_array_variable",
    "mov     r15, rax",
    "jmp     0xabfaf",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    ah, 0x8",
    "jne     0xac028",
    "and     ah, 0xf7",
    "mov     dword [r15+0x28 {Elf64_Header::section_header_offset.d}], eax",
    "test    al, 0x4",
    "jne     0xabfbc",
    "test    al, 0x4",
    "je      0xac033",
    "xor     r12d, r12d",
    "test    rbx, rbx",
    "je      0xabfeb",
    "mov     rdi, r15",
    "call    convert_var_to_array",
    "mov     r15, rax",
    "jmp     0xabfbc",
    "movsxd  rdi, dword [rbp-0x58]",
    "mov     rdx, r13",
    "xor     r8d, r8d",
    "mov     ecx, 0xc",
    "and     dword [r15+0x28 {Elf64_Header::section_header_offset.d}], 0xffffefff {Elf64_Header::section_header_offset.d}",
    "mov     esi, 0xa",
    "call    fmtulong",
    "xor     edx, edx",
    "lea     rdi, [rel data_121032]  {\"COMP_CWORD\"}",
    "mov     rsi, rax",
    "call    bind_int_variable",
    "jmp     0xabf0f",
    "nop     dword [rax]",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xac090",
    "mov     rax, qword [rbx+0x8]",
    "mov     rsi, r12",
    "xor     r8d, r8d",
    "xor     edx, edx",
    "mov     rdi, r15",
    "add     r12, 0x1",
    "mov     rcx, qword [rax]",
    "call    sub_96140",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "jne     0xabfc8"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}