{
  "address": "0x67d90",
  "rules": [
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "write file on Linux",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "contain loop",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "encrypt data using Curve25519/7d070d905d0942e295bbb2c9df72fc86",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "test    rdi, rdi",
    "je      0x68510",
    "retn     {__return_addr}",
    "push    rbp {__saved_rbp}",
    "mov     rax, rdi",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {var_10}",
    "push    r14 {var_18}",
    "push    r13 {__saved_r13}",
    "mov     r13, rdi",
    "push    r12 {__saved_r12}",
    "mov     r12, rcx",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x38",
    "nop     dword [rax+rax]",
    "mov     rcx, rax",
    "mov     rax, qword [rax]",
    "cmp     rax, r13",
    "jne     0x67db8",
    "movsxd  rax, esi",
    "mov     rbx, r13",
    "mov     qword [rbp-0x40 {var_48}], rcx",
    "shl     rax, 0x3",
    "mov     dword [rbp-0x58 {var_60}], esi",
    "mov     qword [rbp-0x50 {var_58}], rax",
    "mov     eax, edx",
    "or      eax, esi",
    "mov     dword [rbp-0x34 {var_3c}], edx",
    "mov     dword [rbp-0x54 {var_5c}], eax",
    "mov     eax, esi",
    "not     eax",
    "shr     eax, 0x1f",
    "mov     dword [rbp-0x38 {var_40}], eax",
    "cmp     rbx, r13",
    "je      0x67fb9",
    "mov     eax, dword [rbp-0x34 {var_3c}]",
    "test    eax, eax",
    "jne     0x67e1c",
    "nop     dword [rax]",
    "movsxd  rcx, dword [rbx+0x8]",
    "lea     rdx, [rel data_1204b7]  {\"%5ld\"}",
    "mov     rdi, r12",
    "xor     eax, eax  {0x0}",
    "mov     esi, 0x2",
    "call    __fprintf_chk",
    "mov     rsi, r12",
    "mov     edi, 0x20",
    "call    fputc",
    "mov     r15d, dword [rbp-0x54 {var_5c}]",
    "test    r15d, r15d",
    "js      0x680de",
    "mov     rsi, r12",
    "mov     edi, 0x20",
    "call    fputc",
    "mov     eax, dword [rbp-0x58 {var_60}]",
    "test    eax, eax",
    "jns     0x681c0",
    "mov     edx, 0x2",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_1204b4]",
    "call    fwrite",
    "mov     rsi, r12",
    "mov     edi, 0x20",
    "call    fputc",
    "mov     eax, dword [rbp-0x54 {var_5c}]",
    "test    eax, eax",
    "jns     0x681c0",
    "mov     edx, 0x5",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_1204ae]  {\"     \"}",
    "call    fwrite",
    "mov     edi, dword [rbp-0x34 {var_3c}]",
    "test    edi, edi",
    "setne   r14b",
    "cmp     rbx, r13",
    "je      0x67f77",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204f8]  {\"Done\"}",
    "xor     edi, edi  {0x0}",
    "mov     r15, rbx",
    "call    dcgettext",
    "mov     rcx, qword [rbp-0x50 {var_58}]",
    "mov     qword [rel data_168560], rax",
    "lea     rax, [rel jobs]",
    "mov     rax, qword [rax]  {jobs}",
    "mov     rax, qword [rax+rcx]",
    "mov     eax, dword [rax+0x14]",
    "cmp     eax, 0x2",
    "je      0x67e90",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204f8]  {\"Done\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rcx, qword [rbp-0x50 {var_58}]",
    "mov     qword [rel data_168560], rax",
    "lea     rax, [rel jobs]",
    "mov     rax, qword [rax]  {jobs}",
    "mov     rax, qword [rax+rcx]",
    "mov     eax, dword [rax+0x14]",
    "cmp     eax, 0x2",
    "je      0x682c0",
    "mov     rdi, qword [rbx+0x18]",
    "xor     r14d, r14d  {0x0}",
    "test    rdi, rdi",
    "jne     0x67f80",
    "xor     r14d, r14d  {0x0}",
    "jmp     0x67f77",
    "mov     rdi, qword [rbx+0x18]",
    "test    rdi, rdi",
    "je      0x67f88",
    "test    r14b, r14b",
    "jne     0x67f58",
    "mov     eax, dword [r15+0xc]",
    "cmp     al, 0x7f",
    "je      0x68040",
    "cmp     eax, 0x1",
    "je      0x68205",
    "lea     rax, [rel posixly_correct]",
    "mov     r14d, dword [rax]  {posixly_correct}",
    "test    r14d, r14d",
    "jne     0x68360",
    "mov     r15, qword [rbp-0x40 {var_48}]",
    "cmp     eax, 0x1",
    "jne     0x67e90",
    "mov     rsi, r12",
    "call    fputs",
    "mov     rax, qword [rbp-0x40 {var_48}]",
    "cmp     rbx, rax",
    "sete    r15b",
    "test    r15b, r15b",
    "je      0x67fa8",
    "mov     rax, qword [rbp-0x40 {var_48}]",
    "cmp     rbx, rax",
    "movzx   eax, byte [rbp-0x38 {var_40}]",
    "sete    r15b",
    "and     al, r15b",
    "mov     byte [rbp-0x48 {var_50}], al",
    "jne     0x68140",
    "mov     rcx, r12",
    "mov     edx, 0x2",
    "mov     esi, 0x1",
    "mov     r14d, 0x1",
    "lea     rdi, [rel data_11fc99]",
    "call    fwrite",
    "jmp     0x67f77",
    "movzx   eax, ah",
    "mov     r14d, eax",
    "mov     r14d, eax",
    "and     r14d, 0x7f",
    "lea     edx, [r14+0x1]",
    "cmp     dl, 0x1",
    "jg      0x68046",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204e6]  {\"Running\"}",
    "call    dcgettext",
    "mov     qword [rel data_168560], rax",
    "mov     rdi, rax",
    "cmp     rbx, r13",
    "jne     0x67f2e",
    "mov     rax, qword [rbp-0x40 {var_48}]",
    "mov     eax, dword [rax+0xc]",
    "cmp     al, 0x7f",
    "jne     0x682d3",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204bc]  {\"Stopped\"}",
    "call    dcgettext",
    "mov     qword [rel data_168560], rax",
    "mov     rdi, rax",
    "cmp     rbx, r13",
    "jne     0x6812e",
    "call    sub_5f5c0",
    "lea     r15, [rel jobs]",
    "mov     rdx, qword [rbp-0x50 {var_58}]",
    "mov     r14, rax",
    "mov     rax, qword [r15]  {jobs}",
    "mov     rax, qword [rax+rdx]",
    "cmp     dword [rax+0x14], 0x1",
    "je      0x68248",
    "test    r15b, r15b",
    "jne     0x68000",
    "test    r14b, r14b",
    "jne     0x68000",
    "nop     dword [rax+rax]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204ee]  {\"Signal %d\"}",
    "call    dcgettext",
    "mov     r9d, r14d",
    "mov     ecx, 0x40",
    "lea     r14, [rel data_168520]",
    "mov     r8, rax",
    "mov     rdi, r14  {data_168520}",
    "mov     edx, 0x2",
    "mov     esi, 0x40",
    "xor     eax, eax  {0x0}",
    "call    __snprintf_chk",
    "mov     rdi, r14  {data_168520}",
    "jmp     0x6805a",
    "mov     qword [rel data_168560], rdi",
    "mov     edi, r14d",
    "call    strsignal",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x684d0",
    "test    r14d, r14d",
    "jne     0x68470",
    "mov     r8d, dword [rbp-0x34 {var_3c}]",
    "test    r8d, r8d",
    "je      0x6812e",
    "test    rdi, rdi",
    "jne     0x68081",
    "lea     r14, [rel data_168520]",
    "movzx   eax, ah",
    "mov     qword [rel data_168560], r14  {data_168520}",
    "cmp     eax, 0x43",
    "jg      0x68511",
    "mov     r15, qword [rbp-0x40 {var_48}]",
    "test    rdi, rdi",
    "je      0x68234",
    "test    byte [rax+0x18], 0x1",
    "jne     0x68164",
    "mov     r15, qword [rax]",
    "mov     rdi, r14",
    "mov     rsi, r15",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x68280",
    "lea     rax, [rel asynchronous_notification]",
    "mov     esi, dword [rax]  {asynchronous_notification}",
    "test    esi, esi",
    "je      0x6801e",
    "mov     rbx, qword [rbx]",
    "cmp     rbx, r13",
    "jne     0x67df8",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc",
    "test    r15b, r15b",
    "je      0x67fad",
    "lea     rax, [rel interactive]",
    "mov     edx, dword [rax]  {interactive}",
    "test    edx, edx",
    "jne     0x68310",
    "mov     rsi, r12",
    "mov     qword [rbp-0x48 {var_50}], rdi",
    "call    fputs",
    "mov     rdi, qword [rbp-0x48 {var_50}]",
    "mov     ecx, 0x16",
    "cmp     byte [rdi], 0x0",
    "je      0x680aa",
    "mov     r9d, dword [rbp-0x34 {var_3c}]",
    "test    r9d, r9d",
    "je      0x6812e",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_12050e]  {\"Unknown status\"}",
    "call    dcgettext",
    "mov     qword [rel data_168560], rax",
    "mov     rdi, rax",
    "jmp     0x67f25",
    "lea     r14, [rel data_168520]",
    "movzx   ecx, ah",
    "mov     qword [rel data_168560], r14  {data_168520}",
    "test    ah, 0xff",
    "je      0x68498",
    "mov     eax, dword [r13+0x10]",
    "cmp     dword [r15+0x10], eax",
    "je      0x68450",
    "mov     r10d, dword [rbp-0x34 {var_3c}]",
    "test    r10d, r10d",
    "setne   r14b",
    "jmp     0x67f77",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204c4]  {\"invalid signal number\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     r15, rax",
    "jmp     0x6839f",
    "lea     rdx, [rel signal_names]",
    "cdqe    ",
    "mov     r15, qword [rdx+rax*8]",
    "test    r15, r15",
    "je      0x68511",
    "jmp     0x68081",
    "mov     edx, 0x2",
    "mov     rcx, r12",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_120530]",
    "call    fwrite",
    "mov     rax, qword [r15]  {jobs}",
    "mov     rdx, qword [rbp-0x50 {var_58}]",
    "mov     rax, qword [rax+rdx]",
    "jmp     0x68164",
    "mov     rdi, r15",
    "call    polite_directory_format",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120533]  {\"  (wd: %s)\"}",
    "mov     r15, rax",
    "call    dcgettext",
    "mov     rcx, r15",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rdx, rax",
    "xor     eax, eax  {0x0}",
    "call    __fprintf_chk",
    "jmp     0x6817a",
    "lea     rax, [rel asynchronous_notification]",
    "mov     eax, dword [rax]  {asynchronous_notification}",
    "test    eax, eax",
    "je      0x68198",
    "mov     eax, dword [rbp-0x34 {var_3c}]",
    "mov     rcx, r12",
    "test    eax, eax",
    "je      0x68100",
    "jmp     0x681a5",
    "mov     byte [rbp-0x48 {var_50}], r15b",
    "lea     r8, [rel data_122e02]",
    "lea     rdx, [rel data_12051d]",
    "mov     rdi, r12",
    "xor     eax, eax  {0x0}",
    "mov     esi, 0x2",
    "call    __fprintf_chk",
    "mov     eax, dword [r15+0xc]",
    "cmp     al, 0x7f",
    "je      0x680de",
    "cmp     byte [rdi+0x1], 0x0",
    "mov     ecx, 0x17",
    "jne     0x68330",
    "mov     eax, dword [r13+0x10]",
    "cmp     dword [r15+0x10], eax",
    "je      0x68430",
    "cmp     rbx, r13",
    "je      0x6822b",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204f8]  {\"Done\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rdi, r14  {data_168520}",
    "mov     edx, 0x3f",
    "mov     rsi, rax",
    "call    strncpy",
    "mov     byte [rel data_16855f], 0x0",
    "mov     rdi, r14  {data_168520}",
    "jmp     0x68061",
    "lea     rax, [rel posixly_correct]",
    "mov     dword [rbp-0x48 {var_50}], ecx",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204fd]  {\"Done(%d)\"}",
    "mov     r11d, dword [rax]  {posixly_correct}",
    "test    r11d, r11d",
    "je      0x683f0",
    "mov     eax, dword [r13+0xc]",
    "cmp     dword [r15+0xc], eax",
    "jne     0x67f49",
    "test    rdi, rdi",
    "jne     0x68081",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204da]  {\"Stopped(%s)\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     rdi, r14  {data_168520}",
    "mov     r9, r15",
    "mov     edx, 0x2",
    "mov     r8, rax",
    "mov     rcx, 0xffffffffffffffff",
    "mov     esi, 0x40",
    "xor     eax, eax  {0x0}",
    "call    __snprintf_chk",
    "mov     rdi, qword [rel data_168560]",
    "cmp     rbx, r13",
    "jne     0x6812e",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc",
    "lea     rax, [rel interactive]",
    "mov     ecx, dword [rax]  {interactive}",
    "test    ecx, ecx",
    "jne     0x68314",
    "add     rsp, 0x38",
    "mov     rdi, r12",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {var_18}",
    "pop     r15 {var_10}",
    "pop     rbp {__saved_rbp}",
    "jmp     fflush",
    "cmp     eax, 0xffff",
    "je      0x680de",
    "cmp     byte [rdi+0x2], 0x0",
    "mov     ecx, 0x16",
    "je      0x680aa",
    "mov     eax, dword [r13+0xc]",
    "mov     ecx, 0x16",
    "cmp     dword [r15+0xc], eax",
    "je      0x680aa",
    "cmp     rbx, r13",
    "je      0x68081",
    "lea     rsi, [rel data_120506]  {\"Exit %d\"}",
    "jmp     0x67ef5",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     r9d, dword [rbp-0x48 {var_50}]",
    "mov     rdi, r14  {data_168520}",
    "mov     rcx, 0xffffffffffffffff",
    "mov     r8, rax",
    "mov     edx, 0x2",
    "mov     esi, 0x40",
    "xor     eax, eax  {0x0}",
    "call    __snprintf_chk",
    "mov     rdi, qword [rel data_168560]",
    "mov     ecx, 0x16",
    "jmp     0x680aa",
    "nop     word [rax+rax]",
    "jmp     0x682f9",
    "mov     rsi, r12",
    "mov     edi, 0xd",
    "call    putc",
    "movzx   r15d, byte [rbp-0x48 {var_50}]",
    "jmp     0x6801e",
    "test    al, 0x80",
    "jne     0x68400",
    "mov     dword [rbp-0x48 {var_50}], ecx  {0x16}",
    "call    strlen",
    "mov     edx, 0x18",
    "mov     ecx, 0x16",
    "sub     edx, eax",
    "test    eax, eax",
    "cmovne  ecx, edx",
    "jmp     0x680aa",
    "jmp     0x68081",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120521]  {\"(core dumped) \"}",
    "call    dcgettext",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rdx, rax",
    "xor     eax, eax  {0x0}",
    "call    __fprintf_chk",
    "jmp     0x680de"
  ],
  "high level IL": [
    "if (arg1 == 0)",
    "return ",
    "int64_t* rax = arg1",
    "uint64_t r15",
    "uint64_t var_10 = r15",
    "uint64_t r14",
    "uint64_t var_18 = r14",
    "uint64_t rcx",
    "rcx = rax",
    "rax = *rax",
    "do while (rax != arg1)",
    "uint64_t rbx = arg1",
    "int32_t rax_4 = arg3 | arg2",
    "if (rbx == arg1)",
    "goto label_67fbc",
    "while (true)",
    "uint8_t var_50",
    "char* rdi_1",
    "if (arg3 == 0)",
    "fwrite(&data_1204b4, 1, 2, arg4)",
    "fputc(0x20, arg4)",
    "if (rax_4 s>= 0)",
    "label_681d7:",
    "data_168560 = dcgettext(nullptr, \"Done\", 5)",
    "int32_t rax_38 = *(jobs[sx.q(arg2)] + 0x14)",
    "if (rax_38 != 2)",
    "r15 = rcx",
    "if (rax_38 != 1)",
    "goto label_67e90",
    "goto label_68213",
    "int16_t rax_47",
    "if (posixly_correct != 0)",
    "rax_47 = (*(rcx + 0xc)).w",
    "if (posixly_correct == 0 || rax_47.b != 0x7f)",
    "char* rax_44 = dcgettext(nullptr, \"Stopped\", 5)",
    "data_168560 = rax_44",
    "rdi_1 = rax_44",
    "if (rbx != arg1)",
    "r14 = 0",
    "label_682f9:",
    "r15 = rcx",
    "if (rdi_1 != 0)",
    "goto label_68084",
    "r14.b = arg3 != 0",
    "uint32_t rax_48 = zx.d(rax_47:1.b)",
    "data_168560 = &data_168520",
    "if (rax_48 s<= 0x43)",
    "r15 = (&signal_names)[sx.q(rax_48)]",
    "if (rax_48 s> 0x43 || r15 == 0)",
    "r15 = dcgettext(nullptr, \"invalid signal number\", 5)",
    "__snprintf_chk(&data_168520, 0x40, 2, -1, dcgettext(nullptr, \"Stopped(%s)\", 5), r15)",
    "rdi_1 = data_168560",
    "if (rbx == arg1)",
    "goto label_682f9",
    "r14 = 0",
    "r14 = 0",
    "fwrite(\"     \", 1, 5, arg4)",
    "label_67e31:",
    "__fprintf_chk(arg4, 2, \"%5ld\", sx.q(*(rbx + 8)))",
    "fputc(0x20, arg4)",
    "if (rax_4 s< 0)",
    "label_680e3:",
    "r14.b = arg3 != 0",
    "if (rbx != arg1 && r14.b != 0)",
    "r14 = 1",
    "fwrite(&data_11fc99, 1, 2, arg4)",
    "r15 = rbx",
    "data_168560 = dcgettext(nullptr, \"Done\", 5)",
    "int32_t rax_13 = *(*(jobs + (sx.q(arg2) << 3)) + 0x14)",
    "uint64_t rcx_6",
    "if (rax_13 == 2 || rax_13 != 1)",
    "label_67e90:",
    "int32_t rax_14 = *(r15 + 0xc)",
    "if (rax_14.b == 0x7f)",
    "r14 = zx.q(rax_14:1.b)",
    "label_68049:",
    "char* rax_24 = strsignal(r14.d)",
    "rdi_1 = rax_24",
    "if (rax_24 == 0)",
    "__snprintf_chk(&data_168520, 0x40, 2, 0x40, dcgettext(rdi_1, \"Signal %d\", 5), zx.q(r14.d))",
    "rdi_1 = &data_168520",
    "data_168560 = rdi_1",
    "r14 = zx.q(rax_14) & 0x7f",
    "if ((r14 + 1).b s> 1)",
    "goto label_68049",
    "if (r14.d != 0)",
    "char* rax_56 = dcgettext(nullptr, \"Unknown status\", 5)",
    "data_168560 = rax_56",
    "rdi_1 = rax_56",
    "label_67f25:",
    "if (rbx == arg1)",
    "goto label_6822b",
    "goto label_67f32",
    "data_168560 = &data_168520",
    "if ((rax_14:1.b & 0xff) != 0)",
    "var_50.d = zx.d(rax_14:1.b)",
    "char const* const msgid = \"Done(%d)\"",
    "if (posixly_correct == 0)",
    "msgid = \"Exit %d\"",
    "__snprintf_chk(&data_168520, 0x40, 2, -1, dcgettext(nullptr, msgid, 5), zx.q(var_50.d))",
    "rdi_1 = data_168560",
    "goto label_67f25",
    "strncpy(&data_168520, dcgettext(nullptr, \"Done\", 5), 0x3f)",
    "data_16855f = 0",
    "rdi_1 = &data_168520",
    "if (rbx == arg1)",
    "goto label_68084",
    "if (arg3 != 0)",
    "if (*(r15 + 0x10) != *(arg1 + 0x10))",
    "goto label_68084",
    "rcx_6 = 0x16",
    "if (*(r15 + 0xc) == *(arg1 + 0xc))",
    "goto label_680c2",
    "goto label_68084",
    "r14 = 0",
    "label_68213:",
    "char* rax_39 = dcgettext(nullptr, \"Running\", 5)",
    "data_168560 = rax_39",
    "rdi_1 = rax_39",
    "if (rbx != arg1)",
    "label_67f32:",
    "if (arg3 == 0)",
    "r14 = 0",
    "if (*(r15 + 0x10) == *(arg1 + 0x10) && *(r15 + 0xc) == *(arg1 + 0xc))",
    "rcx_6 = 0x16",
    "label_680c2:",
    "__fprintf_chk(arg4, 2, \"%*s\", rcx_6, &data_122e02)",
    "int32_t rax_27 = *(r15 + 0xc)",
    "if (rax_27.b != 0x7f && rax_27 != 0xffff && (rax_27.b & 0x80) != 0)",
    "__fprintf_chk(arg4, 2, dcgettext(nullptr, \"(core dumped) \", 5))",
    "goto label_680e3",
    "if (rdi_1 != 0)",
    "goto label_68084",
    "r14 = 1",
    "fwrite(&data_11fc99, 1, 2, arg4)",
    "label_6822b:",
    "if (rdi_1 != 0)",
    "label_68084:",
    "var_50.q = rdi_1",
    "fputs(rdi_1, arg4)",
    "char* rdi_3 = var_50.q",
    "rcx_6 = 0x16",
    "if (*rdi_3 != 0)",
    "rcx_6 = 0x17",
    "if (rdi_3[1] != 0)",
    "rcx_6 = 0x16",
    "if (rdi_3[2] != 0)",
    "var_50.d = 0x16",
    "int32_t rax_45 = strlen(rdi_3)",
    "rcx_6 = 0x16",
    "if (rax_45 != 0)",
    "rcx_6 = zx.q(0x18 - rax_45)",
    "goto label_680c2",
    "r14.b = arg3 != 0",
    "char* str = *(rbx + 0x18)",
    "if (str != 0)",
    "label_67f83:",
    "fputs(str, arg4)",
    "r15.b = rbx == rcx",
    "uint8_t rax_19 = (not.d(arg2) u>> 0x1f).b & r15.b",
    "var_50 = rax_19",
    "if (rax_19 != 0)",
    "uint64_t rax_29 = sub_5f5c0()",
    "char** rax_31 = jobs[sx.q(arg2)]",
    "if (*(rax_31 + 0x14) == 1 && (rax_31[3].b & 1) == 0)",
    "fwrite(&data_120530, 1, 2, arg4)",
    "rax_31 = jobs[sx.q(arg2)]",
    "char* r15_1 = *rax_31",
    "if (strcmp(rax_29, r15_1) != 0)",
    "char* rax_41 = polite_directory_format(r15_1)",
    "__fprintf_chk(arg4, 2, dcgettext(nullptr, \"  (wd: %s)\", 5), rax_41)",
    "if (asynchronous_notification != 0 && interactive != 0)",
    "break",
    "fputc(0xa, arg4)",
    "label_681b6:",
    "return fflush(arg4) __tailcall",
    "if (r15.b == 0)",
    "goto label_67fa8",
    "while (true)",
    "if (asynchronous_notification != 0 && interactive != 0)",
    "var_50 = r15.b",
    "label_6831c:",
    "putc(0xd, arg4)",
    "r15 = zx.q(var_50)",
    "fputc(0xa, arg4)",
    "if (r15.b != 0)",
    "goto label_681b6",
    "label_67fad:",
    "rbx = *rbx",
    "if (rbx != arg1)",
    "break",
    "label_67fbc:",
    "if (arg3 != 0)",
    "goto label_67e31",
    "fputc(0x20, arg4)",
    "if (arg2 s>= 0)",
    "goto label_681d7",
    "str = *(rbx + 0x18)",
    "r14 = 0",
    "if (str != 0)",
    "goto label_67f83",
    "r15.b = rbx == rcx",
    "if (r15.b == 0)",
    "label_67fa8:",
    "if (r14.b == 0)",
    "goto label_67fad",
    "goto label_6831c"
  ]
}