{
  "address": "0x108d70",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "test    edi, edi",
    "je      0x108f28",
    "xor     eax, eax",
    "retn    ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "lea     r12, [rel rl_point]",
    "mov     ecx, dword [r12]",
    "test    ecx, ecx",
    "je      0x108df8",
    "call    rl_ding",
    "add     rsp, 0x18",
    "mov     eax, 0x1",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel rl_end]",
    "cmp     dword [rax], 0x1",
    "jle     0x108df8",
    "mov     ebx, edi",
    "call    rl_begin_undo_group",
    "lea     rax, [rel rl_end]",
    "mov     r13d, dword [r12]",
    "cmp     r13d, dword [rax]",
    "je      0x108ef0",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0x108f08",
    "lea     r14, [rel rl_line_buffer]",
    "mov     eax, dword [r12]",
    "lea     r14, [rel rl_line_buffer]",
    "lea     r13d, [rax-0x1]",
    "lea     rax, [rel rl_byte_oriented]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x108f38",
    "mov     eax, dword [r12]",
    "sub     eax, 0x1",
    "lea     rax, [rel rl_byte_oriented]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x108e18",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0x108e18",
    "lea     r14, [rel rl_line_buffer]",
    "mov     esi, dword [r12]",
    "mov     edx, 0x1",
    "mov     rdi, qword [r14]",
    "call    _rl_find_prev_mbchar_internal",
    "mov     r13d, eax",
    "jmp     0x108f17",
    "mov     rsi, qword [rbp-0x38]",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edi, dword [r12]",
    "test    r13d, r13d",
    "jle     0x108f30",
    "mov     esi, dword [r12]",
    "mov     rdi, qword [r14]",
    "mov     edx, 0x1",
    "call    _rl_find_prev_mbchar_internal",
    "jmp     0x108e1f",
    "mov     dword [r12], r13d",
    "mov     ebx, 0x1",
    "jmp     0x108dca",
    "mov     rcx, r15",
    "jmp     0x108e74",
    "movsxd  rsi, edi",
    "movsxd  rcx, r13d",
    "xor     eax, eax",
    "add     rsi, qword [r14]",
    "nop     dword [rax]",
    "sub     r13d, eax",
    "mov     dword [r12], eax",
    "lea     r15d, [r13+0x1]",
    "movsxd  rax, r15d",
    "mov     rdi, rax",
    "mov     qword [rbp-0x38], rax",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x108f55",
    "mov     byte [rcx], 0x0",
    "lea     esi, [r13+rdi]",
    "call    rl_delete_text",
    "mov     esi, dword [r12]",
    "mov     rdi, qword [r14]",
    "mov     edx, ebx",
    "mov     ecx, 0x1",
    "call    sub_107460",
    "lea     rbx, [rel rl_end]",
    "mov     dword [r12], eax",
    "mov     edx, dword [rbx]",
    "cmp     edx, eax",
    "jl      0x108ee0",
    "movzx   edx, byte [rsi+rax]",
    "mov     byte [r15+rax], dl",
    "add     rax, 0x1",
    "cmp     rcx, rax",
    "jne     0x108e60",
    "add     rcx, r15",
    "mov     dword [r12], edx",
    "jmp     0x108eb1",
    "test    eax, eax",
    "jns     0x108eb1",
    "mov     rdi, r15",
    "call    rl_insert_text",
    "call    rl_end_undo_group",
    "test    r15, r15",
    "je      0x108ecb",
    "mov     dword [r12], 0x0",
    "add     rsp, 0x18",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, r15",
    "call    free"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}