{
  "address": "0x46c90",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdi",
    "mov     edi, 0x30",
    "push    r14",
    "mov     r14d, ecx",
    "push    r13",
    "mov     r13, rdx",
    "push    r12",
    "mov     r12d, esi",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x46e3c",
    "mov     esi, 0x30",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rbx+0x8], r15",
    "mov     qword [rbx+0x20], r13",
    "mov     qword [rbx+0x28], 0x0",
    "mov     dword [rbx+0x18], r12d",
    "mov     dword [rbx+0x14], 0x0",
    "mov     dword [rbx+0x10], r14d",
    "mov     qword [rbx], 0x0",
    "cmp     r12d, 0x13",
    "ja      0x46e1c",
    "lea     rsi, [rel data_1329b0]  {\"make_redirection: redirection in\u2026\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     esi, r12d",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    programming_error",
    "{ Does not return }",
    "lea     rdx, [rel jump_table_136580]",
    "mov     eax, r12d",
    "movsxd  rax, dword [rdx+rax*4]",
    "add     rax, rdx",
    "jmp     rax",
    "{Case 0xb}",
    "mov     dword [rbx+0x14], 0x42",
    "nop     word [rax+rax]",
    "{Case 0x1-0x2, 0x4-0x9, 0xf-0x12}",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x46e54",
    "{Case 0x0, 0xa, 0xc}",
    "mov     dword [rbx+0x14], 0x241",
    "jmp     0x46d30",
    "{Case 0x3, 0x13}",
    "mov     dword [rbx+0x14], 0x441",
    "jmp     0x46d30",
    "{Case 0xd-0xe}",
    "mov     r14, qword [r13]",
    "mov     rdi, r14",
    "call    strlen",
    "sub     eax, 0x1",
    "cdqe    ",
    "add     r14, rax",
    "cmp     byte [r14], 0x2d",
    "jne     0x46d30",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x18",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     byte [r14], 0x0",
    "mov     rdi, qword [r13]",
    "movzx   eax, byte [rdi]",
    "test    al, al",
    "je      0x46de0",
    "lea     rsi, [rbp-0x40]",
    "call    legal_number",
    "test    eax, eax",
    "je      0x46dc3",
    "mov     rdx, rdi",
    "jmp     0x46dbc",
    "xor     eax, eax",
    "cmp     r12d, 0xd",
    "setne   al",
    "add     eax, 0x11",
    "mov     dword [rbx+0x18], eax",
    "jmp     0x46d30",
    "mov     rax, qword [rbp-0x40]",
    "movsxd  rdx, eax",
    "cmp     rax, rdx",
    "jne     0x46dc3",
    "sub     eax, 0x30",
    "cmp     al, 0x9",
    "jbe     0x46db0",
    "mov     rdi, r13",
    "call    dispose_word",
    "xor     eax, eax",
    "cmp     r12d, 0xd",
    "setne   al",
    "add     eax, 0xf",
    "mov     dword [rbx+0x18], eax",
    "mov     rax, qword [rbp-0x40]",
    "mov     dword [rbx+0x20], eax",
    "jmp     0x46d30",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "test    al, al",
    "je      0x46de0"
  ]
}