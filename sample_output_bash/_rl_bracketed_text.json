{
  "address": "0x102e90",
  "rules": [
    "encrypt data using Curve25519/f2994133291147a090851ed21e9c381b",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     qword [rbp-0x40], rdi",
    "mov     edi, 0x40",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x103071",
    "mov     esi, 0x40",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     r14, [rel rl_readline_state]",
    "mov     byte [rbx], 0x0",
    "mov     r12d, 0x1",
    "xor     r15d, r15d",
    "mov     r13d, 0x40",
    "or      qword [r14], 0x40",
    "jmp     0x102f0d",
    "call    rl_read_key",
    "mov     edx, eax",
    "test    eax, eax",
    "js      0x103010",
    "and     qword [r14], 0xffffffffffffffbf",
    "mov     rcx, r15",
    "jmp     0x102fd6",
    "test    qword [r14], 0x1000",
    "jne     0x102f40",
    "mov     rax, qword [rbp-0x40]",
    "test    rax, rax",
    "je      0x102fe2",
    "mov     edi, edx",
    "mov     dword [rbp-0x38], edx",
    "call    _rl_add_macro_char",
    "mov     edx, dword [rbp-0x38]",
    "jmp     0x102f25",
    "cmp     edx, 0xd",
    "jne     0x102ee0",
    "add     rsp, 0x18",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     qword [rax], rcx",
    "cmp     r13, r15",
    "je      0x102f55",
    "cmp     r13, r15",
    "je      0x102f50",
    "mov     dword [rbp-0x38], edx",
    "add     r13, r13",
    "test    rbx, rbx",
    "je      0x102ff8",
    "mov     byte [rbx+r15], dl",
    "cmp     r12, 0x5",
    "jbe     0x102f05",
    "mov     edx, 0xa",
    "mov     byte [rbx+r15], 0xa",
    "jmp     0x102f05",
    "mov     rdi, r13",
    "call    malloc",
    "mov     edx, dword [rbp-0x38]",
    "mov     rbx, rax",
    "jmp     0x102f75",
    "mov     rdi, rbx",
    "mov     rsi, r13",
    "call    realloc",
    "mov     edx, dword [rbp-0x38]",
    "mov     rbx, rax",
    "add     r15, 0x1",
    "add     r12, 0x1",
    "cmp     edx, 0x7e",
    "jne     0x102f05",
    "test    rbx, rbx",
    "jne     0x102ee5",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r13",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "lea     rcx, [r15-0x5]",
    "lea     rdi, [rbx+rcx]",
    "cmp     byte [rdi], 0x1b",
    "je      0x102fa8",
    "mov     edx, 0x6",
    "lea     rsi, [rel data_122dfa]  {\"\\x1b[201~\"}",
    "mov     qword [rbp-0x38], rcx",
    "call    strncmp",
    "mov     rcx, qword [rbp-0x38]",
    "test    eax, eax",
    "jne     0x102f05",
    "and     qword [r14], 0xffffffffffffffbf",
    "cmp     rcx, r13",
    "je      0x103019",
    "mov     qword [rbp-0x38], rcx",
    "sub     r15, 0x4",
    "test    rbx, rbx",
    "je      0x103060",
    "mov     byte [rbx+rcx], 0x0",
    "mov     rdi, r15",
    "call    malloc",
    "mov     rcx, qword [rbp-0x38]",
    "mov     rbx, rax",
    "jmp     0x103038",
    "mov     rdi, rbx",
    "mov     rsi, r15",
    "call    realloc",
    "mov     rcx, qword [rbp-0x38]",
    "mov     rbx, rax",
    "test    rbx, rbx",
    "jne     0x102fd2",
    "mov     rsi, r15",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x38], rcx",
    "call    sub_a7f00",
    "{ Does not return }"
  ]
}