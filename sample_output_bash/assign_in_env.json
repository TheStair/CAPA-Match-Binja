{
  "address": "0x62720",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "contain loop",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, esi",
    "xor     esi, esi",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     r13, qword [rdi]",
    "mov     rdi, r13",
    "call    assignment",
    "mov     rdi, r13",
    "mov     r12d, eax",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x62bdf",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r13",
    "mov     rdi, r15",
    "mov     rbx, r15",
    "call    __strcpy_chk",
    "movsxd  r15, r12d",
    "xor     r12d, r12d",
    "mov     r13, rbx",
    "lea     rax, [rax+r15]",
    "cmp     byte [rax], 0x3d",
    "je      0x628a8",
    "mov     byte [rax], 0x0",
    "lea     rax, [rbx+r15-0x1]",
    "cmp     byte [rax], 0x2b",
    "jne     0x628be",
    "lea     rax, [rel temporary_env]",
    "mov     r15, qword [rax]",
    "test    r15, r15",
    "je      0x629c0",
    "mov     rdi, rbx",
    "call    legal_identifier",
    "test    eax, eax",
    "je      0x62a50",
    "mov     byte [rax], 0x0",
    "mov     r12d, 0x1",
    "mov     edi, 0x4",
    "call    hash_create",
    "mov     r15, rax",
    "lea     rax, [rel temporary_env]",
    "mov     qword [rax], r15",
    "jmp     0x627a2",
    "xor     edx, edx",
    "mov     rsi, r15",
    "mov     rdi, r13",
    "call    hash_search",
    "test    rax, rax",
    "je      0x62980",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fa8b]  {\"`%s': not a valid identifier\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     rdi, rbx",
    "call    free",
    "xor     eax, eax",
    "jmp     0x6285c",
    "mov     rdi, rbx",
    "call    find_variable",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x62a98",
    "lea     rax, [rel temporary_env]",
    "mov     rdi, r13",
    "mov     rsi, qword [rax]",
    "call    sub_54b40",
    "mov     r15, rax",
    "test    r12, r12",
    "jne     0x627e3",
    "mov     qword [rel data_1619d8], r15",
    "mov     r15, qword [rax+0x10]",
    "test    r15, r15",
    "je      0x62980",
    "add     rsp, 0x18",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "call    find_variable_last_nameref",
    "test    rax, rax",
    "je      0x62ba0",
    "mov     r13, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     eax, dword [r15+0x28]",
    "mov     rdi, qword [r15+0x10]",
    "mov     qword [r15+0x8], r12",
    "or      eax, 0x100001",
    "movd    xmm0, eax",
    "lea     rax, [rel variable_context]",
    "movd    xmm1, dword [rax]",
    "punpckldq xmm0, xmm1",
    "movq    qword [r15+0x28], xmm0",
    "test    rdi, rdi",
    "je      0x6281f",
    "nop     ",
    "mov     rdi, qword [r15+0x8]",
    "test    rdi, rdi",
    "je      0x627da",
    "lea     rdi, [rbx+r15+0x1]",
    "mov     r13, rbx",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     rcx, rax",
    "mov     r13, rbx",
    "test    dh, 0x8",
    "je      0x628e8",
    "and     edx, 0x2",
    "jne     0x62b00",
    "lea     rdi, [rbx+r15+0x1]",
    "mov     r15d, r12d",
    "and     r15d, 0x1",
    "cmp     byte [rdi], 0x0",
    "je      0x62b70",
    "xor     edx, edx",
    "mov     rsi, r12",
    "mov     rdi, r13",
    "call    sub_5e420",
    "mov     qword [r15+0x10], rax",
    "lea     rax, [rel array_needs_making]",
    "mov     dword [rax], 0x1",
    "test    r14d, r14d",
    "jne     0x62870",
    "call    free",
    "mov     qword [r15+0x10], 0x0",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x0",
    "jmp     0x627e3",
    "test    r12, r12",
    "je      0x629a0",
    "call    free",
    "xor     r12d, r12d",
    "jmp     0x6278f",
    "xor     esi, esi",
    "call    expand_string_assignment",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x62b2d",
    "test    edx, 0x4002",
    "jne     0x62a80",
    "mov     r13, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    r13, r13",
    "je      0x62af3",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fcf9]  {\"%s: readonly variable\"}",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "jmp     0x62a85",
    "mov     rdi, rbx",
    "call    free",
    "xor     eax, eax",
    "jmp     0x6285c",
    "test    r12d, r12d",
    "je      0x62b2d",
    "xor     esi, esi",
    "mov     qword [rbp-0x38], rcx",
    "call    expand_string_assignment",
    "mov     rcx, qword [rbp-0x38]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0x62b28",
    "cmp     byte [r13], 0x50",
    "je      0x629e0",
    "lea     rax, [rel echo_command_at_execute]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x62890",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x62bf5",
    "mov     rdi, r15",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "call    string_list_internal",
    "mov     rdi, r15",
    "mov     r12, rax",
    "call    dispose_words",
    "jmp     0x6278f",
    "mov     r13, rbx",
    "jmp     0x628e8",
    "cmp     byte [r13], 0x0",
    "je      0x62af3",
    "mov     edi, 0x1",
    "mov     qword [rbp-0x38], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x38]",
    "test    rax, rax",
    "mov     r12, rax",
    "je      0x62c0d",
    "test    r15b, r15b",
    "jne     0x62b75",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     qword [rbp-0x40], rcx",
    "mov     qword [rbp-0x38], rax",
    "call    string_list_internal",
    "mov     rdi, qword [rbp-0x38]",
    "mov     r12, rax",
    "call    dispose_words",
    "test    r15b, r15b",
    "mov     rcx, qword [rbp-0x40]",
    "je      0x6278f",
    "lea     rsi, [rel data_11f1ed]  {\"POSIXLY_CORRECT\"}",
    "mov     rdi, r13",
    "call    strcmp",
    "test    eax, eax",
    "je      0x62a0a",
    "mov     rdi, r13",
    "call    stupidly_hack_special_variables",
    "lea     rax, [rel echo_command_at_execute]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x6284f",
    "mov     ecx, 0x1",
    "xor     edx, edx",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "call    xtrace_print_assignment",
    "jmp     0x6284f",
    "mov     rdi, rbx",
    "call    free",
    "mov     eax, 0x1",
    "mov     rdi, r13",
    "mov     dword [rbp-0x40], edx",
    "mov     qword [rbp-0x38], rax",
    "call    legal_identifier",
    "mov     rcx, qword [rbp-0x38]",
    "mov     edx, dword [rbp-0x40]",
    "lea     rdi, [rbx+r15+0x1]",
    "test    eax, eax",
    "jne     0x62ba8",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [r12], 0x0",
    "jmp     0x6295a",
    "test    r12, r12",
    "je      0x62b75",
    "mov     r14, qword [rel data_161a80]",
    "test    r14, r14",
    "je      0x62b38",
    "lea     rsi, [rel data_120277]  {\"POSIX_PEDANDTIC\"}",
    "mov     rdi, r13",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x6287b",
    "cmp     byte [rdi], 0x0",
    "je      0x62b2d",
    "mov     rsi, r12",
    "mov     rdi, rcx",
    "mov     edx, 0x1",
    "call    make_variable_value",
    "mov     rdi, r12",
    "mov     r15, rax",
    "call    free",
    "mov     r12, r15",
    "jmp     0x6278f",
    "mov     edi, 0x5",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "jne     0x62a1a",
    "lea     rdx, [rel interactive_comments]",
    "xor     eax, eax",
    "lea     rcx, [rel data_156600]",
    "nop     word [rax+rax]",
    "mov     esi, 0x5",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, dword [rdx]",
    "mov     byte [r14+rax], dl",
    "add     rax, 0x1",
    "mov     rdx, qword [rcx+rax*8]",
    "test    rdx, rdx",
    "jne     0x62a30",
    "mov     qword [rel data_161a80], r14",
    "jmp     0x6287b"
  ]
}