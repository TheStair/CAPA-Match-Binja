{
  "address": "0xcdd10",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/0d50c454f5994bb894701c3c95f625c2",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "lea     r14, [rel data_121b99]",
    "push    r13 {__saved_r13}",
    "lea     r13, [rel jump_table_1377b4]",
    "push    r12 {__saved_r12}",
    "mov     r12, rdi",
    "push    rbx {__saved_rbx}",
    "xor     ebx, ebx  {0x0}",
    "sub     rsp, 0x18",
    "lea     r15, [rel loptend]",
    "lea     rax, [rel lcurrent]",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     qword [r15], 0x0  {loptend}",
    "mov     qword [rax], 0x0  {lcurrent}",
    "mov     eax, ebx",
    "mov     r15, qword [r15]  {loptend}",
    "and     eax, 0x3",
    "cmp     eax, 0x3",
    "je      0xce123",
    "cmp     eax, 0xffffff9d",
    "je      0xcdf10",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1343f8]  {\"cannot set and unset shell optio\u2026\"}",
    "xor     edi, edi  {0x0}",
    "mov     ebx, 0x1",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xcdefa",
    "mov     edx, ebx",
    "and     edx, 0xb",
    "cmp     edx, 0x8",
    "je      0xce02b",
    "call    builtin_help",
    "jmp     0xcdef5",
    "sub     eax, 0x6f",
    "cmp     eax, 0x6",
    "ja      0xcdef0",
    "add     rsp, 0x18",
    "mov     eax, ebx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     r12d, ebx",
    "mov     r13d, ebx",
    "xor     r14d, r14d  {0x0}",
    "and     r12d, 0x4",
    "and     r13d, 0x10",
    "test    r15, r15",
    "jne     0xce085",
    "mov     edx, ebx",
    "and     edx, 0x8",
    "test    r15, r15",
    "je      0xcdfec",
    "mov     ebx, 0x102",
    "{Case 0x3, 0x5}",
    "call    builtin_usage",
    "movsxd  rax, dword [r13+rax*4]",
    "add     rax, r13",
    "jmp     rax",
    "mov     rax, qword [r15+0x8]",
    "mov     rdi, qword [rax]",
    "call    minus_o_option_value",
    "cmp     eax, 0xffffffff",
    "je      0xce0f1",
    "jmp     0xce1f9",
    "mov     ecx, ebx",
    "and     ecx, 0x4",
    "test    edx, edx",
    "jne     0xce165",
    "test    edx, edx",
    "jne     0xcdf17",
    "{Case 0x6}",
    "mov     rsi, r14  {data_121b99, \"psuoq\"}",
    "mov     rdi, r12",
    "or      ebx, 0x2",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "jne     0xcdd79",
    "{Case 0x4}",
    "or      ebx, 0x1",
    "jmp     0xcdd69",
    "{Case 0x2}",
    "or      ebx, 0x4",
    "jmp     0xcdd69",
    "{Case 0x1}",
    "or      ebx, 0x10",
    "jmp     0xcdd69",
    "{Case 0x0}",
    "or      ebx, 0x8",
    "jmp     0xcdd69",
    "mov     rax, qword [r15+0x8]",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1210b0]  {\"%s: invalid option name\"}",
    "mov     rbx, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xce09f",
    "test    eax, eax",
    "jne     0xce050",
    "and     ebx, 0x4",
    "jne     0xce024",
    "test    ecx, ecx",
    "jne     0xce024",
    "test    eax, eax",
    "jne     0xce183",
    "and     ebx, 0x1",
    "mov     r13d, 0x1",
    "cmp     ebx, 0x1",
    "sbb     r12d, r12d",
    "xor     ebx, ebx  {0x0}",
    "and     r12d, 0xfffffffe",
    "add     r12d, 0x2d",
    "test    eax, eax",
    "jne     0xce14a",
    "nop     dword [rax+rax]",
    "mov     rsi, r14  {data_121b99, \"psuoq\"}",
    "mov     rdi, r12",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xcddb8",
    "mov     r14d, 0x1",
    "jmp     0xce07d",
    "test    r12d, r12d",
    "jne     0xce07d",
    "test    r12d, r12d",
    "je      0xce0a7",
    "xor     edi, edi  {0x0}",
    "jmp     0xcde99",
    "mov     edi, 0xffffffff",
    "mov     esi, r13d",
    "call    list_minus_o_opts",
    "xor     edi, edi  {0x0}",
    "jmp     0xcde99",
    "mov     esi, ebx",
    "and     ebx, 0x1",
    "mov     edi, ebx",
    "and     esi, 0x10",
    "call    list_minus_o_opts",
    "xor     edi, edi  {0x0}",
    "jmp     0xcde99",
    "mov     r13d, ebx",
    "lea     r12, [rel data_156088]",
    "lea     rdx, [rel data_11f1dc]  {\"autocd\"}",
    "and     r13d, 0x1",
    "test    ecx, ecx",
    "sete    r14b",
    "nop     ",
    "lea     r13, [rel data_156088]",
    "lea     rdx, [rel data_11f1dc]  {\"autocd\"}",
    "mov     rax, qword [r15+0x8]",
    "mov     edi, r12d",
    "mov     rsi, qword [rax]",
    "call    set_minus_o_option",
    "mov     r15, qword [r15]",
    "cmp     eax, 0x1",
    "cmove   ebx, r13d  {0x1}",
    "test    r15, r15",
    "jne     0xcdf30",
    "call    set_shellopts",
    "jmp     0xcdefa",
    "add     rsp, 0x18",
    "and     ebx, 0x1",
    "mov     rsi, r15",
    "mov     edi, ebx",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     sub_11a4d0",
    "mov     dword [rbp-0x3c {var_44_1}], 0x0",
    "nop     dword [rax]",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0xce0c0",
    "test    r13d, r13d",
    "je      0xce11a",
    "test    r13d, r13d",
    "je      0xce0c8",
    "add     rsp, 0x18",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     sh_chkwrite",
    "mov     rdx, qword [r12+0x10]",
    "add     r12, 0x18",
    "test    rdx, rdx",
    "jne     0xce1a0",
    "test    r14b, r14b",
    "jne     0xce1c5",
    "lea     r15, [rel data_11f1e9]",
    "lea     r14, [rel data_122c8a[0x12]]",
    "lea     r12, [rel data_11f1e6]",
    "jmp     0xce290",
    "mov     rdx, qword [r13+0x10]",
    "add     r13, 0x18",
    "test    rdx, rdx",
    "jne     0xce00f",
    "cmp     r12b, al",
    "jne     0xcde30",
    "mov     edi, r14d",
    "jmp     0xcde99",
    "lea     rcx, [rel data_122c8a[0x12]]  {\"on\"}",
    "jmp     0xce0d5",
    "mov     rax, qword [r15+0x8]",
    "mov     edx, 0x2d",
    "mov     rcx, qword [rax]",
    "mov     r14d, 0x1",
    "lea     rcx, [rel data_11f1e9]",
    "mov     rax, qword [r15+0x8]",
    "mov     r14d, 0x1",
    "mov     edx, 0x2b",
    "mov     rcx, qword [rax]",
    "jmp     0xce06a",
    "mov     rax, qword [r12]",
    "mov     eax, dword [rax]",
    "cmp     r13d, eax",
    "jne     0xce1b0",
    "xor     edi, edi  {0x0}",
    "jmp     0xcde99",
    "test    bl, 0x10",
    "je      0xce216",
    "mov     rax, qword [r13]",
    "mov     eax, dword [rax]",
    "test    bl, 0x10",
    "jne     0xce259",
    "test    ecx, ecx",
    "je      0xce242",
    "mov     rsi, qword [r14]",
    "add     r14, 0x18",
    "add     r13d, 0x1",
    "test    rsi, rsi",
    "je      0xcdf90",
    "mov     rdi, qword [rbp-0x38 {var_40_1}]",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xcde30",
    "mov     rax, qword [r15+0x8]",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "mov     edi, 0x2",
    "mov     rdx, qword [rax]",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xce07d",
    "lea     rsi, [rel data_121690]  {\"set %co %s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "test    eax, eax",
    "lea     rcx, [rel data_11f1e9]",
    "mov     edi, 0x2",
    "lea     rax, [rel data_122c8a[0x12]]",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "cmovne  rcx, rax  {data_122c8a[0x12], \"on\"}",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xce1b0",
    "test    eax, eax",
    "lea     rcx, [rel data_11f1e3]",
    "mov     edi, 0x2",
    "lea     rax, [rel data_11f1e6]",
    "lea     rsi, [rel data_11f235]  {\"shopt %s %s\\n\"}",
    "cmovne  rax, rcx  {data_11f1e3}",
    "mov     rcx, rdx",
    "mov     rdx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xce1b0",
    "test    eax, eax",
    "lea     rax, [rel data_11f1e3]",
    "mov     rcx, rdx",
    "cmove   rax, r12  {data_11f1e6}",
    "lea     rsi, [rel data_11f235]  {\"shopt %s %s\\n\"}",
    "mov     rdx, rax",
    "test    eax, eax",
    "mov     rcx, r14  {data_122c8a[0x12], \"on\"}",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "cmove   rcx, r15  {data_11f1e9}",
    "jmp     0xce273",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121b34]  {\"%s: invalid shell option name\"}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x38 {var_40_1}]",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xcde83",
    "movzx   eax, byte [rsi]",
    "movsxd  rcx, r13d",
    "mov     eax, ebx",
    "lea     rdx, [rcx+rcx*2]",
    "lea     rcx, [rel data_156080]",
    "and     eax, 0x4",
    "mov     rdx, qword [rcx+rdx*8+0x8]",
    "mov     edx, dword [rdx]",
    "test    edx, edx",
    "jne     0xcdf58",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "add     r13, 0x18",
    "call    __printf_chk",
    "mov     rdx, qword [r13-0x8]",
    "test    rdx, rdx",
    "je      0xce024",
    "mov     dword [rbp-0x3c {var_44_1}], 0x1",
    "test    eax, eax",
    "jne     0xcde8a",
    "test    eax, eax",
    "je      0xcdfb6",
    "mov     rax, qword [r15+0x8]",
    "lea     r14, [rel data_156098]",
    "xor     r13d, r13d  {0x0}",
    "lea     rsi, [rel data_11f1dc]  {\"autocd\"}",
    "mov     rax, qword [rax]",
    "mov     qword [rbp-0x38 {var_40_1}], rax",
    "movzx   r12d, byte [rax]",
    "mov     eax, 0x61",
    "jmp     0xcde47",
    "mov     edi, dword [rbp-0x3c {var_44_1}]",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "jne     0xcde00",
    "lea     rdx, [rel data_11f1e3]",
    "test    bl, 0x10",
    "jne     0xcdfd0",
    "mov     dword [rbp-0x3c {var_44_1}], 0x1",
    "lea     rcx, [rel data_11f1e9]",
    "test    bl, 0x10",
    "je      0xcdf73",
    "mov     rcx, qword [rbp-0x38 {var_40_1}]",
    "lea     rsi, [rel data_11f235]  {\"shopt %s %s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xcde8a",
    "lea     rcx, [rel data_122c8a[0x12]]  {\"on\"}",
    "mov     rdx, qword [rbp-0x38 {var_40_1}]",
    "lea     rsi, [rel data_11f242]  {\"%-15s\\t%s\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xcde8a",
    "lea     rdx, [rel data_11f1e6]"
  ]
}