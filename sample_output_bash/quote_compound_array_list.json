{
  "address": "0x94c40",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using RC4 KSA/c5d66f4fda884d55848eab5cc630b98c",
    "contain loop",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "endbr64 ",
    "test    rdi, rdi",
    "je      0x94f60",
    "retn    ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdi",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x38",
    "jmp     0x94cc5",
    "mov     rax, qword [r15+0x8]",
    "test    rax, rax",
    "je      0x94cb9",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0x94de0",
    "mov     r14, qword [rax]",
    "test    r14, r14",
    "je      0x94cb9",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "test    byte [rax+0x8], 0x4",
    "je      0x94c68",
    "mov     esi, 0x1",
    "mov     rdi, r14",
    "call    strchr",
    "test    rax, rax",
    "je      0x94c87",
    "cmp     byte [r14], 0x5b",
    "je      0x94d00",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "mov     rbx, rax",
    "mov     rax, qword [r15+0x8]",
    "cmp     qword [rax], r14",
    "je      0x94caa",
    "mov     rdi, r14",
    "xor     esi, esi",
    "call    sub_72bd0",
    "mov     r14, rax",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    sub_111360",
    "mov     rdi, r14",
    "movsxd  r13, eax",
    "mov     dword [rbp-0x3c], eax",
    "add     r13, r14",
    "cmp     byte [r13], 0x5d",
    "jne     0x94f10",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "mov     rbx, rax",
    "mov     rax, qword [r15+0x8]",
    "mov     r14, qword [rax]",
    "jmp     0x94caa",
    "mov     rdi, r14",
    "call    free",
    "mov     rax, qword [r15+0x8]",
    "mov     qword [rax], rbx",
    "mov     rdi, r14",
    "call    free",
    "mov     rax, qword [r15+0x8]",
    "mov     r14, qword [rax]",
    "call    sh_single_quote",
    "mov     rbx, rax",
    "mov     rax, qword [r15+0x8]",
    "mov     r14, qword [rax]",
    "jmp     0x94caa",
    "call    strlen",
    "mov     byte [r13], 0x0",
    "lea     r12, [r14+0x1]",
    "mov     esi, 0x1",
    "mov     rdi, r12",
    "mov     rbx, rax",
    "call    strchr",
    "test    rax, rax",
    "je      0x94df0",
    "mov     rdi, r12",
    "call    sh_single_quote",
    "mov     qword [rbp-0x38], rax",
    "jmp     0x94d72",
    "xor     esi, esi",
    "mov     rdi, r12",
    "call    sub_72bd0",
    "mov     rdi, rax",
    "mov     qword [rbp-0x48], rax",
    "call    sh_single_quote",
    "mov     rdi, qword [rbp-0x48]",
    "mov     qword [rbp-0x38], rax",
    "cmp     r12, rdi",
    "je      0x94d72",
    "lea     r12d, [rbx*4+0x5]",
    "mov     byte [r13], 0x5d",
    "movsxd  r12, r12d",
    "mov     rdi, r12",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x94f86",
    "call    free",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x38]",
    "mov     byte [rbx], 0x5b",
    "test    rax, rax",
    "je      0x94e08",
    "mov     qword [rbp-0x58], 0x1",
    "mov     r11d, 0x2",
    "mov     r10d, 0x2",
    "xor     edx, edx",
    "mov     dword [rbp-0x40], 0x0",
    "cmp     byte [rax], 0x0",
    "je      0x94e08",
    "add     eax, 0x1",
    "mov     byte [rbx+r11], dl",
    "mov     esi, 0x1",
    "lea     r13d, [r10+0x1]",
    "cdqe    ",
    "add     r14, rax",
    "mov     rdi, r14",
    "call    strchr",
    "test    rax, rax",
    "je      0x94f28",
    "mov     eax, dword [rbp-0x3c]",
    "mov     r10d, dword [rbp-0x40]",
    "mov     byte [rbx+r11], 0x2b",
    "add     eax, 0x2",
    "add     r10d, 0x3",
    "movsxd  rdx, eax",
    "movsxd  r11, r10d",
    "movzx   edx, byte [r14+rdx]",
    "cmp     byte [rax+0x1], 0x0",
    "je      0x94f38",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "mov     rsi, rax",
    "jmp     0x94ee9",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    sub_72bd0",
    "mov     rdi, rax",
    "mov     qword [rbp-0x38], rax",
    "call    sh_single_quote",
    "mov     rdi, qword [rbp-0x38]",
    "mov     rsi, rax",
    "cmp     r14, rdi",
    "je      0x94ee9",
    "mov     qword [rbp-0x58], 0x2",
    "mov     r11d, 0x3",
    "mov     edx, 0x1",
    "mov     r10d, 0x3",
    "mov     dword [rbp-0x40], 0x1",
    "jmp     0x94e25",
    "cmp     byte [rax+0x2], 0x0",
    "je      0x94f61",
    "movsxd  rdi, r13d",
    "mov     rdx, r12",
    "cmp     r12, rdi",
    "cmovb   rdx, rdi",
    "sub     rdx, rdi",
    "add     rdi, rbx",
    "call    __strcpy_chk",
    "mov     rax, qword [r15+0x8]",
    "mov     r14, qword [rax]",
    "jmp     0x94caa",
    "mov     qword [rbp-0x38], rax",
    "call    free",
    "mov     rsi, qword [rbp-0x38]",
    "test    r12, r12",
    "mov     ecx, 0x1",
    "mov     rsi, qword [rbp-0x38]",
    "lea     rdi, [rbx+0x1]",
    "cmovne  rcx, r12",
    "mov     qword [rbp-0x50], r11",
    "mov     dword [rbp-0x48], r10d",
    "sub     rcx, 0x1",
    "call    __memcpy_chk",
    "mov     rdi, qword [rbp-0x38]",
    "call    free",
    "mov     eax, dword [rbp-0x3c]",
    "movzx   edx, byte [r13]",
    "mov     rcx, qword [rbp-0x58]",
    "mov     r10d, dword [rbp-0x48]",
    "add     eax, 0x1",
    "mov     r11, qword [rbp-0x50]",
    "mov     byte [rbx+rcx], dl",
    "movsxd  rdx, eax",
    "movzx   edx, byte [r14+rdx]",
    "cmp     dl, 0x2b",
    "jne     0x94e98",
    "mov     qword [rbp-0x58], 0x3",
    "mov     r11d, 0x4",
    "mov     edx, 0x2",
    "mov     r10d, 0x4",
    "mov     dword [rbp-0x40], 0x2",
    "jmp     0x94e25",
    "mov     rdi, rax",
    "call    strlen",
    "lea     r10d, [rax+0x2]",
    "mov     dword [rbp-0x40], eax",
    "movsxd  rdx, eax",
    "add     eax, 0x1",
    "cdqe    ",
    "movsxd  r11, r10d",
    "mov     qword [rbp-0x58], rax",
    "jmp     0x94e25"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}