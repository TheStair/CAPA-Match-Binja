{
  "address": "0x785d0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "terminate process",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "get current PID on Linux",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x78",
    "mov     qword [rbp-0x60], rdi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0x78934",
    "xor     ebx, ebx",
    "cmp     byte [rdi], 0x0",
    "je      0x78934",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x78",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel wordexp_only]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x58], eax",
    "test    eax, eax",
    "jne     0x78934",
    "lea     rdi, [rbp-0x4c]",
    "mov     r12d, esi",
    "call    pipe",
    "test    eax, eax",
    "js      0x78910",
    "lea     rsi, [rel data_133308]  {\"cannot make pipe for process sub\u2026\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "lea     rdi, [rel data_1217ad[6]]  {\"%s\"}",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    sys_error",
    "mov     eax, r12d",
    "mov     edx, 0x40",
    "mov     esi, 0x1",
    "xor     eax, 0x1",
    "mov     dword [rbp-0x68], eax",
    "cdqe    ",
    "mov     eax, dword [rbp+rax*4-0x4c]",
    "mov     dword [rbp-0x64], eax",
    "movsxd  rax, r12d",
    "mov     edi, dword [rbp+rax*4-0x4c]",
    "call    move_to_high_fd",
    "mov     edi, 0x11",
    "mov     r13d, eax",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x78b7a",
    "mov     esi, 0x11",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rbx+0x8], 0x0",
    "movsxd  r14, r13d",
    "lea     rdx, [rbp-0x44]",
    "xor     r8d, r8d",
    "mov     ecx, 0xc",
    "mov     esi, 0xa",
    "mov     rdi, r14",
    "mov     rax, 0x2f64662f7665642f",
    "mov     qword [rbx], rax",
    "call    fmtulong",
    "lea     rdi, [rbx+0x8] {Elf64_Header::ident.abi_version}",
    "mov     edx, 0x9",
    "mov     rsi, rax",
    "call    __strcpy_chk",
    "mov     rdi, qword [rel data_1685a8]",
    "mov     r15d, dword [rel data_1685a4]",
    "test    rdi, rdi",
    "je      0x786cd",
    "mov     qword [rbp-0x78], rdi",
    "call    getdtablesize",
    "mov     rdi, qword [rbp-0x78]",
    "cmp     eax, 0x100",
    "mov     edx, eax",
    "jbe     0x786ed",
    "cmp     r13d, r15d",
    "jl      0x78960",
    "cmp     r13d, eax",
    "jge     0x78a50",
    "mov     edx, 0x100",
    "mov     eax, 0x100",
    "lea     rax, [r14*4]",
    "mov     dword [rdi+r14*4], 0x1",
    "mov     qword [rbp-0x70], rax",
    "mov     eax, dword [rel data_161064]",
    "add     eax, 0x1",
    "jmp     0x78781",
    "lea     eax, [r13+0x2]",
    "mov     dword [rel data_1685a4], eax",
    "jmp     0x786fc",
    "mov     dword [rel data_1685a4], edx",
    "mov     dword [rel data_161064], eax",
    "lea     rax, [rel last_made_pid]",
    "mov     r15d, dword [rax]",
    "lea     rax, [rel pipeline_pgrp]",
    "mov     r14d, dword [rax]",
    "test    r14d, r14d",
    "je      0x787ac",
    "cdqe    ",
    "lea     rcx, [rax*4]",
    "test    rdi, rdi",
    "je      0x78ab0",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x90], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x90]",
    "mov     r9, rax",
    "jmp     0x78722",
    "mov     rsi, rcx",
    "mov     qword [rbp-0x80], rcx",
    "call    realloc",
    "mov     rcx, qword [rbp-0x80]",
    "mov     r9, rax",
    "lea     rax, [rel shell_pgrp]",
    "mov     edx, dword [rax]",
    "lea     rax, [rel pipeline_pgrp]",
    "mov     dword [rax], edx",
    "lea     rax, [rel subshell_environment]",
    "test    byte [rax], 0x19",
    "jne     0x787be",
    "test    r9, r9",
    "je      0x78b92",
    "mov     rsi, rcx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0xa0], r9",
    "mov     qword [rbp-0x98], rcx",
    "call    sub_a7f00",
    "{ Does not return }",
    "movsxd  rdi, r15d",
    "mov     edx, dword [rel data_1685a4]",
    "mov     qword [rel data_1685a8], r9",
    "shl     rdi, 0x2",
    "cmp     rcx, rdi",
    "cmovb   rcx, rdi",
    "sub     edx, r15d",
    "xor     esi, esi",
    "movsxd  rdx, edx",
    "sub     rcx, rdi",
    "shl     rdx, 0x2",
    "add     rdi, r9",
    "call    __memset_chk",
    "lea     rax, [r14*4]",
    "mov     qword [rbp-0x70], rax",
    "mov     rax, qword [rel data_1685a8]",
    "mov     dword [rax+r14*4], 0x1",
    "mov     eax, dword [rel data_161064]",
    "add     eax, 0x1",
    "lea     rsi, [rel sub_66230]",
    "mov     edi, 0x11",
    "mov     dword [rbp-0x84], eax",
    "call    set_signal_handler",
    "lea     rax, [rel already_making_children]",
    "mov     edx, dword [rbp-0x84]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel pipeline_pgrp]",
    "mov     dword [rax], r14d",
    "test    edx, edx",
    "js      0x78a60",
    "lea     rax, [rel interactive]",
    "mov     dword [rax], 0x0",
    "call    reset_terminating_signals",
    "call    sub_350d0",
    "lea     rdi, [rel sub_8a1b0]",
    "call    sub_8a7b0",
    "lea     rax, [rel subshell_environment]",
    "and     dword [rax], 0xfffffeff",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x78b60",
    "mov     edi, 0x1",
    "call    save_pipeline",
    "xor     edi, edi",
    "mov     esi, 0x1",
    "call    make_child",
    "test    eax, eax",
    "jne     0x78988",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_133338]  {\"cannot make child for process su\u2026\"}",
    "call    dcgettext",
    "lea     rdi, [rel data_1217ad[6]]  {\"%s\"}",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    sys_error",
    "mov     rdi, rbx",
    "call    free",
    "mov     edi, r13d",
    "call    close",
    "mov     edi, dword [rbp-0x64]",
    "call    close",
    "mov     edi, 0x1",
    "call    restore_pipeline",
    "jmp     0x78934",
    "xor     edi, edi",
    "mov     dword [rbp-0x88], edx",
    "call    restore_pipeline",
    "mov     rdi, rax",
    "lea     rax, [rel last_procsub_child]",
    "mov     qword [rax], rdi",
    "mov     qword [rdi], 0x0",
    "call    procsub_add",
    "mov     rax, qword [rel data_1685a8]",
    "mov     rcx, qword [rbp-0x70]",
    "mov     edx, dword [rbp-0x88]",
    "mov     dword [rax+rcx], edx",
    "lea     rax, [rel last_made_pid]",
    "mov     dword [rax], r15d",
    "lea     rax, [rel pgrp_pipe]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "js      0x78a1a",
    "mov     edi, dword [rax]",
    "mov     eax, dword [rel data_161100]",
    "test    eax, eax",
    "jne     0x7881d",
    "lea     rax, [rel interrupt_state]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x7882f",
    "lea     rax, [rel pgrp_pipe]",
    "mov     edi, dword [rax+0x4]",
    "test    edi, edi",
    "js      0x78a2d",
    "call    close",
    "call    sub_8e2b0",
    "{ Does not return }",
    "lea     rax, [rel job_control]",
    "mov     r15d, dword [rax]",
    "test    r15d, r15d",
    "je      0x78b20",
    "call    throw_to_top_level",
    "lea     rax, [rel pgrp_pipe]",
    "mov     edi, dword [rbp-0x64]",
    "mov     qword [rax], 0xffffffffffffffff",
    "call    close",
    "jmp     0x78936",
    "call    close",
    "mov     edi, 0x2",
    "call    get_original_signal",
    "mov     esi, 0x1",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "mov     edi, 0x3",
    "call    get_original_signal",
    "mov     esi, 0x1",
    "mov     edi, 0x3",
    "call    set_signal_handler",
    "jmp     0x78842",
    "lea     rax, [rel subshell_environment]",
    "mov     esi, 0x2b",
    "mov     edi, 0x76",
    "or      dword [rax], 0x25",
    "call    change_flag",
    "lea     rax, [rel expanding_redir]",
    "mov     r11d, dword [rax]",
    "test    r11d, r11d",
    "jne     0x78b00",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x78b75",
    "call    flush_temporary_env",
    "lea     rsi, [rel sub_66230]",
    "mov     edi, 0x11",
    "call    set_signal_handler",
    "jmp     0x7887f",
    "lea     rsi, [rel sub_66230]",
    "mov     edi, 0x11",
    "call    set_signal_handler",
    "lea     rax, [rel already_making_children]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel pipeline_pgrp]",
    "mov     dword [rax], r14d",
    "call    set_sigint_handler",
    "xor     edi, edi",
    "call    set_job_control",
    "call    procsub_clear",
    "lea     rax, [rel shell_pgrp]",
    "lea     rcx, [rel pipeline_pgrp]",
    "mov     eax, dword [rax]",
    "cmp     dword [rcx], eax",
    "jne     0x78ae8",
    "call    getpid",
    "lea     rcx, [rel pipeline_pgrp]",
    "mov     dword [rcx], eax",
    "jmp     0x788bf",
    "test    r12d, r12d",
    "je      0x78ad0",
    "mov     rax, qword [rel stdout]",
    "mov     rdi, qword [rax]",
    "call    __fpurge",
    "jmp     0x788c8",
    "mov     r15d, dword [rbp-0x68]",
    "mov     edi, dword [rbp-0x64]",
    "mov     esi, r15d",
    "call    dup2",
    "test    eax, eax",
    "jns     0x78bc4",
    "mov     ecx, dword [rbp-0x64]",
    "cmp     dword [rbp-0x68], ecx",
    "je      0x78bd4",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133368]  {\"cannot duplicate named pipe %s a\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edx, r15d",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    sys_error",
    "mov     edi, 0x7f",
    "call    exit",
    "{ Does not return }",
    "lea     rbx, [rel current_fds_to_close]",
    "mov     rdi, qword [rbx]",
    "test    rdi, rdi",
    "je      0x78bee",
    "mov     edi, dword [rbp-0x64]",
    "call    close",
    "mov     edi, r13d",
    "call    close",
    "mov     rcx, qword [rbp-0x70]",
    "xor     edi, edi",
    "xor     r8d, r8d",
    "mov     rax, qword [rel data_1685a8]",
    "mov     dword [rax+rcx], edi",
    "lea     rax, [rel expanding_redir]",
    "mov     rdi, qword [rbp-0x60]",
    "mov     dword [rax], r8d",
    "call    sub_8c3f0",
    "lea     rax, [rel startup_state]",
    "lea     rdi, [rel top_level]",
    "xor     esi, esi",
    "xor     r9d, r9d",
    "mov     dword [rax], 0x2",
    "lea     rax, [rel parse_and_execute_level]",
    "mov     dword [rax], r9d",
    "call    __sigsetjmp",
    "endbr64 ",
    "mov     edx, eax",
    "test    eax, eax",
    "jne     0x78c95",
    "call    close_fd_bitmap",
    "xor     r10d, r10d",
    "mov     qword [rbx], r10",
    "mov     dword [rbp-0x54], edx",
    "mov     eax, dword [rbp-0x58]",
    "lea     rax, [rel return_catch_flag]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0x78ce0",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edx, dword [rax]",
    "jmp     0x78c80",
    "cmp     ebx, 0x6",
    "sete    dl",
    "cmp     ebx, 0x3",
    "sete    cl",
    "or      dl, cl",
    "je      0x78cc0",
    "lea     rdi, [rel return_catch]",
    "xor     esi, esi",
    "mov     dword [rbp-0x54], 0x0",
    "call    __sigsetjmp",
    "endbr64 ",
    "jmp     0x78c9b",
    "lea     rax, [rel subshell_level]",
    "mov     rdi, qword [rbp-0x60]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1208cf]  {\"process substitution\"}",
    "add     dword [rax], 0x1",
    "call    parse_and_execute",
    "mov     edx, eax",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rax], edx",
    "call    run_exit_trap",
    "mov     edi, eax",
    "call    exit",
    "{ Does not return }",
    "mov     ecx, dword [rbp-0x54]",
    "mov     edx, 0x1",
    "test    ecx, ecx",
    "jne     0x78c80",
    "mov     ebx, dword [rbp-0x54]",
    "cmp     ebx, 0x4",
    "je      0x78cb3",
    "test    eax, eax",
    "je      0x78c5f",
    "lea     rax, [rel return_catch_value]",
    "mov     edx, dword [rax]",
    "jmp     0x78c80"
  ]
}