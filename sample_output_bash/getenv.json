{
  "address": "0xdaaa0",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "cmp     byte [rdi], 0x0",
    "je      0xdabf0",
    "xor     ebx, ebx",
    "jmp     0xdab46",
    "lea     rax, [rel temporary_env]",
    "mov     rbx, rdi",
    "mov     r12, qword [rax]",
    "test    r12, r12",
    "je      0xdab60",
    "add     rsp, 0x8",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel shell_variables]",
    "cmp     qword [rax], 0x0",
    "je      0xdab90",
    "xor     edx, edx",
    "mov     rsi, r12",
    "call    hash_search",
    "test    rax, rax",
    "je      0xdab60",
    "mov     rax, qword [rel environ]",
    "mov     r13, qword [rax]",
    "test    r13, r13",
    "je      0xdabf0",
    "mov     rdi, rbx",
    "call    find_variable",
    "test    rax, rax",
    "je      0xdabf0",
    "mov     qword [rel data_1619d8], r12",
    "mov     r12, qword [rax+0x10]",
    "test    r12, r12",
    "je      0xdab60",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     r12, qword [r13]",
    "mov     r15d, eax",
    "test    r12, r12",
    "je      0xdabf0",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x1",
    "je      0xdabf0",
    "mov     rdi, qword [rel data_16a3c0]",
    "test    rdi, rdi",
    "je      0xdab04",
    "add     r13, 0x8",
    "movsxd  r14, eax",
    "jmp     0xdabd4",
    "mov     rbx, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "jmp     0xdab46",
    "mov     rbx, qword [r12+0x8]",
    "test    rbx, rbx",
    "je      0xdab3f",
    "call    free",
    "test    r15d, r15d",
    "je      0xdabc0",
    "mov     qword [rel data_16a3c0], rbx",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xdac22",
    "cmp     byte [r12+r14], 0x3d",
    "je      0xdac18",
    "movzx   eax, byte [rbx]",
    "cmp     byte [r12], al",
    "je      0xdac00",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, rbx",
    "mov     rdx, r12",
    "mov     rdi, r13",
    "mov     rbx, r13",
    "call    __strcpy_chk",
    "lea     rbx, [r12+r14+0x1]",
    "jmp     0xdab46",
    "mov     r12, qword [r13]",
    "add     r13, 0x8",
    "test    r12, r12",
    "je      0xdabf0",
    "mov     rdx, r14",
    "mov     rsi, rbx",
    "mov     rdi, r12",
    "call    strncmp",
    "test    eax, eax",
    "jne     0xdabe2",
    "mov     r12, qword [r13]",
    "add     r13, 0x8",
    "test    r12, r12",
    "jne     0xdabd9",
    "jmp     0xdabc0",
    "nop     "
  ]
}