{
  "address": "0x7bf70",
  "rules": [
    "encrypt data using RC4 KSA/89b7ba675fcb4f4eac2317f83c0a9436",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "lea     rdx, [rel ifs_var]",
    "mov     rax, rdi",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "mov     qword [rdx], rdi",
    "test    rdi, rdi",
    "je      0x7c0c8",
    "lea     rcx, [rel ifs_is_set]",
    "lea     rsi, [rel ifs_cmap]",
    "lea     rdx, [rel data_120c5d[7]]  {\" \\t\\n\"}",
    "lea     rbx, [rel ifs_value]",
    "mov     dword [rcx], 0x0",
    "lea     rcx, [rel ifs_is_null]",
    "mov     rdi, rsi",
    "mov     qword [rbx], rdx",
    "mov     dword [rcx], 0x0",
    "mov     ecx, 0x20",
    "rep stosq qword [rdi]",
    "lea     rax, [rel locale_utf8locale]",
    "mov     rcx, rdx",
    "mov     edi, dword [rax]",
    "mov     eax, 0x20",
    "jmp     0x7bff8",
    "mov     rdx, qword [rdi+0x8]",
    "lea     rax, [rel data_120c5d[7]]  {\" \\t\\n\"}",
    "lea     rbx, [rel ifs_value]",
    "lea     rsi, [rel ifs_cmap]",
    "test    rdx, rdx",
    "cmove   rdx, rax",
    "lea     rax, [rel ifs_is_set]",
    "xor     ecx, ecx",
    "mov     rdi, rsi",
    "mov     dword [rax], 0x1",
    "lea     rax, [rel ifs_is_null]",
    "mov     qword [rbx], rdx",
    "cmp     byte [rdx], 0x0",
    "sete    cl",
    "mov     dword [rax], ecx",
    "xor     eax, eax",
    "mov     ecx, 0x20",
    "rep stosq qword [rdi]",
    "lea     rcx, [rel locale_utf8locale]",
    "movzx   eax, byte [rdx]",
    "mov     edi, dword [rcx]",
    "mov     rcx, rdx",
    "test    al, al",
    "je      0x7c030",
    "movzx   eax, al",
    "add     rdx, 0x1",
    "mov     byte [rsi+rax], 0x1",
    "movzx   eax, byte [rdx]",
    "test    al, al",
    "jne     0x7bff8",
    "test    edi, edi",
    "jne     0x7c015",
    "nop     word [rax+rax]",
    "test    edi, edi",
    "je      0x7c038",
    "test    al, al",
    "lea     rdx, [rel ifs_firstc_len]",
    "mov     rsi, qword [rbx]",
    "setne   al",
    "movzx   eax, al",
    "mov     qword [rdx], rax",
    "jmp     0x7c067",
    "nop     dword [rax]",
    "call    __ctype_get_mb_cur_max",
    "mov     rdi, qword [rbx]",
    "mov     rsi, rax",
    "call    strnlen",
    "mov     r12, rax",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "ja      0x7c088",
    "movzx   eax, byte [rcx]",
    "test    al, al",
    "js      0x7c038",
    "movzx   ecx, byte [rsi]",
    "lea     rax, [rel ifs_firstc]",
    "mov     qword [rdx], 0x1",
    "mov     byte [rax], cl",
    "mov     byte [rax+0x1], 0x0",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbx]",
    "mov     rsi, r12",
    "call    mblen",
    "lea     rdx, [rel ifs_firstc_len]",
    "mov     rsi, qword [rbx]",
    "cdqe    ",
    "lea     rcx, [rax-0x2]",
    "mov     qword [rdx], rax",
    "cmp     rcx, 0xfffffffffffffffb",
    "ja      0x7c067",
    "lea     rdx, [rel ifs_firstc_len]",
    "mov     rsi, qword [rbx]",
    "mov     qword [rdx], 0x1",
    "lea     rdi, [rel ifs_firstc]",
    "pop     rbx",
    "mov     ecx, 0x10",
    "mov     rdx, rax",
    "pop     r12",
    "pop     rbp",
    "jmp     __memcpy_chk"
  ]
}