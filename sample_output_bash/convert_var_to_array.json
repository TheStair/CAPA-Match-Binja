{
  "address": "0x92790",
  "rules": [
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "mov     r12, qword [rdi+0x8]",
    "mov     edi, 0x20",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x9287a",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "movdqa  xmm0, xmmword [rel data_136770]",
    "mov     qword [r14+0x18], 0x0",
    "mov     edi, 0x20",
    "movups  xmmword [r14], xmm0",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x92892",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [r13], 0xffffffffffffffff",
    "mov     qword [r13+0x8], 0x0",
    "mov     qword [r13+0x10], r13",
    "mov     qword [r13+0x18], r13",
    "mov     qword [r14+0x10], r13",
    "test    r12, r12",
    "je      0x92814",
    "mov     rdi, qword [rbx+0x8]",
    "test    rdi, rdi",
    "je      0x92822",
    "mov     rdx, r12",
    "xor     esi, esi",
    "mov     rdi, r14",
    "call    array_insert",
    "mov     rdi, qword [rbx+0x10]",
    "pxor    xmm0, xmm0",
    "mov     qword [rbx+0x8], r14",
    "movups  xmmword [rbx+0x18], xmm0",
    "test    rdi, rdi",
    "je      0x92844",
    "call    free",
    "mov     eax, dword [rbx+0x28]",
    "test    al, 0x1",
    "je      0x92855",
    "call    free",
    "mov     qword [rbx+0x10], 0x0",
    "mov     edx, eax",
    "and     ah, 0xef",
    "or      edx, 0x4",
    "or      eax, 0x4",
    "test    r12, r12",
    "cmove   eax, edx",
    "and     eax, 0xfffff7bf",
    "mov     dword [rbx+0x28], eax",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel array_needs_making]",
    "add     dword [rdx], 0x1"
  ]
}