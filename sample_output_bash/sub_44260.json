{
  "address": "0x44260",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/811ca4c4f8d549569ea2aaef177bf1ac",
    "encrypt data using XXTEA/8b51ac557ada4334b6544ffbf490740a/6611357b470d4f51a55c8b60d2040800",
    "decrypt data using TEA/b2f1d7a7bfa04984a8dca63866a95e23/65029a7be1a74342926ce5af1066d3d1",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/e07fefb4fc9348cdbcc471f43936d29f",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/19c5b9e7682744d8b574f82a4f55cf68",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "PEB access/fd0dc33357ac4dfab7ffc937f75726c6",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/71ff62d8869d418e88d129a8b5fcc11b",
    "encrypt data using TEA/6daa315fd3424f3e9ddc04a16106b42a/a391c789b13342be8944ab433e4f9dba"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, r8d",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12d, esi",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     byte [rbp-0x3b], 0x0",
    "test    edx, edx",
    "je      0x44408",
    "xor     r8d, r8d",
    "lea     r9, [rbp-0x50]",
    "jmp     0x4434a",
    "mov     rax, 0x8888888888888889",
    "mov     edi, 0x14",
    "lea     r9, [rbp-0x50]",
    "mov     r8, 0x6666666666666667",
    "imul    rcx",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "lea     rsi, [rdx+rcx]",
    "sar     rsi, 0x5",
    "sub     rsi, rax",
    "mov     rax, rsi",
    "shl     rax, 0x4",
    "sub     rax, rsi",
    "shl     rax, 0x2",
    "sub     rcx, rax",
    "nop     ",
    "mov     r10, 0x6666666666666667",
    "mov     esi, 0x14",
    "nop     dword [rax]",
    "mov     rax, rsi",
    "imul    r8",
    "mov     rax, rsi",
    "sar     rax, 0x3f",
    "sar     rdx, 0x2",
    "sub     rdx, rax",
    "lea     rax, [rdx+rdx*4]",
    "add     rax, rax",
    "sub     rsi, rax",
    "mov     r10, rsi",
    "mov     rsi, rdx",
    "mov     rdx, rdi",
    "add     r10d, 0x30",
    "mov     byte [r9+rdi], r10b",
    "sub     rdi, 0x1",
    "test    rsi, rsi",
    "jne     0x442e0",
    "movsxd  rdx, edx",
    "mov     eax, 0x1",
    "add     rdx, r9",
    "nop     dword [rax+rax]",
    "mov     rax, rcx",
    "imul    r10",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x2",
    "sub     rdx, rax",
    "mov     rax, rcx",
    "lea     rdi, [rdx+rdx*4]",
    "mov     rcx, rdx",
    "add     rdi, rdi",
    "sub     rax, rdi",
    "mov     rdi, rsi",
    "add     eax, 0x30",
    "mov     byte [r9+rsi], al",
    "sub     rsi, 0x1",
    "test    rdx, rdx",
    "jne     0x44360",
    "lea     edx, [r8+0x1]",
    "movsxd  rdi, edi",
    "movsxd  r8, r8d",
    "sub     rdi, r8",
    "movsxd  rdx, edx",
    "add     r9, rdi",
    "nop     word [rax+rax]",
    "mov     byte [rbx+rax-0x1], r10b",
    "mov     rsi, rax",
    "add     rax, 0x1",
    "movzx   r10d, byte [rdx+rax-0x1]",
    "test    r10b, r10b",
    "jne     0x44328",
    "lea     r8d, [rsi+0x1]",
    "movsxd  rsi, esi",
    "mov     byte [rbx+rsi], 0x6d",
    "mov     byte [rbx+rdx-0x1], al",
    "mov     r15, rdx",
    "lea     rdx, [rdx+0x1]",
    "movzx   eax, byte [r9+rdx-0x1]",
    "test    al, al",
    "jne     0x443b0",
    "mov     eax, r15d",
    "test    r12d, r12d",
    "jne     0x44418",
    "call    localeconv",
    "test    rax, rax",
    "je      0x44480",
    "test    r13d, r13d",
    "je      0x443dc",
    "mov     eax, 0x2e",
    "jmp     0x44437",
    "mov     rax, qword [rax {lconv::decimal_point}]",
    "test    rax, rax",
    "je      0x44480",
    "movsxd  rdx, eax",
    "mov     byte [rbx+rdx], 0x0",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x44487",
    "movsxd  rdx, eax",
    "add     eax, 0x1",
    "mov     byte [rbx+rdx], 0x73",
    "lea     edi, [r15-0x1]",
    "lea     esi, [r15+0x1]",
    "movsxd  r15, r15d",
    "mov     byte [rbx+r15], al",
    "movsxd  rdi, edi",
    "mov     ecx, 0x1",
    "lea     r8, [rel data_1366f0]",
    "add     rdi, rbx",
    "movzx   eax, byte [rax]",
    "mov     edx, 0x2e",
    "test    al, al",
    "cmove   eax, edx",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, r14d",
    "cdq     ",
    "idiv    dword [r8+rcx*4]",
    "add     eax, 0x30",
    "mov     r14d, edx",
    "mov     byte [rdi+rcx+0x1], al",
    "add     rcx, 0x1",
    "cmp     r12d, ecx",
    "jge     0x44458",
    "lea     eax, [r12+rsi]",
    "jmp     0x443cd"
  ]
}