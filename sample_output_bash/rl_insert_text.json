{
  "address": "0x100e20",
  "rules": [
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "contain loop",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "test    rdi, rdi",
    "je      0x100f80",
    "xor     r14d, r14d",
    "jmp     0x100f6e",
    "xor     r14d, r14d",
    "cmp     byte [rdi], 0x0",
    "mov     rbx, rdi",
    "je      0x100f6e",
    "add     rsp, 0x18",
    "mov     eax, r14d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "call    strlen",
    "mov     r12, rax",
    "mov     r14d, eax",
    "test    eax, eax",
    "je      0x100f6e",
    "lea     rax, [rel rl_end]",
    "lea     rdx, [rel rl_line_buffer_len]",
    "movsxd  rax, dword [rax]",
    "lea     edi, [rax+r12]",
    "cmp     edi, dword [rdx]",
    "jge     0x100f88",
    "call    rl_extend_line_buffer",
    "lea     rax, [rel rl_end]",
    "movsxd  rax, dword [rax]",
    "jmp     0x100e7d",
    "lea     r13, [rel rl_point]",
    "lea     r15, [rel rl_line_buffer]",
    "movsxd  r9, r14d",
    "xor     r8d, r8d",
    "movsxd  rdi, dword [r13]",
    "cmp     edi, eax",
    "jg      0x100ebe",
    "add     rdi, qword [r15]",
    "movsxd  rdx, r12d",
    "mov     rsi, rbx",
    "call    strncpy",
    "lea     rax, [rel _rl_doing_an_undo]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "mov     eax, dword [r13]",
    "jne     0x100f4f",
    "nop     dword [rax]",
    "add     eax, r12d",
    "mov     dword [r13], eax",
    "lea     rax, [rel rl_end]",
    "add     r12d, dword [rax]",
    "mov     dword [rax], r12d",
    "mov     rax, qword [r15]",
    "movsxd  r12, r12d",
    "mov     byte [rax+r12], 0x0",
    "lea     rcx, [rel rl_undo_list]",
    "cmp     r12d, 0x1",
    "jne     0x100efc",
    "mov     rdx, qword [r15]",
    "movzx   ecx, byte [rdx+rax]",
    "add     rdx, rax",
    "sub     rax, 0x1",
    "mov     byte [rdx+r9], cl",
    "movsxd  rdi, dword [r13]",
    "lea     edx, [r8+rax]",
    "cmp     edi, edx",
    "jle     0x100ea0",
    "lea     edx, [rax+r12]",
    "movd    xmm0, eax",
    "mov     edi, 0x20",
    "mov     qword [rbp-0x38], rcx",
    "movd    xmm1, edx",
    "punpckldq xmm0, xmm1",
    "movq    rbx, xmm0",
    "call    malloc",
    "mov     rcx, qword [rbp-0x38]",
    "test    rax, rax",
    "mov     rdx, rax",
    "je      0x100fbb",
    "mov     rdx, qword [rcx]",
    "test    rdx, rdx",
    "je      0x100efc",
    "mov     qword [rbp-0x38], rax",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], rcx",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rcx]",
    "mov     dword [rdx+0x18], 0x1",
    "mov     qword [rdx+0x8], rbx",
    "mov     qword [rdx+0x10], 0x0",
    "mov     qword [rcx], rdx",
    "mov     qword [rdx], rax",
    "mov     eax, dword [r13]",
    "cmp     dword [rdx+0x18], 0x1",
    "je      0x100f9c",
    "cmp     dword [rdx+0xc], eax",
    "jne     0x100efc",
    "mov     esi, eax",
    "sub     esi, dword [rdx+0x8]",
    "cmp     esi, 0x13",
    "jg      0x100efc",
    "lea     ecx, [rax+0x1]",
    "mov     dword [rdx+0xc], ecx",
    "jmp     0x100f4f"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}