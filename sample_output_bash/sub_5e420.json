{
  "address": "0x5e420",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdi",
    "push    r14",
    "push    r13",
    "mov     r13, rsi",
    "push    r12",
    "mov     r12d, edx",
    "push    rbx",
    "sub     rsp, 0x28",
    "call    strlen",
    "mov     rbx, rax",
    "test    r13, r13",
    "je      0x5e570",
    "lea     r13, [rax+0x2]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x5e753",
    "movzx   r8d, byte [r13]",
    "xor     r14d, r14d",
    "test    r8b, r8b",
    "jne     0x5e530",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rcx, r13",
    "mov     rsi, r15",
    "mov     rdi, rax",
    "call    __memcpy_chk",
    "add     rbx, r12",
    "mov     byte [rbx], 0x3d",
    "jmp     0x5e510",
    "cmp     byte [r13+0x1], 0x0",
    "mov     r14d, 0x1",
    "je      0x5e45c",
    "and     r12d, 0x8",
    "je      0x5e660",
    "mov     byte [rbx+0x1], 0x0",
    "cmp     byte [r13+0x2], 0x0",
    "mov     r14d, 0x2",
    "je      0x5e45c",
    "lea     rcx, [r14+rbx+0x2]",
    "mov     byte [rbp-0x40], r8b",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x38], rcx",
    "call    malloc",
    "mov     rcx, qword [rbp-0x38]",
    "movzx   r8d, byte [rbp-0x40]",
    "mov     r12, rax",
    "cmp     rbx, rcx",
    "mov     r9, rcx",
    "cmovae  r9, rbx",
    "sub     r9, rbx",
    "test    rax, rax",
    "je      0x5e701",
    "lea     r14, [r14+rbx+0xe]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x5e73d",
    "mov     rdi, r13",
    "mov     byte [rbp-0x38], r8b",
    "call    strlen",
    "movzx   r8d, byte [rbp-0x38]",
    "mov     r14, rax",
    "jmp     0x5e45c",
    "mov     rsi, rcx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], r9",
    "mov     qword [rbp-0x38], rcx",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r15",
    "mov     rdi, r12",
    "add     rbx, r12",
    "mov     byte [rbp-0x41], r8b",
    "mov     qword [rbp-0x40], r9",
    "mov     qword [rbp-0x38], rcx",
    "call    __memcpy_chk",
    "mov     rcx, qword [rbp-0x38]",
    "mov     r9, qword [rbp-0x40]",
    "mov     byte [rbx], 0x3d",
    "movzx   r8d, byte [rbp-0x41]",
    "test    r8b, r8b",
    "je      0x5e510",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rcx, r14",
    "mov     edx, 0xa",
    "lea     rsi, [rel data_11ff94]  {\"BASH_FUNC_\"}",
    "mov     rdi, r12",
    "call    __memcpy_chk",
    "mov     ecx, 0xa",
    "mov     rdx, rbx",
    "mov     rsi, r15",
    "cmp     r14, rcx",
    "lea     rdi, [r12+0xa]",
    "cmovae  rcx, r14",
    "sub     rcx, 0xa",
    "mov     qword [rbp-0x38], rcx",
    "call    __memcpy_chk",
    "mov     rcx, qword [rbp-0x38]",
    "lea     rsi, [rel data_120178]",
    "mov     rdi, rax",
    "cmp     r14, rcx",
    "mov     rax, rcx",
    "lea     r8, [rdi+rbx]",
    "cmovae  rax, r14",
    "mov     rdi, r8",
    "lea     rdx, [rbx+rax]",
    "mov     r15, rdx",
    "sub     r15, rcx",
    "cmp     r15, rax",
    "cmovb   r15, rax",
    "sub     rcx, rdx",
    "mov     edx, 0x2",
    "add     r15, rcx",
    "mov     rcx, r15",
    "call    __memcpy_chk",
    "cmp     byte [r13], 0x0",
    "mov     byte [rax+0x2], 0x3d",
    "lea     rbx, [rax+0x2]",
    "jne     0x5e5a8",
    "cmp     r9, rcx",
    "lea     rdx, [r14+0x1]",
    "lea     rdi, [rbx+0x1]",
    "mov     rsi, r13",
    "cmovae  rcx, r9",
    "mov     rax, rcx",
    "sub     rax, r9",
    "add     rax, 0x1",
    "cmp     rax, rcx",
    "cmovb   rax, rcx",
    "sub     r9, 0x1",
    "sub     r9, rcx",
    "lea     rcx, [rax+r9]",
    "call    __memcpy_chk",
    "jmp     0x5e514",
    "cmp     r14, r15",
    "mov     rdx, r15",
    "mov     qword [rbp-0x38], rax",
    "mov     rdi, r13",
    "cmovae  rdx, r14",
    "mov     rax, rdx",
    "sub     rax, r15",
    "add     rax, 0x2",
    "cmp     rax, rdx",
    "cmovb   rax, rdx",
    "sub     r15, rdx",
    "lea     r15, [r15+rax-0x2]",
    "call    dequote_escapes",
    "mov     r8, qword [rbp-0x38]",
    "mov     edx, 0x1",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0x5e620",
    "add     rsp, 0x28",
    "mov     rax, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "cmp     r14, r15",
    "lea     rdi, [r8+0x3]",
    "mov     rsi, rbx",
    "cmovb   r14, r15",
    "mov     rcx, r14",
    "sub     rcx, r15",
    "add     rcx, 0x1",
    "cmp     rcx, r14",
    "cmovb   rcx, r14",
    "sub     r15, 0x1",
    "sub     r15, r14",
    "add     rcx, r15",
    "call    __memcpy_chk",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x5e514",
    "cmp     byte [rax], 0x0",
    "je      0x5e620",
    "cmp     byte [rax+0x1], 0x0",
    "mov     edx, 0x2",
    "je      0x5e620",
    "cmp     byte [rax+0x2], 0x0",
    "mov     edx, 0x3",
    "je      0x5e620",
    "mov     rdi, rax",
    "mov     qword [rbp-0x38], r8",
    "call    strlen",
    "mov     r8, qword [rbp-0x38]",
    "lea     rdx, [rax+0x1]",
    "nop     word [rax+rax]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}