{
  "address": "0x402c0",
  "rules": [
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    rbx",
    "sub     rsp, 0x18",
    "lea     rax, [rel posixly_correct]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x18], eax",
    "lea     rax, [rel EOF_Reached]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x14], eax",
    "test    eax, eax",
    "je      0x40356",
    "lea     rdi, [rel top_level]",
    "xor     esi, esi",
    "call    __sigsetjmp",
    "endbr64 ",
    "test    eax, eax",
    "jne     0x403c0",
    "jmp     0x403d0",
    "mov     rbx, qword [rbp-0x8]",
    "mov     eax, 0x1",
    "leave   ",
    "retn    ",
    "call    read_command",
    "test    eax, eax",
    "jne     0x403c0",
    "mov     rbx, qword [rbp-0x8]",
    "xor     eax, eax",
    "leave   ",
    "retn    ",
    "lea     rax, [rel global_command]",
    "mov     rbx, qword [rax]",
    "mov     qword [rax], 0x0",
    "lea     rax, [rel posixly_correct]",
    "mov     dword [rax], 0x1",
    "test    rbx, rbx",
    "jne     0x402f0",
    "lea     rax, [rel command_string_index]",
    "mov     rdi, rbx",
    "mov     dword [rel data_16105c], 0x0",
    "mov     qword [rel data_161050], 0x0",
    "mov     dword [rax], 0x0",
    "call    sub_48540",
    "lea     rax, [rel the_printed_command]",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "je      0x4039c",
    "mov     edx, dword [rbp-0x14]",
    "test    edx, edx",
    "jne     0x40335",
    "call    puts",
    "mov     dword [rbp-0x14], 0x0",
    "lea     rax, [rel posixly_correct]",
    "mov     edx, dword [rbp-0x18]",
    "mov     rdi, rbx",
    "mov     dword [rax], edx",
    "call    dispose_command",
    "lea     rax, [rel EOF_Reached]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x403d0",
    "mov     edi, 0xa",
    "call    putchar",
    "mov     dword [rbp-0x14], 0x1",
    "jmp     0x40335"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}