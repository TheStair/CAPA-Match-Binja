{
  "address": "0xf1c20",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using RSA via embedded library/8bc479b14953434c9835ec8295d733a3",
    "encrypt data using RC4 KSA/c5d66f4fda884d55848eab5cc630b98c",
    "encrypt data using Curve25519/a423aa5d0923438c8eac88d5abe4fcd5",
    "contain loop",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "lea     r8, [rsi+0x8]",
    "mov     rbp, rsp",
    "push    r15",
    "xor     r15d, r15d",
    "push    r14",
    "push    r13",
    "xor     r13d, r13d",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x68",
    "mov     qword [rbp-0x50], rdi",
    "mov     dword [rbp-0x34], 0x0",
    "mov     dword [rbp-0x38], 0x0",
    "mov     qword [rbp-0x70], rsi",
    "jmp     0xf1c7d",
    "movzx   eax, byte [r8-0x8]",
    "cmp     al, 0x1",
    "jne     0xf1c60",
    "test    al, 0xfd",
    "je      0xf1e10",
    "mov     rsi, qword [r8]",
    "test    rsi, rsi",
    "je      0xf1c68",
    "mov     rax, qword [rbp-0x50]",
    "cmp     qword [r8], rax",
    "jne     0xf1c68",
    "add     r13d, 0x1",
    "add     r8, 0x10",
    "cmp     r13d, 0x101",
    "je      0xf1ea8",
    "mov     rdi, qword [rbp-0x50]",
    "mov     qword [rbp-0x40], r8",
    "call    rl_invoking_keyseqs_in_map",
    "mov     r8, qword [rbp-0x40]",
    "test    rax, rax",
    "mov     qword [rbp-0x80], rax",
    "mov     rbx, rax",
    "je      0xf1c68",
    "mov     edi, r13d",
    "mov     qword [rbp-0x40], r8",
    "call    sub_eb3c0",
    "mov     r8, qword [rbp-0x40]",
    "mov     r12, rax",
    "mov     eax, dword [rbp-0x34]",
    "lea     r14d, [rax+0x1]",
    "mov     eax, dword [rbp-0x38]",
    "cmp     r14d, eax",
    "jge     0xf1e60",
    "add     rsp, 0x68",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "je      0xf1fe3",
    "add     dword [rbp-0x38], 0xa",
    "movsxd  rbx, dword [rbp-0x38]",
    "shl     rbx, 0x3",
    "test    r15, r15",
    "je      0xf1eba",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     dword [rbp-0x34], r14d",
    "mov     qword [r15+rax*8], r12",
    "mov     qword [r15+rax*8+0x8], 0x0",
    "jmp     0xf1c68",
    "mov     rdi, qword [rbp-0x80]",
    "mov     qword [rbp-0x40], r8",
    "call    free",
    "mov     r8, qword [rbp-0x40]",
    "jmp     0xf1c68",
    "mov     ecx, r13d",
    "movsxd  r14, dword [rbp-0x34]",
    "mov     edx, r13d",
    "mov     byte [rbp-0x41], r13b",
    "or      ecx, 0x40",
    "or      edx, 0x40",
    "mov     dword [rbp-0x40], r13d",
    "movsx   rcx, cl",
    "mov     byte [rbp-0x42], dl",
    "shl     r14, 0x3",
    "lea     rax, [rcx+rcx]",
    "mov     qword [rbp-0x88], r8",
    "mov     qword [rbp-0x58], rax",
    "lea     rax, [rcx*4]",
    "mov     qword [rbp-0x78], rax",
    "mov     dword [rbp-0x48], edx",
    "jmp     0xf1d20",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x40], r8",
    "call    malloc",
    "mov     r8, qword [rbp-0x40]",
    "mov     r15, rax",
    "jmp     0xf1e83",
    "mov     rdi, r15",
    "mov     rsi, rbx",
    "call    realloc",
    "mov     r8, qword [rbp-0x40]",
    "mov     r15, rax",
    "call    strlen",
    "lea     r12, [rax+0x6]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xf206d",
    "test    r15, r15",
    "jne     0xf1e3f",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], r8",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r12",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "cmp     dword [rbp-0x40], 0x1b",
    "je      0xf1ee8",
    "lea     rax, [rel _rl_convert_meta_chars_to_ascii]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0xf1f06",
    "cmp     dword [rbp-0x40], 0x1f",
    "jle     0xf1f20",
    "mov     eax, 0x655c",
    "mov     byte [r13+0x2], 0x0",
    "mov     word [r13], ax",
    "jmp     0xf1d8b",
    "mov     rax, qword [rbp-0x70]",
    "cmp     byte [rax+0x1b0], 0x1",
    "je      0xf2060",
    "movzx   eax, word [rel data_136ab8[4]]  {\"\\CC->\"}",
    "mov     byte [r13+0x2], 0x2d",
    "mov     word [r13], ax",
    "call    __ctype_b_loc",
    "lea     rdx, [r13+0x3]",
    "mov     rdi, qword [rax]",
    "mov     rax, qword [rbp-0x58]",
    "movzx   eax, word [rdi+rax]",
    "test    ah, 0x2",
    "je      0xf2010",
    "mov     esi, dword [rbp-0x40]",
    "cmp     esi, 0x7f",
    "je      0xf1fb0",
    "mov     rsi, qword [rbx]",
    "mov     rdi, r13",
    "mov     rdx, r12",
    "call    __strcat_chk",
    "mov     rdi, qword [rbx]",
    "test    rdi, rdi",
    "je      0xf1da6",
    "mov     dword [r13], 0x2d4d5c",
    "jmp     0xf1d8b",
    "test    ah, 0x1",
    "je      0xf2048",
    "mov     qword [rbp-0x68], rdx",
    "mov     qword [rbp-0x60], rdi",
    "call    __ctype_toupper_loc",
    "mov     rcx, qword [rbp-0x78]",
    "mov     rdi, qword [rbp-0x60]",
    "mov     rax, qword [rax]",
    "mov     rdx, qword [rbp-0x68]",
    "mov     esi, dword [rax+rcx]",
    "movzx   r8d, sil",
    "test    byte [rdi+r8*2+0x1], 0x1",
    "je      0xf2030",
    "movzx   eax, word [rel data_136ab8[4]]  {\"\\CC->\"}",
    "mov     byte [r13+0x2], 0x2d",
    "lea     rdx, [r13+0x3]",
    "mov     edi, 0x3f",
    "mov     word [r13], ax",
    "mov     eax, 0x4",
    "jmp     0xf1d82",
    "cmp     esi, 0x22",
    "movzx   edi, byte [rbp-0x41]",
    "mov     rdx, rax",
    "mov     eax, 0x1",
    "sete    r8b",
    "add     dword [rbp-0x34], 0x1",
    "mov     ecx, dword [rbp-0x38]",
    "mov     eax, dword [rbp-0x34]",
    "cmp     eax, ecx",
    "jl      0xf1d00",
    "call    free",
    "mov     esi, dword [rbp-0x48]",
    "movzx   edi, byte [rbp-0x42]",
    "xor     r8d, r8d",
    "mov     eax, 0x4",
    "jmp     0xf1d70",
    "mov     qword [rbp-0x60], rdx",
    "call    __ctype_tolower_loc",
    "mov     r8, qword [rbp-0x78]",
    "mov     rdx, qword [rbp-0x60]",
    "mov     rax, qword [rax]",
    "jmp     0xf1f99",
    "cmp     esi, 0x22",
    "mov     edi, esi",
    "mov     eax, 0x4",
    "sete    r8b",
    "jmp     0xf1d70",
    "mov     qword [rbp-0x68], rdx",
    "mov     qword [rbp-0x60], r8",
    "call    __ctype_tolower_loc",
    "mov     r8, qword [rbp-0x60]",
    "mov     rdx, qword [rbp-0x68]",
    "mov     rax, qword [rax]",
    "shl     r8, 0x2",
    "mov     byte [rdx], dil",
    "mov     byte [r13+rax], 0x0",
    "mov     byte [rdx], 0x5c",
    "movsxd  rdx, eax",
    "add     eax, 0x1",
    "add     rdx, r13",
    "cdqe    ",
    "jmp     0xf1d82",
    "test    r8b, r8b",
    "jne     0xf1ed0",
    "mov     qword [r15+r14], r13",
    "add     rbx, 0x8",
    "add     r14, 0x8",
    "mov     qword [r15+r14], 0x0",
    "mov     rdi, qword [rbx]",
    "test    rdi, rdi",
    "je      0xf1fd8",
    "add     dword [rbp-0x38], 0xa",
    "movsxd  r12, dword [rbp-0x38]",
    "shl     r12, 0x3",
    "test    r15, r15",
    "je      0xf2000",
    "cmp     esi, 0x5c",
    "je      0xf1ed0",
    "mov     esi, dword [rax+r8]",
    "mov     eax, 0x4",
    "cmp     esi, 0x22",
    "mov     edi, esi",
    "sete    r8b",
    "jmp     0xf1d70",
    "mov     r13d, dword [rbp-0x40]",
    "mov     r8, qword [rbp-0x88]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r15, rax",
    "jmp     0xf1ddb",
    "mov     rdi, r15",
    "mov     rsi, r12",
    "call    realloc",
    "mov     r15, rax",
    "test    r15, r15",
    "jne     0xf1d00",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r12",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}