{
  "address": "0xab990",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "check if file exists/33e235b3e802457492251bc0c05ce35e/2e923016c5754d05a3af5b3b8024a7e6",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13d, 0x1",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     qword [rbp-0x48], rdi",
    "mov     dword [rbp-0x34], esi",
    "test    esi, esi",
    "je      0xab9c1",
    "lea     r12, [rel js]",
    "mov     edi, dword [r12+0x1c]",
    "call    strlist_create",
    "mov     r8d, dword [r12+0x1c]",
    "mov     r15, rax",
    "sub     r8d, 0x1",
    "js      0xaba84",
    "xor     r13d, r13d",
    "cmp     esi, 0x1",
    "sete    r13b",
    "lea     r13d, [r13+r13*2-0x1]",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rax+0x10], r15",
    "add     rsp, 0x28",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel jobs]",
    "movsxd  rbx, r8d",
    "mov     r12, qword [rax]",
    "jmp     0xaba04",
    "mov     rax, qword [r12+rbx*8]",
    "test    rax, rax",
    "je      0xab9f8",
    "sub     rbx, 0x1",
    "test    ebx, ebx",
    "js      0xaba84",
    "cmp     dword [rbp-0x34], 0xffffffff",
    "mov     rdx, qword [rax+0x8]",
    "je      0xaba1d",
    "mov     rsi, qword [rdx+0x18]",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x40], rsi",
    "call    strlen",
    "lea     r14, [rax+0x1]",
    "mov     rdi, r14",
    "call    malloc",
    "mov     rsi, qword [rbp-0x40]",
    "test    rax, rax",
    "mov     rdi, rax",
    "je      0xaba9d",
    "cmp     dword [rax+0x14], r13d",
    "jne     0xab9f8",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "call    dcgettext",
    "mov     rdx, r14",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rcx, r14",
    "mov     rdx, r14",
    "call    __memcpy_chk",
    "lea     rsi, [rel data_120c5d[7]]  {\" \\t\\n\"}",
    "mov     rdi, rax",
    "mov     r14, rax",
    "call    strpbrk",
    "test    rax, rax",
    "je      0xaba6a",
    "movsxd  rax, dword [r15+0xc]",
    "mov     rcx, qword [r15]",
    "sub     rbx, 0x1",
    "lea     esi, [rax+0x1]",
    "mov     dword [r15+0xc], esi",
    "mov     qword [rcx+rax*8], r14",
    "test    ebx, ebx",
    "jns     0xaba04",
    "mov     byte [rax], 0x0"
  ]
}