{
  "address": "0x7b7b0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "check if file exists/9e9f210df85141fd87185852507ad125/0fcfdde5a12c4c95b0c37ee23bca2635",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdx",
    "lea     rdx, [rbp-0x3a]",
    "push    r13",
    "push    r12",
    "mov     r12d, ecx",
    "mov     ecx, 0x3a",
    "push    rbx",
    "mov     rbx, r8",
    "sub     rsp, 0x48",
    "mov     qword [rbp-0x58], rdi",
    "mov     rdi, r14",
    "mov     qword [rbp-0x50], rsi",
    "xor     esi, esi",
    "mov     qword [rbp-0x48], r9",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     word [rbp-0x3a], cx",
    "mov     ecx, 0x400",
    "call    skip_to_delim",
    "movsxd  rcx, eax",
    "lea     r15, [r14+rcx]",
    "cmp     byte [r15], 0x3a",
    "je      0x7ba20",
    "mov     byte [r15], 0x0",
    "jmp     0x7b819",
    "xor     r15d, r15d",
    "mov     rdi, r14",
    "mov     esi, 0x101",
    "xor     r14d, r14d",
    "call    expand_arith_string",
    "mov     r13, rax",
    "lea     rax, [rel shell_compatibility_level]",
    "mov     rdi, r13",
    "cmp     dword [rax], 0x33",
    "lea     rax, [rbp-0x40]",
    "setle   r14b",
    "mov     rdx, rax",
    "mov     qword [rbp-0x60], rax",
    "mov     esi, r14d",
    "call    evalexp",
    "mov     rdi, r13",
    "mov     qword [rbx], rax",
    "call    free",
    "mov     edx, dword [rbp-0x40]",
    "test    edx, edx",
    "je      0x7ba18",
    "xor     eax, eax",
    "jmp     0x7b8b5",
    "cmp     r12d, 0x2",
    "je      0x7b8e0",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x7bb49",
    "mov     r8, qword [rbx]",
    "mov     rax, qword [rbp-0x58]",
    "shr     r8, 0x3f",
    "test    byte [rax+0x28], 0x40",
    "je      0x7bab0",
    "jg      0x7ba30",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x48",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbp-0x50]",
    "add     r8, qword [rax]",
    "jmp     0x7b904",
    "mov     rax, qword [rax+0x8]",
    "mov     qword [rbp-0x68], rax",
    "add     r8d, dword [rax+0xc]",
    "movsxd  r8, r8d",
    "cmp     r12d, 0x3",
    "jne     0x7b8b0",
    "test    r12d, r12d",
    "je      0x7ba3a",
    "cmp     r8, 0xffffffffffffffff",
    "je      0x7b8b0",
    "mov     eax, 0xffffffff",
    "mov     rax, qword [rbx]",
    "test    rax, rax",
    "jns     0x7b91a",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0x7bac0",
    "cmp     r12d, 0x1",
    "jne     0x7b8b0",
    "cmp     rax, r8",
    "jg      0x7b8b0",
    "add     rax, r8",
    "mov     qword [rbx], rax",
    "js      0x7b8b0",
    "mov     rdi, qword [rbp-0x50]",
    "xor     r8d, r8d",
    "test    rdi, rdi",
    "je      0x7b90a",
    "mov     rax, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0x7ba78",
    "lea     rax, [rel posparam_count]",
    "mov     r8d, dword [rax]",
    "add     r8d, 0x1",
    "cmp     qword [rbx], 0x0",
    "movsxd  r8, r8d",
    "jne     0x7b904",
    "cmp     r12d, 0x2",
    "je      0x7ba98",
    "cmp     byte [rdi], 0x0",
    "je      0x7b90a",
    "xor     r8d, r8d",
    "jmp     0x7b90a",
    "cmp     byte [rax], 0x0",
    "je      0x7ba78",
    "add     r8, 0x1",
    "cmp     r8, 0xffffffffffffffff",
    "je      0x7b8b0",
    "mov     rax, qword [rbp-0x58]",
    "test    byte [rax+0x28], 0x40",
    "je      0x7bb10",
    "test    r15, r15",
    "je      0x7ba80",
    "cmp     byte [rdi+0x1], 0x0",
    "mov     r8d, 0x1",
    "je      0x7b90a",
    "cmp     byte [rax+0x1], 0x0",
    "mov     r8d, 0x1",
    "je      0x7b90a",
    "test    r8, r8",
    "jns     0x7b929",
    "mov     rax, qword [rbp-0x50]",
    "mov     r8, qword [rax+0x8]",
    "jmp     0x7b929",
    "mov     rax, qword [rbp-0x68]",
    "movsxd  r8, dword [rax+0xc]",
    "jmp     0x7b929",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rax], r8",
    "lea     r13, [r15+0x1]",
    "mov     qword [rbp-0x58], r8",
    "mov     rdi, r13",
    "call    strlen",
    "lea     rdx, [rax+0x1]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x50], rdx",
    "call    malloc",
    "mov     rdx, qword [rbp-0x50]",
    "mov     r8, qword [rbp-0x58]",
    "test    rax, rax",
    "mov     r9, rax",
    "je      0x7bb4e",
    "cmp     byte [rdi+0x2], 0x0",
    "mov     r8d, 0x2",
    "je      0x7b90a",
    "mov     rdi, rax",
    "call    mbstrlen",
    "mov     r8, rax",
    "jmp     0x7b904",
    "nop     dword [rax+rax]",
    "mov     qword [rbp-0x68], rax",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdi, r9",
    "mov     rsi, r13",
    "mov     qword [rbp-0x68], r8",
    "call    __strcpy_chk",
    "mov     esi, 0x101",
    "mov     rdi, rax",
    "mov     qword [rbp-0x58], rax",
    "call    expand_arith_string",
    "mov     rdi, qword [rbp-0x58]",
    "mov     qword [rbp-0x50], rax",
    "call    free",
    "mov     byte [r15], 0x3a",
    "mov     r15, qword [rbp-0x50]",
    "mov     esi, r14d",
    "mov     rdx, qword [rbp-0x60]",
    "mov     rdi, r15",
    "call    evalexp",
    "mov     r14, qword [rbp-0x48]",
    "mov     rdi, r15",
    "mov     qword [r14], rax",
    "call    free",
    "mov     eax, dword [rbp-0x40]",
    "test    eax, eax",
    "je      0x7ba18",
    "call    strlen",
    "mov     r8, rax",
    "jmp     0x7b90a",
    "lea     edx, [r12-0x1]",
    "mov     rax, qword [r14]",
    "mov     r8, qword [rbp-0x68]",
    "cmp     edx, 0x1",
    "jbe     0x7bb20",
    "test    rax, rax",
    "js      0x7b9f3",
    "test    rax, rax",
    "jns     0x7bb33",
    "lea     rsi, [rel data_12090a]  {\"%s: substring expression < 0\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "nop     dword [rax+rax]",
    "cmp     r12d, 0x2",
    "je      0x7ba87",
    "add     rax, qword [rbx]",
    "mov     rbx, qword [rbp-0x48]",
    "cmp     rax, r8",
    "cmovg   rax, r8",
    "mov     qword [rbx], rax",
    "jmp     0x7ba87",
    "mov     rcx, qword [rbp-0x48]",
    "add     rax, r8",
    "mov     qword [rcx], rax",
    "js      0x7b9f3",
    "mov     eax, 0x1",
    "jmp     0x7b8b5",
    "cmp     rax, qword [rbx]",
    "jge     0x7ba87"
  ]
}