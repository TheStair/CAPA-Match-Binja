{
  "address": "0x105010",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using XXTEA/8b51ac557ada4334b6544ffbf490740a/33e90fccc3014d20a84f729899796186",
    "decrypt data using TEA/b2f1d7a7bfa04984a8dca63866a95e23/984e354f362243e4a3c29794ab375d51",
    "get current PID on Linux",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "encrypt data using TEA/6daa315fd3424f3e9ddc04a16106b42a/cc31b12fa45348f89da50dd0ea5d26bd",
    "PEB access/fd0dc33357ac4dfab7ffc937f75726c6"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x1000",
    "or      qword [rsp], 0x0",
    "sub     rsp, 0x10",
    "mov     edx, 0x1000",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x28], rax",
    "xor     eax, eax",
    "lea     rbx, [rbp-0x1030]",
    "mov     r14, rdi",
    "mov     rsi, rbx",
    "call    readlink",
    "test    rax, rax",
    "jle     0x105061",
    "mov     rdi, r14",
    "call    strlen",
    "lea     r13, [rax+0xb]",
    "mov     rbx, rax",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x1051cb",
    "mov     byte [rbp+rax-0x1030], 0x0",
    "mov     r14, rbx",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r13",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    __strcpy_chk",
    "call    getpid",
    "mov     byte [r12+rbx], 0x2d",
    "mov     ecx, eax",
    "cdqe    ",
    "imul    rdx, rax, 0x68db8bad",
    "mov     esi, ecx",
    "sar     esi, 0x1f",
    "sar     rdx, 0x2c",
    "sub     edx, esi",
    "movsxd  rdi, edx",
    "mov     r8d, edx",
    "imul    rdi, rdi, 0x66666667",
    "sar     r8d, 0x1f",
    "sar     rdi, 0x22",
    "sub     edi, r8d",
    "lea     edi, [rdi+rdi*4]",
    "add     edi, edi",
    "sub     edx, edi",
    "add     edx, 0x30",
    "mov     byte [r12+rbx+0x1], dl",
    "imul    rdx, rax, 0x10624dd3",
    "sar     rdx, 0x26",
    "sub     edx, esi",
    "movsxd  rdi, edx",
    "mov     r8d, edx",
    "imul    rdi, rdi, 0x66666667",
    "sar     r8d, 0x1f",
    "sar     rdi, 0x22",
    "sub     edi, r8d",
    "lea     edi, [rdi+rdi*4]",
    "add     edi, edi",
    "sub     edx, edi",
    "add     edx, 0x30",
    "mov     byte [r12+rbx+0x2], dl",
    "imul    rdx, rax, 0x51eb851f",
    "sar     rdx, 0x25",
    "sub     edx, esi",
    "movsxd  rdi, edx",
    "mov     r8d, edx",
    "imul    rdi, rdi, 0x66666667",
    "sar     r8d, 0x1f",
    "sar     rdi, 0x22",
    "sub     edi, r8d",
    "lea     edi, [rdi+rdi*4]",
    "add     edi, edi",
    "sub     edx, edi",
    "add     edx, 0x30",
    "imul    rax, rax, 0x66666667",
    "mov     byte [r12+rbx+0x3], dl",
    "sar     rax, 0x22",
    "sub     eax, esi",
    "movsxd  rdx, eax",
    "mov     esi, eax",
    "imul    rdx, rdx, 0x66666667",
    "sar     esi, 0x1f",
    "sar     rdx, 0x22",
    "sub     edx, esi",
    "lea     esi, [rdx+rdx*4]",
    "mov     edx, eax",
    "lea     eax, [rax+rax*4]",
    "add     esi, esi",
    "add     eax, eax",
    "sub     edx, esi",
    "sub     ecx, eax",
    "lea     rsi, [rel data_122ed9]  {\".tmp\"}",
    "add     edx, 0x30",
    "add     ecx, 0x30",
    "mov     byte [r12+rbx+0x4], dl",
    "mov     edx, 0x5",
    "mov     byte [r12+rbx+0x5], cl",
    "add     rbx, 0x6",
    "mov     rcx, r13",
    "cmp     r13, rbx",
    "lea     rdi, [r12+rbx]",
    "cmovb   rcx, rbx",
    "sub     rcx, rbx",
    "call    __memcpy_chk",
    "mov     rax, qword [rbp-0x28]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x1051e1",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x1010",
    "mov     rax, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    "
  ]
}