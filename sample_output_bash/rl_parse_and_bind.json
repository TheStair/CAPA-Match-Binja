{
  "address": "0xf4b30",
  "rules": [
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "decompress data using LZO/eb3121acf7214c64b84ac9b7cddcf413",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "contain loop",
    "hide graphical window from taskbar/3804d9f76e4f47c8b3a7ed608bc3a556",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x58",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "test    rdi, rdi",
    "je      0xf4db0",
    "xor     eax, eax  {0x0}",
    "movzx   eax, byte [rdi]",
    "mov     rdx, rdi",
    "cmp     al, 0x9",
    "je      0xf4b70",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x58",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "cmp     al, 0x20",
    "je      0xf4b70",
    "cmp     al, 0x20",
    "jne     0xf4b80",
    "cmp     al, 0x9",
    "je      0xf4b70",
    "test    al, al",
    "je      0xf4db0",
    "nop     dword [rax+rax]",
    "cmp     al, 0x23",
    "je      0xf4db0",
    "cmp     al, 0x24",
    "je      0xf5275",
    "movzx   eax, byte [rdx+0x1]",
    "lea     r15, [rdx+0x1]",
    "cmp     al, 0x20",
    "je      0xf5289",
    "lea     rcx, [rel _rl_parsing_conditionalized_out]",
    "cmp     byte [rcx], 0x0",
    "jne     0xf4db0  {_rl_parsing_conditionalized_out}",
    "lea     rsi, [rdx+0x2]",
    "mov     rcx, rsi",
    "cmp     al, 0x9",
    "jne     0xf54e6",
    "cmp     al, 0x22",
    "je      0xf4cd2",
    "movzx   eax, byte [rcx]",
    "mov     r12, rcx",
    "lea     rcx, [rcx+0x1]",
    "cmp     al, 0x20",
    "je      0xf5290",
    "cmp     al, 0x9",
    "je      0xf5290",
    "mov     r12, r15",
    "xor     esi, esi  {0x0}",
    "jmp     0xf52aa",
    "movsx   ecx, byte [rdx+0x1]",
    "test    ecx, ecx",
    "je      0xf53e3",
    "movsx   ebx, al",
    "mov     r15, rdx",
    "xor     edi, edi  {0x0}",
    "xor     eax, eax  {0x0}",
    "mov     ecx, r12d",
    "sub     ecx, esi",
    "lea     esi, [rcx+0x1]",
    "test    al, al",
    "je      0xf55df",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_134838]  {\"%s: no closing `\"' in key bindin\u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf5202",
    "lea     rsi, [rdx+0x2]",
    "mov     eax, 0x1",
    "xor     edi, edi  {0x0}",
    "jmp     0xf4d14",
    "lea     esi, [rax-0x1]",
    "cmp     ebx, 0x3a",
    "je      0xf50b8",
    "mov     r15, r12",
    "jmp     0xf5316",
    "movsxd  rcx, esi",
    "mov     rdi, r12",
    "lea     rcx, [rdx+rcx+0x2]",
    "nop     dword [rax]",
    "mov     eax, 0x1",
    "jmp     0xf4db2",
    "test    edi, edi",
    "je      0xf4cf0",
    "test    esi, esi",
    "je      0xf51f1",
    "cmp     ebx, 0x20",
    "je      0xf50b8",
    "lea     r14, [rel data_1554c0]",
    "xor     r13d, r13d  {0x0}",
    "lea     rsi, [rel data_1228d3]  {\"if\"}",
    "mov     rbx, r14  {data_1554c0}",
    "jmp     0xf5341",
    "mov     byte [rdi], 0x0",
    "add     esi, 0x1",
    "jmp     0xf52e1",
    "cmp     al, 0x9",
    "je      0xf5383",
    "mov     rdx, qword [rbp-0x38 {var_40}]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xf5623",
    "cmp     ecx, 0x5c",
    "je      0xf4dd8",
    "xor     edi, edi  {0x0}",
    "jmp     0xf4d02",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_134860]  {\"`%s': invalid key binding: missi\u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "cmp     ebx, 0x3a",
    "jne     0xf55f7",
    "cmp     ebx, 0x9",
    "jne     0xf4bc8",
    "mov     rdi, r12",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xf5330",
    "movsxd  rsi, esi",
    "add     r15, rsi",
    "movzx   eax, byte [r15]",
    "test    al, al",
    "je      0xf5316",
    "mov     rdi, rcx",
    "movzx   eax, byte [rcx]",
    "add     rcx, 0x1",
    "add     esi, 0x1",
    "test    al, al",
    "jne     0xf52c0",
    "mov     edi, 0x1",
    "jmp     0xf4d02",
    "cmp     ecx, 0x22",
    "je      0xf5112",
    "movsx   ecx, byte [rsi]",
    "add     eax, 0x1",
    "add     rsi, 0x1",
    "test    ecx, ecx",
    "je      0xf53e3",
    "mov     ebx, 0x20",
    "jmp     0xf4c04",
    "cmp     byte [rdx+rdi+0x1], 0x3d",
    "jne     0xf4c04",
    "movsx   ebx, byte [rdx+rax]",
    "lea     r15, [rdx+rax]",
    "lea     rcx, [rax+0x1]",
    "mov     rdi, rax",
    "test    ebx, ebx",
    "je      0xf50f9",
    "test    esi, esi",
    "je      0xf51f1",
    "mov     rsi, qword [rbx+0x10]",
    "add     rbx, 0x10",
    "add     r13d, 0x1",
    "test    rsi, rsi",
    "je      0xf536d",
    "movsxd  r13, r13d",
    "mov     rdi, r15",
    "shl     r13, 0x4",
    "call    qword [r14+r13+0x8]",
    "jmp     0xf4db0",
    "lea     rcx, [rdx+rsi+0x2]",
    "mov     rdx, rcx",
    "sub     rdx, r15",
    "jmp     0xf530e",
    "cmp     al, 0x20",
    "je      0xf5383",
    "add     eax, 0x1",
    "movsxd  rdi, eax",
    "lea     r15, [rdx+rdi]",
    "movsx   ebx, byte [r15]",
    "test    ebx, ebx",
    "jne     0xf4bba",
    "mov     r13d, eax",
    "cdqe    ",
    "mov     byte [r15], 0x0",
    "lea     r15, [rdx+rax]",
    "movzx   r12d, byte [r15]",
    "mov     dword [rbp-0x50 {var_58_1}], 0x0",
    "lea     r13d, [rax+0x1]",
    "mov     byte [r15], 0x0",
    "cdqe    ",
    "movsxd  rcx, r13d",
    "mov     byte [rdx+rax], 0x0",
    "lea     r15, [rdx+rcx]",
    "mov     dword [rbp-0x50 {var_58_1}], 0x1",
    "movzx   r12d, byte [r15]",
    "jmp     0xf4c1c",
    "mov     r13d, eax",
    "cdqe    ",
    "lea     r15, [rdx+rax]",
    "movzx   r12d, byte [r15]",
    "mov     dword [rbp-0x50 {var_58_1}], 0x0",
    "jmp     0xf4c1c",
    "mov     rax, rcx",
    "mov     rsi, r12",
    "lea     rdi, [rel data_122af9]  {\"%s: unknown parser directive\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf4db0",
    "cmp     al, 0x20",
    "je      0xf5300",
    "add     eax, 0x1",
    "cdqe    ",
    "jmp     0xf4be2",
    "lea     rsi, [rel data_121260]  {\"set\"}",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x48 {var_50_8}], rdx",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0xf4d3e",
    "test    r12b, r12b",
    "jne     0xf4d20",
    "test    r12b, r12b",
    "mov     rdx, qword [rbp-0x48 {var_50_1}]",
    "je      0xf55a7",
    "lea     rsi, [rel data_121260]  {\"set\"}",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x48 {var_50_1}], rdx",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0xf4d39",
    "movzx   eax, byte [rcx]",
    "add     rcx, 0x1",
    "add     r15, rdx",
    "test    al, al",
    "je      0xf5316",
    "cmp     al, 0x9",
    "je      0xf5300",
    "mov     rbx, r15",
    "xor     r12d, r12d  {0x0}",
    "mov     dword [rbp-0x50 {var_58_1}], 0x0",
    "mov     rdx, qword [rbp-0x48 {var_50_8}]",
    "mov     rdi, r15",
    "jmp     0xf4e76",
    "cmp     r12b, 0x20",
    "je      0xf4d30",
    "mov     rdi, r15",
    "jmp     0xf4e76",
    "movsxd  rax, r13d",
    "lea     rax, [rdx+rax+0x1]",
    "jmp     0xf4c68",
    "mov     rdi, r15",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xf4d58",
    "mov     ecx, dword [rbp-0x50 {var_58_1}]",
    "mov     byte [rdi], 0x0",
    "test    ecx, ecx",
    "jne     0xf4db0",
    "movzx   r12d, byte [r15+0x1]",
    "add     r15, 0x1",
    "cmp     r12b, 0x9",
    "jne     0xf4de2",
    "cmp     r12b, 0x20",
    "je      0xf4c50",
    "mov     rsi, qword [r13]",
    "add     r13, 0x18",
    "test    rsi, rsi",
    "je      0xf5160",
    "movzx   eax, byte [rbx]",
    "mov     rdx, rbx",
    "test    al, al",
    "je      0xf4d9c",
    "test    ebx, ebx",
    "je      0xf520c",
    "movzx   eax, byte [r15]",
    "test    al, al",
    "je      0xf4d3e",
    "mov     r15, rax",
    "movzx   r12d, byte [rax]",
    "add     rax, 0x1",
    "add     r13d, 0x1",
    "test    r12b, r12b",
    "je      0xf4e46",
    "cmp     r12b, 0x9",
    "je      0xf4c50",
    "lea     r13, [rel data_155638]",
    "lea     rsi, [rel data_122998]  {\"active-region-end-color\"}",
    "jmp     0xf5181",
    "mov     rsi, rbx",
    "mov     rdi, r15",
    "call    rl_variable_bind",
    "nop     word [rax+rax]",
    "nop     ",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_1348b8]  {\"%s: no key sequence terminator\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf5202",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x48 {var_50_2}], rdx",
    "call    strlen",
    "mov     rdx, qword [rbp-0x48 {var_50_2}]",
    "mov     qword [rbp-0x68 {var_70_1}], rax",
    "cmp     byte [rdx], 0x22",
    "je      0xf54f0",
    "mov     rbx, r15",
    "nop     dword [rax]",
    "movsxd  r13, r13d",
    "lea     rdi, [rdx+r13]",
    "movzx   eax, byte [rdi]",
    "test    al, al",
    "je      0xf4e76",
    "cmp     r12b, 0x27",
    "je      0xf4c84",
    "mov     rdi, r15",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xf5170",
    "cmp     rbx, rdx",
    "jae     0xf4d9c",
    "cmp     al, 0x9",
    "je      0xf4d94",
    "mov     r12, rax",
    "add     r12, 0x1",
    "mov     rdi, r12",
    "call    malloc",
    "mov     rdx, qword [rbp-0x48 {var_50_2}]",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0xf5609",
    "mov     esi, 0x2d",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x48 {var_50_3}], rdx",
    "lea     r13, [rel data_155530]",
    "call    strrchr",
    "mov     rdx, qword [rbp-0x48 {var_50_3}]",
    "test    rax, rax",
    "lea     rsi, [rax+0x1]",
    "cmove   rsi, rdx",
    "mov     r14, rdx",
    "xor     r12d, r12d  {0x0}",
    "mov     rbx, rsi",
    "lea     rsi, [rel data_121ea2]",
    "jmp     0xf4efd",
    "mov     byte [rbx], 0x0",
    "add     rbx, 0x1",
    "jmp     0xf4e24",
    "cmp     al, 0x9",
    "je      0xf5361",
    "lea     rsi, [rdx+r13+0x1]",
    "mov     r8, rsi",
    "sub     r8, rdi",
    "nop     ",
    "add     r13d, 0x1",
    "movsxd  rax, r13d",
    "add     rax, rdx",
    "movsx   esi, byte [rax]",
    "mov     edi, esi",
    "test    esi, esi",
    "je      0xf54a8",
    "cmp     r12b, 0x22",
    "jne     0xf4e46",
    "mov     rsi, qword [r13]",
    "add     r13, 0x18",
    "test    rsi, rsi",
    "je      0xf543a",
    "cmp     r12b, 0x22",
    "je      0xf5450",
    "mov     byte [rdx], 0x0",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "test    al, al",
    "jne     0xf4d80",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   esi, byte [rdx+0x1]",
    "test    sil, sil",
    "je      0xf5601",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xf4ee8",
    "movzx   r12d, byte [rbx]",
    "test    r12b, r12b",
    "je      0xf4d44",
    "movzx   eax, byte [rbx+0x1]",
    "add     rbx, 0x1",
    "test    al, al",
    "jne     0xf4df8",
    "cmp     al, 0x9",
    "je      0xf4e76",
    "mov     rsi, r15",
    "lea     rdi, [rel data_134890]  {\"`%s': missing closing quote for \u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf5202",
    "xor     r8d, r8d  {0x0}",
    "jmp     0xf4cc8",
    "mov     rsi, r15",
    "lea     rdi, [rel data_122ad1]  {\"%s: unknown variable name\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf5202",
    "movsx   edx, byte [rbx+0x1]",
    "lea     rdi, [rbx+0x1]",
    "mov     rax, rdi",
    "mov     esi, edx",
    "test    edx, edx",
    "je      0xf5481",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     rdx, [rbx+rax-0x1]",
    "cmp     rdx, rbx",
    "jae     0xf51bc",
    "cmp     al, 0x20",
    "je      0xf4d94",
    "xor     r8d, r8d  {0x0}",
    "jmp     0xf555a",
    "xor     edi, edi  {0x0}",
    "mov     eax, 0x1",
    "jmp     0xf5548",
    "mov     rsi, qword [r13]",
    "add     r13, 0x10",
    "add     r12d, 0x1",
    "test    rsi, rsi",
    "je      0xf538e",
    "movsxd  r12, r12d",
    "lea     rax, [rel data_155520]",
    "mov     rdx, r14",
    "shl     r12, 0x4",
    "mov     eax, dword [rax+r12+0x8]",
    "mov     dword [rbp-0x5c {var_64_1}], eax",
    "lea     r13, [rel data_156f58]",
    "lea     rsi, [rel data_122981]  {\"bind-tty-special-chars\"}",
    "jmp     0xf4d69",
    "cmp     r12b, 0x20",
    "je      0xf4e20",
    "cmp     al, 0x20",
    "je      0xf5361",
    "jmp     0xf4e24",
    "movzx   eax, byte [rsi]",
    "add     rsi, 0x1",
    "add     rdi, r8",
    "test    al, al",
    "jne     0xf4e60",
    "test    r8d, r8d",
    "je      0xf4ca0",
    "mov     byte [rax], 0x0",
    "mov     rbx, rdi",
    "jmp     0xf4d9c",
    "nop     dword [rax]",
    "movzx   edi, byte [rdx]",
    "cmp     dil, 0x20",
    "je      0xf51b0",
    "jmp     0xf55e7",
    "movzx   r12d, byte [r15]",
    "movsxd  r8, r8d",
    "mov     rdi, r15",
    "mov     byte [rbx+r8], 0x0",
    "cmp     r12b, 0x27",
    "je      0xf55af",
    "cmp     sil, 0x5c",
    "jne     0xf5525",
    "movzx   eax, byte [rbx]",
    "mov     rdx, r14",
    "mov     dword [rbp-0x5c {var_64_1}], eax",
    "jmp     0xf4f22",
    "add     qword [rbp-0x48 {var_50_4}], 0x8",
    "mov     rax, qword [rbp-0x48 {var_50_4}]",
    "mov     r12, qword [rax]",
    "test    r12, r12",
    "je      0xf53d2",
    "mov     r15, qword [rbp-0x58 {var_60_1}]",
    "movsxd  rbx, eax",
    "jmp     0xf4f83",
    "add     rbx, 0x1",
    "cmp     r12b, 0x9",
    "je      0xf4e20",
    "cmp     al, 0x20",
    "je      0xf4e76",
    "cmp     esi, 0x5c",
    "je      0xf526a",
    "xor     r8d, r8d  {0x0}",
    "jmp     0xf4cb2",
    "mov     rdx, rax",
    "add     rax, 0x1",
    "cmp     byte [rax], 0x0",
    "je      0xf5481",
    "cmp     sil, 0x22",
    "je      0xf5481",
    "lea     rsi, [rdx-0x1]",
    "cmp     rsi, rbx",
    "jb      0xf51d6",
    "cmp     dil, 0x9",
    "je      0xf51b0",
    "movzx   edi, byte [rdx+0x1]",
    "mov     rsi, rdx",
    "lea     rdx, [rbx+rax]",
    "jmp     0xf51d6",
    "call    strlen",
    "test    eax, eax",
    "je      0xf55c7",
    "cmp     r12b, 0x22",
    "je      0xf55af",
    "test    dil, 0x1",
    "jne     0xf554e",
    "mov     r8d, eax",
    "xor     edi, 0x1",
    "jmp     0xf5536",
    "mov     rcx, qword [rbp-0x68 {var_70_1}]",
    "lea     rdi, [rel _rl_possible_control_prefixes]",
    "mov     qword [rbp-0x70 {var_78_1}], rbx",
    "mov     eax, 0x8",
    "mov     qword [rbp-0x78 {var_80_1}], r15",
    "lea     r12, [rel data_122aeb]  {\"Control-\"}",
    "mov     dword [rbp-0x4c {var_54_1}], ecx",
    "lea     r14d, [rdx+rcx]",
    "mov     qword [rbp-0x48 {var_50_4}], rdi  {_rl_possible_control_prefixes}",
    "mov     qword [rbp-0x58 {var_60_1}], rdx",
    "mov     rbx, qword [rbp-0x70 {var_78_1}]",
    "mov     r15, qword [rbp-0x78 {var_80_1}]",
    "mov     rdx, qword [rbp-0x58 {var_60_1}]",
    "jmp     0xf4fe3",
    "mov     rdi, r12",
    "call    strlen",
    "jmp     0xf4f50",
    "mov     rdx, rbx",
    "mov     rsi, r12",
    "mov     rdi, r15",
    "call    strncasecmp",
    "test    eax, eax",
    "jne     0xf4f70",
    "jmp     0xf4d44",
    "mov     r8d, 0x1",
    "jmp     0xf4cb2",
    "cmp     r12b, dil",
    "je      0xf4e42",
    "movsx   esi, byte [rax+0x1]",
    "add     r13d, 0x1",
    "add     rax, 0x1",
    "mov     edi, esi",
    "test    esi, esi",
    "je      0xf54a8",
    "lea     rax, [rdx+0x2]",
    "movsx   edx, byte [rdx+0x2]",
    "mov     esi, edx",
    "test    edx, edx",
    "jne     0xf5468",
    "movsx   edx, byte [rax+0x1]",
    "add     rax, 0x1",
    "mov     esi, edx",
    "test    edx, edx",
    "jne     0xf5468",
    "cmp     rdx, rbx",
    "jb      0xf4d9c",
    "mov     rdx, rsi",
    "movzx   edi, byte [rdx+0x1]",
    "mov     rsi, rdx",
    "add     rdx, 0x1",
    "lea     rax, [rel _rl_keymap]",
    "lea     rsi, [r15+0x1]",
    "mov     rdi, rbx",
    "mov     rdx, qword [rax]  {_rl_keymap}",
    "call    rl_macro_bind",
    "jmp     0xf5591",
    "cdqe    ",
    "lea     rax, [r15+rax-0x1]",
    "cmp     byte [rax], r12b",
    "jne     0xf55c7",
    "call    rl_named_function",
    "mov     rsi, rbx",
    "xor     edi, edi  {0x0}",
    "mov     rdx, rax",
    "lea     rax, [rel _rl_keymap]",
    "mov     rcx, qword [rax]  {_rl_keymap}",
    "call    rl_generic_bind",
    "cmp     sil, 0x22",
    "je      0xf5556",
    "mov     byte [rbx+rax-0x1], sil",
    "add     rax, 0x1",
    "movzx   esi, byte [rdx+rax]",
    "test    sil, sil",
    "je      0xf555a",
    "lea     rcx, [rel _rl_possible_meta_prefixes]",
    "mov     r14d, dword [rbp-0x68 {var_70_1}]",
    "mov     qword [rbp-0x70 {var_78_2}], rbx",
    "mov     eax, 0x4",
    "mov     qword [rbp-0x68 {var_70_2}], r15",
    "lea     r12, [rel data_122af4]  {\"Meta\"}",
    "mov     qword [rbp-0x48 {var_50_7}], rcx  {_rl_possible_meta_prefixes}",
    "add     r14d, edx",
    "mov     qword [rbp-0x58 {var_60_2}], rdx",
    "nop     dword [rax]",
    "mov     ecx, dword [rbp-0x4c {var_54_1}]",
    "mov     r13d, eax",
    "cmp     eax, ecx",
    "jg      0xf5248",
    "add     r15, 0x1",
    "mov     eax, r14d",
    "sub     eax, r15d",
    "cmp     eax, r13d",
    "jl      0xf5248",
    "mov     rdx, qword [rbp-0x58 {var_60_1}]",
    "mov     rbx, qword [rbp-0x70 {var_78_1}]",
    "mov     r15, qword [rbp-0x78 {var_80_1}]",
    "mov     qword [rbp-0x48 {var_50_5}], rdx",
    "call    __ctype_b_loc",
    "movzx   r12d, byte [rbp-0x5c {var_64_1}]",
    "mov     rdx, qword [rbp-0x48 {var_50_5}]",
    "mov     rax, qword [rax]",
    "test    byte [rax+r12*2+0x1], 0x2",
    "je      0xf54be",
    "add     r13d, 0x1",
    "cmp     edx, 0x5c",
    "je      0xf548c",
    "jmp     0xf5481",
    "test    dil, dil",
    "je      0xf4d9c",
    "test    rbx, rbx",
    "je      0xf4db0",
    "mov     byte [rax], 0x0",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0xf4db0",
    "lea     r8d, [rax-0x1]",
    "mov     r8d, eax",
    "xor     edi, edi  {0x0}",
    "add     qword [rbp-0x48 {var_50_7}], 0x8",
    "mov     rax, qword [rbp-0x48 {var_50_7}]",
    "mov     r12, qword [rax]",
    "test    r12, r12",
    "je      0xf539c",
    "mov     r15, qword [rbp-0x58 {var_60_2}]",
    "movsxd  rbx, eax",
    "jmp     0xf503b",
    "and     dword [rbp-0x5c {var_64_1}], 0x1f",
    "mov     dword [rbp-0x50 {var_58_1}], 0x1",
    "jmp     0xf4fe3",
    "mov     qword [rbp-0x48 {var_50_6}], rdx",
    "call    __ctype_toupper_loc",
    "mov     dword [rbp-0x50 {var_58_1}], 0x1",
    "mov     rdx, qword [rbp-0x48 {var_50_6}]",
    "mov     rax, qword [rax]",
    "mov     eax, dword [rax+r12*4]",
    "and     eax, 0x1f",
    "mov     dword [rbp-0x5c {var_64_1}], eax",
    "mov     byte [rsi+0x1], 0x0",
    "jmp     0xf4d9c",
    "mov     eax, dword [rbp-0x50 {var_58_1}]",
    "mov     rbx, qword [rbp-0x70 {var_78_2}]",
    "mov     r15, qword [rbp-0x68 {var_70_2}]",
    "mov     rdx, qword [rbp-0x58 {var_60_2}]",
    "test    eax, eax",
    "jne     0xf5058",
    "mov     rdi, r12",
    "call    strlen",
    "jmp     0xf5010",
    "mov     rdx, rbx",
    "mov     rsi, r12",
    "mov     rdi, r15",
    "call    strncasecmp",
    "test    eax, eax",
    "jne     0xf5028",
    "movzx   ebx, byte [r15]",
    "cmp     bl, 0x27",
    "je      0xf53f9",
    "cmp     rbx, rdx",
    "je      0xf5058",
    "mov     r13d, eax",
    "cmp     dword [rbp-0x4c {var_54_1}], eax",
    "jl      0xf5220",
    "add     r15, 0x1",
    "mov     eax, r14d",
    "sub     eax, r15d",
    "cmp     eax, r13d",
    "jl      0xf5220",
    "or      dword [rbp-0x5c {var_64_1}], 0x80",
    "mov     r15, qword [rbp-0x68 {var_70_2}]",
    "mov     rdi, r15",
    "call    strlen",
    "movzx   ecx, byte [rbp-0x5c {var_64_1}]",
    "mov     byte [rbp-0x39 {var_41_2}], 0x0",
    "mov     byte [rbp-0x3a {var_42}], cl",
    "test    eax, eax",
    "je      0xf541e",
    "cmp     bl, 0x22",
    "je      0xf53f9",
    "mov     rsi, rdx",
    "lea     rdi, [rel data_122b16]  {\"%s: unknown key modifier\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xf5202",
    "lea     rax, [rel _rl_keymap]",
    "lea     rsi, [r15+0x1]",
    "lea     rdi, [rbp-0x3a {var_42}]",
    "mov     rdx, qword [rax]  {_rl_keymap}",
    "call    rl_macro_bind",
    "jmp     0xf4db0",
    "cdqe    ",
    "lea     rax, [r15+rax-0x1]",
    "cmp     byte [rax], bl",
    "jne     0xf541e",
    "lea     rsi, [rel data_122b2f]  {\"prefix-meta\"}",
    "mov     rdi, r15",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xf54ce",
    "mov     byte [rax], 0x0",
    "mov     rdi, r15",
    "call    rl_named_function",
    "mov     edi, dword [rbp-0x5c {var_64_1}]",
    "mov     rsi, rax",
    "call    rl_bind_key",
    "jmp     0xf4db0",
    "movzx   eax, byte [rbp-0x5c {var_64_1}]",
    "lea     rdx, [rel emacs_meta_keymap]",
    "lea     rsi, [rbp-0x3a {var_42}]",
    "mov     edi, 0x1",
    "mov     byte [rbp-0x39 {var_41_1}], 0x0",
    "mov     byte [rbp-0x3a {var_42}], al",
    "lea     rax, [rel _rl_keymap]",
    "mov     rcx, qword [rax]  {_rl_keymap}",
    "\u26a0\ufe0fcall    rl_generic_bind",
    "jmp     0xf4db0"
  ],
  "high level IL": [
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "int64_t result",
    "if (arg1 == 0)",
    "result = 0",
    "char rax_2 = *arg1",
    "char* rdx_1 = arg1",
    "if (rax_2 == 9 || rax_2 == 0x20)",
    "while (true)",
    "rax_2 = rdx_1[1]",
    "rdx_1 = &rdx_1[1]",
    "if (rax_2 != 0x20)",
    "if (rax_2 != 9)",
    "break",
    "if (rax_2 == 0 || rax_2 == 0x23)",
    "result = 0",
    "if (rax_2 == 0x24)",
    "char rax_42 = rdx_1[1]",
    "int32_t rsi_17",
    "char* r12_8",
    "if (rax_42 == 0x20 || rax_42 == 9)",
    "char* rcx_8 = &rdx_1[2]",
    "while (true)",
    "rax_42 = *rcx_8",
    "r12_8 = rcx_8",
    "rcx_8 = &rcx_8[1]",
    "if (rax_42 != 0x20)",
    "if (rax_42 != 9)",
    "break",
    "rsi_17 = r12_8.d - (&rdx_1[2]).d + 1",
    "r12_8 = &rdx_1[1]",
    "rsi_17 = 0",
    "void* r15_7",
    "if (rax_42 == 0)",
    "r15_7 = r12_8",
    "char* rdi_19 = r12_8",
    "char* rcx_12 = &rdx_1[sx.q(rsi_17) + 2]",
    "while (true)",
    "if (rax_42 == 0x20 || rax_42 == 9)",
    "*rdi_19 = 0",
    "rsi_17 += 1",
    "break",
    "rdi_19 = rcx_12",
    "rax_42 = *rcx_12",
    "rcx_12 = &rcx_12[1]",
    "rsi_17 += 1",
    "if (rax_42 == 0)",
    "break",
    "continue",
    "int64_t rsi_18 = sx.q(rsi_17)",
    "r15_7 = &rdx_1[1 + rsi_18]",
    "char i = *r15_7",
    "if (i != 0)",
    "void* rcx_13 = &rdx_1[rsi_18 + 2]",
    "void* rdx_15 = rcx_13 - r15_7",
    "while (i == 0x20 || i == 9)",
    "i = *rcx_13",
    "rcx_13 += 1",
    "r15_7 += rdx_15",
    "if (i == 0)",
    "break",
    "int32_t r13_9 = 0",
    "char* rsi_19 = \"if\"",
    "void* rbx_8 = &data_1554c0",
    "while (true)",
    "if (strcasecmp(r12_8, rsi_19) == 0)",
    "(&data_1554c8)[sx.q(r13_9) * 2](r15_7)",
    "break",
    "rsi_19 = *(rbx_8 + 0x10)",
    "rbx_8 += 0x10",
    "r13_9 += 1",
    "if (rsi_19 == 0)",
    "sub_eb6a0(\"%s: unknown parser directive\", 0)",
    "break",
    "result = 0",
    "if (_rl_parsing_conditionalized_out != 0)",
    "result = 0",
    "int32_t var_58_1",
    "int32_t rax_3",
    "char* rdx_2",
    "int32_t rbx_1",
    "char* rbx_2",
    "int64_t rdi",
    "void* rdi_6",
    "char r12_1",
    "char* r15_1",
    "if (rax_2 == 0x22)",
    "int32_t rcx_2 = sx.d(rdx_1[1])",
    "if (rcx_2 == 0)",
    "label_f53ef:",
    "sub_eb6a0(\"%s: no closing `\"' in key bindin\u2026\", 0)",
    "label_f5202:",
    "result = 1",
    "void* rsi_3 = &rdx_1[2]",
    "int32_t rax_12 = 1",
    "int32_t rdi_3 = 0",
    "while (true)",
    "if (rdi_3 != 0)",
    "rdi_3 = 0",
    "if (rcx_2 == 0x5c)",
    "rdi_3 = 1",
    "if (rcx_2 == 0x22)",
    "break",
    "rcx_2 = sx.d(*rsi_3)",
    "rax_12 += 1",
    "rsi_3 += 1",
    "if (rcx_2 == 0)",
    "goto label_f53ef",
    "rax_3 = rax_12 + 1",
    "rdi = sx.q(rax_3)",
    "r15_1 = &rdx_1[rdi]",
    "rbx_1 = sx.d(*r15_1)",
    "if (rbx_1 != 0)",
    "goto label_f4bbd",
    "if (strcasecmp(rdx_1, \"set\") == 0)",
    "label_f4d3e:",
    "rbx_2 = r15_1",
    "r12_1 = 0",
    "label_f4d44:",
    "char** r13_3 = &data_156f58",
    "char* rsi_4 = \"bind-tty-special-chars\"",
    "while (true)",
    "if (strcasecmp(r15_1, rsi_4) == 0)",
    "char i_1 = *rbx_2",
    "char* rdx_3 = rbx_2",
    "if (i_1 != 0)",
    "while (i_1 != 0x20)",
    "if (i_1 == 9)",
    "break",
    "i_1 = rdx_3[1]",
    "rdx_3 = &rdx_3[1]",
    "if (i_1 == 0)",
    "break",
    "if (rbx_2 u< rdx_3)",
    "*rdx_3 = 0",
    "break",
    "rsi_4 = *r13_3",
    "r13_3 = &r13_3[3]",
    "if (rsi_4 == 0)",
    "char** r13_8 = &data_155638",
    "char* rsi_12 = \"active-region-end-color\"",
    "while (true)",
    "if (strcasecmp(r15_1, rsi_12) == 0)",
    "if (r12_1 == 0x22)",
    "int32_t rdx_18 = sx.d(rbx_2[1])",
    "void* rax_49 = &rbx_2[1]",
    "char rsi_25 = rdx_18.b",
    "if (rdx_18 != 0)",
    "while (true)",
    "if (rdx_18 == 0x5c)",
    "void* rdx_19 = rax_49",
    "rax_49 += 1",
    "if (*rax_49 == 0)",
    "break",
    "rax_49 = rdx_19 + 2",
    "rdx_18 = sx.d(*(rdx_19 + 2))",
    "rsi_25 = rdx_18.b",
    "if (rdx_18 == 0)",
    "break",
    "if (rsi_25 == 0x22)",
    "break",
    "rdx_18 = sx.d(*(rax_49 + 1))",
    "rax_49 += 1",
    "rsi_25 = rdx_18.b",
    "if (rdx_18 == 0)",
    "break",
    "*rax_49 = 0",
    "rbx_2 = &rbx_2[1]",
    "uint64_t rax_39 = strlen(rbx_2)",
    "void* rdx_13 = &rbx_2[rax_39 - 1]",
    "void* rsi_13",
    "char rdi_16",
    "if (rdx_13 u>= rbx_2)",
    "while (true)",
    "rdi_16 = *rdx_13",
    "if (rdi_16 != 0x20 && rdi_16 != 9)",
    "rdi_16 = *(rdx_13 + 1)",
    "rsi_13 = rdx_13",
    "rdx_13 += 1",
    "break",
    "rsi_13 = rdx_13 - 1",
    "if (rsi_13 u< rbx_2)",
    "break",
    "rdx_13 = rsi_13",
    "rdi_16 = *(rdx_13 + 1)",
    "rsi_13 = rdx_13",
    "rdx_13 = &rbx_2[rax_39]",
    "if (rdx_13 u>= rbx_2 && rdi_16 != 0)",
    "*(rsi_13 + 1) = 0",
    "break",
    "rsi_12 = *r13_8",
    "r13_8 = &r13_8[3]",
    "if (rsi_12 == 0)",
    "sub_eb6a0(\"%s: unknown variable name\", 0)",
    "goto label_f5202_2",
    "break",
    "rl_variable_bind(r15_1, rbx_2)",
    "result = 0",
    "var_58_1 = 0",
    "rdx_2 = rdx_1",
    "rdi_6 = r15_1",
    "label_f4e79:",
    "*rdi_6 = 0",
    "if (var_58_1 != 0)",
    "result = 0",
    "if (rbx_1 == 0)",
    "sub_eb6a0(\"%s: no key sequence terminator\", 0)",
    "label_f5202_1:",
    "result = 1",
    "uint64_t rax_15 = strlen(rdx_2)",
    "int32_t var_70_1 = rax_15.d",
    "if (*rdx_2 == 0x22)",
    "char* rax_51 = malloc(rax_15 + 1)",
    "if (rax_51 == 0)",
    "sub_a7f00()",
    "noreturn",
    "char i_2 = rdx_2[1]",
    "int32_t r8_5",
    "if (i_2 == 0)",
    "r8_5 = 0",
    "int32_t rdi_28 = 0",
    "int64_t rax_52 = 1",
    "if (i_2 != 0x5c && (rdi_28.b & 1) == 0)",
    "if (i_2 == 0x22)",
    "r8_5 = (rax_52 - 1).d",
    "break",
    "r8_5 = rax_52.d",
    "rdi_28 = 0",
    "r8_5 = rax_52.d",
    "rdi_28 ^= 1",
    "rax_51[rax_52 - 1] = i_2",
    "rax_52 += 1",
    "i_2 = rdx_2[rax_52]",
    "do while (i_2 != 0)",
    "char r12_11 = *r15_1",
    "char* rdi_29 = r15_1",
    "rax_51[sx.q(r8_5)] = 0",
    "if (r12_11 == 0x27 || r12_11 == 0x22)",
    "int32_t rax_54 = strlen(rdi_29)",
    "if (rax_54 != 0 && r15_1[sx.q(rax_54) - 1] == r12_11)",
    "r15_1[sx.q(rax_54) - 1] = 0",
    "rl_macro_bind(rax_51, &r15_1[1], _rl_keymap)",
    "int64_t (* rax_53)()",
    "int32_t r8_7",
    "char r10_2",
    "rax_53, r8_7, r10_2 = rl_named_function(rdi_29)",
    "rl_generic_bind(0, rax_51, rax_53, _rl_keymap, r8_7, r10_2)",
    "if (rax_51 != 0)",
    "free(rax_51)",
    "void** const r13_5 = &data_155530",
    "char* rax_16 = strrchr(rdx_2, 0x2d)",
    "void* rsi_7 = &rax_16[1]",
    "if (rax_16 == 0)",
    "rsi_7 = rdx_2",
    "int32_t r12_2 = 0",
    "void* rsi_8 = &data_121ea2",
    "uint32_t var_64_1",
    "char* rdx_8",
    "while (true)",
    "if (strcasecmp(rsi_7, rsi_8) == 0)",
    "rdx_8 = rdx_2",
    "var_64_1 = *((sx.q(r12_2) << 4) + 0x155528)",
    "break",
    "rsi_8 = *r13_5",
    "r13_5 = &r13_5[2]",
    "r12_2 += 1",
    "if (rsi_8 == 0)",
    "rdx_8 = rdx_2",
    "var_64_1 = zx.d(*rsi_7)",
    "break",
    "int32_t rax_19 = 8",
    "char const* const r12_5 = \"Control-\"",
    "char const (** const var_50_4)[0x9] = &_rl_possible_control_prefixes",
    "char* rdx_11",
    "void* rbx_5",
    "char* r15_3",
    "while (true)",
    "if (rax_19 s<= var_70_1)",
    "char* r15_2 = rdx_8",
    "while (true)",
    "if (strncasecmp(r15_2, r12_5, sx.q(rax_19)) == 0)",
    "rbx_5 = rsi_7",
    "r15_3 = r15_1",
    "uint64_t r12_6 = zx.q(var_64_1.b)",
    "rdx_11 = rdx_8",
    "if ((*(&(*__ctype_b_loc())[r12_6] + 1) & 2) == 0)",
    "var_64_1 &= 0x1f",
    "var_58_1 = 1",
    "var_58_1 = 1",
    "var_64_1 = (*__ctype_toupper_loc())[r12_6] & 0x1f",
    "break",
    "r15_2 = &r15_2[1]",
    "if (rdx_8.d + var_70_1 - r15_2.d s< rax_19)",
    "goto label_f5248",
    "break",
    "label_f5248:",
    "var_50_4 = &var_50_4[1]",
    "r12_5 = *var_50_4",
    "if (r12_5 == 0)",
    "rbx_5 = rsi_7",
    "r15_3 = r15_1",
    "rdx_11 = rdx_8",
    "break",
    "rax_19 = strlen(r12_5)",
    "int32_t rax_29 = 4",
    "char* r12_7 = \"Meta\"",
    "char** var_50_7 = &_rl_possible_meta_prefixes",
    "while (true)",
    "char* r15_5",
    "if (var_70_1 s>= rax_29)",
    "char* r15_4 = rdx_11",
    "while (true)",
    "if (strncasecmp(r15_4, r12_7, sx.q(rax_29)) == 0)",
    "var_64_1 |= 0x80",
    "r15_5 = r15_3",
    "break",
    "r15_4 = &r15_4[1]",
    "if (var_70_1 + rdx_11.d - r15_4.d s< rax_29)",
    "goto label_f5220",
    "label_f5058:",
    "char rbx_7 = *r15_5",
    "char var_42",
    "if (rbx_7 == 0x27 || rbx_7 == 0x22)",
    "int32_t rax_46 = strlen(r15_5)",
    "char var_41_2 = 0",
    "var_42 = var_64_1.b",
    "if (rax_46 != 0 && r15_5[sx.q(rax_46) - 1] == rbx_7)",
    "r15_5[sx.q(rax_46) - 1] = 0",
    "rl_macro_bind(&var_42, &r15_5[1], _rl_keymap)",
    "int32_t rax_33",
    "int32_t r8_4",
    "char r10_1",
    "rax_33, r8_4, r10_1 = strcasecmp(r15_5, \"prefix-meta\")",
    "if (rax_33 != 0)",
    "rl_bind_key(var_64_1, rl_named_function(r15_5))",
    "char var_41_1 = 0",
    "var_42 = var_64_1.b",
    "rl_generic_bind(1, &var_42, &emacs_meta_keymap, _rl_keymap, r8_4, r10_1)",
    "break",
    "label_f5220:",
    "var_50_7 = &var_50_7[1]",
    "r12_7 = *var_50_7",
    "if (r12_7 == 0)",
    "r15_5 = r15_3",
    "if (var_58_1 != 0)",
    "goto label_f5058",
    "if (rbx_5 == rdx_11)",
    "goto label_f5058",
    "sub_eb6a0(\"%s: unknown key modifier\", 0)",
    "goto label_f5202_2",
    "rax_29 = strlen(r12_7)",
    "result = 0",
    "rbx_1 = sx.d(rax_2)",
    "r15_1 = rdx_1",
    "rdi = 0",
    "rax_3 = 0",
    "label_f4bbd:",
    "int64_t rax_5 = sx.q(rax_3 + 1)",
    "char i_3",
    "int32_t r13_1",
    "while (true)",
    "int32_t rsi_1 = (rax_5 - 1).d",
    "if (rbx_1 == 0x3a || rbx_1 == 0x20)",
    "if (rsi_1 != 0)",
    "if (rbx_1 != 0x3a)",
    "rbx_1 = 0x20",
    "if (rdx_1[rdi + 1] == 0x3d)",
    "r13_1 = (rax_5 + 1).d",
    "*r15_1 = 0",
    "rdx_1[sx.q(rax_5.d)] = 0",
    "r15_1 = &rdx_1[sx.q(r13_1)]",
    "var_58_1 = 1",
    "i_3 = *r15_1",
    "break",
    "goto label_f4c04",
    "if (rbx_1 != 9)",
    "rbx_1 = sx.d(rdx_1[rax_5])",
    "r15_1 = &rdx_1[rax_5]",
    "rdi = rax_5",
    "if (rbx_1 != 0)",
    "rax_5 += 1",
    "continue",
    "r13_1 = rax_5.d",
    "r15_1 = &rdx_1[sx.q(rax_5.d)]",
    "i_3 = *r15_1",
    "var_58_1 = 0",
    "break",
    "if (rsi_1 != 0)",
    "label_f4c04:",
    "r13_1 = rax_5.d",
    "*r15_1 = 0",
    "r15_1 = &rdx_1[sx.q(rax_5.d)]",
    "i_3 = *r15_1",
    "var_58_1 = 0",
    "break",
    "sub_eb6a0(\"`%s': invalid key binding: missi\u2026\", 0)",
    "goto label_f5202_2",
    "if (strcasecmp(rdx_1, \"set\") == 0)",
    "while (true)",
    "if (i_3 == 0)",
    "goto label_f4d3e",
    "if (i_3 != 0x20 && i_3 != 9)",
    "break",
    "i_3 = r15_1[1]",
    "r15_1 = &r15_1[1]",
    "char rax_14 = *r15_1",
    "if (rax_14 == 0)",
    "goto label_f4d3e",
    "rbx_2 = r15_1",
    "while (true)",
    "if (rax_14 == 0x20 || rax_14 == 9)",
    "*rbx_2 = 0",
    "rbx_2 = &rbx_2[1]",
    "break",
    "rax_14 = rbx_2[1]",
    "rbx_2 = &rbx_2[1]",
    "if (rax_14 == 0)",
    "break",
    "continue",
    "while (true)",
    "r12_1 = *rbx_2",
    "if (r12_1 == 0)",
    "break",
    "if (r12_1 != 0x20 && r12_1 != 9)",
    "break",
    "rbx_2 = &rbx_2[1]",
    "goto label_f4d44",
    "rdx_2 = rdx_1",
    "if (i_3 == 0)",
    "rdi_6 = r15_1",
    "goto label_f4e79",
    "void* rax_9 = &rdx_2[sx.q(r13_1) + 1]",
    "while (i_3 == 0x20 || i_3 == 9)",
    "r15_1 = rax_9",
    "i_3 = *rax_9",
    "rax_9 += 1",
    "r13_1 += 1",
    "if (i_3 == 0)",
    "goto label_f4e46",
    "if (i_3 != 0x27 && i_3 != 0x22)",
    "label_f4e46:",
    "int64_t r13_4 = sx.q(r13_1)",
    "rdi_6 = &rdx_2[r13_4]",
    "char i_4 = *rdi_6",
    "if (i_4 != 0)",
    "void* rsi_6 = &rdx_2[r13_4 + 1]",
    "void* r8_3 = rsi_6 - rdi_6",
    "while (i_4 != 0x20)",
    "if (i_4 == 9)",
    "break",
    "i_4 = *rsi_6",
    "rsi_6 += 1",
    "rdi_6 += r8_3",
    "if (i_4 == 0)",
    "break",
    "goto label_f4e79",
    "int32_t r13_2 = r13_1 + 1",
    "void* rax_11 = &rdx_2[sx.q(r13_2)]",
    "int32_t rsi_2 = sx.d(*rax_11)",
    "char rdi_2 = rsi_2.b",
    "if (rsi_2 != 0)",
    "int32_t r8_1 = 0",
    "while (true)",
    "if (r8_1 != 0)",
    "r8_1 = 0",
    "if (rsi_2 == 0x5c)",
    "r8_1 = 1",
    "if (i_3 == rdi_2)",
    "r13_1 = r13_2 + 1",
    "break",
    "rsi_2 = sx.d(*(rax_11 + 1))",
    "r13_2 += 1",
    "rax_11 += 1",
    "rdi_2 = rsi_2.b",
    "if (rsi_2 == 0)",
    "goto label_f54b4",
    "goto label_f4e46",
    "label_f54b4:",
    "sub_eb6a0(\"`%s': missing closing quote for \u2026\", 0)",
    "label_f5202_2:",
    "result = 1",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return result",
    "__stack_chk_fail()",
    "noreturn"
  ]
}