{
  "address": "0xb0940",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x10",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xb097b",
    "lea     r12, [rel loop_level]",
    "mov     ecx, dword [r12]",
    "test    ecx, ecx",
    "je      0xb09e0",
    "mov     rax, qword [rdi+0x8]",
    "test    rax, rax",
    "je      0xb097b",
    "lea     rax, [rel posixly_correct]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xb09be",
    "lea     rdx, [rbp-0x20]",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "call    get_numeric_arg",
    "mov     rdx, qword [rbp-0x20]",
    "test    rdx, rdx",
    "jle     0xb0a48",
    "mov     rdi, qword [rax]",
    "cmp     byte [rdi], 0x2d",
    "je      0xb0a20",
    "xor     eax, eax",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133d18]  {\"only meaningful in a `for', `whi\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     eax, dword [r12]",
    "test    eax, eax",
    "je      0xb09be",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_12126e]  {\"loop count\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rax",
    "mov     rax, qword [rbx+0x8]",
    "mov     rdi, qword [rax]",
    "call    sh_erange",
    "lea     rax, [rel breaking]",
    "mov     edx, dword [r12]",
    "mov     dword [rax], edx",
    "mov     eax, 0x1",
    "jmp     0xb09c0",
    "movsxd  rcx, dword [r12]",
    "cmp     rdx, rcx",
    "mov     rax, rcx",
    "cmovle  eax, edx",
    "lea     rdx, [rel breaking]",
    "mov     dword [rdx], eax",
    "lea     rsi, [rel 0x1210f5]  {\"--help\"}",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xb097b",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x10",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "jmp     0xb098a",
    "mov     rdx, qword [rbp-0x18]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xb0a81",
    "call    builtin_help",
    "mov     eax, 0x102",
    "jmp     0xb09c0"
  ]
}