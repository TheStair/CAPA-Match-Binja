{
  "address": "0x72e30",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data using aphash/ef28217586414e46ab1e9ea5fafa8c30",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/37fcdffa79f84274a0a7280c1c8f403a",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/2595307ea71d425c8c0b4e2392af2cf7",
    "contain loop",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/ba22e5cbb4214cdaa9e658605c2a045c",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/03953aa079f14ec384dfb3745989fa21"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "test    rdi, rdi",
    "je      0x73000",
    "xor     r12d, r12d",
    "jmp     0x72f45",
    "mov     r13, rdi",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "lea     rsi, [r13+rax]",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x50], rsi",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x73038",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x73033",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     esi, 0x1",
    "mov     rdi, r13",
    "call    strchr",
    "test    rax, rax",
    "je      0x73008",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     rax, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x73033",
    "lea     rax, [rel ifs_value]",
    "mov     dword [rbp-0x44], 0x0",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x72ec6",
    "add     rsp, 0x28",
    "mov     rdx, rbx",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     __strcpy_chk",
    "movzx   eax, byte [r13]",
    "mov     r14, r12",
    "test    al, al",
    "je      0x72f41",
    "cmp     byte [rax], 0x0",
    "sete    al",
    "movzx   eax, al",
    "mov     dword [rbp-0x44], eax",
    "mov     byte [r14], 0x0",
    "lea     rbx, [rel locale_mb_cur_max]",
    "jmp     0x72ef4",
    "cmp     al, 0x1",
    "je      0x72f70",
    "movzx   ecx, byte [r13+0x1]",
    "cmp     cl, 0x1",
    "je      0x72f98",
    "movzx   ecx, byte [r13]",
    "add     r13, 0x1",
    "jmp     0x72efd",
    "cmp     cl, 0x7f",
    "je      0x72f98",
    "movzx   eax, byte [r13+0x1]",
    "mov     byte [r14], cl",
    "add     r13, 0x1",
    "add     r14, 0x1",
    "test    al, al",
    "je      0x72f41",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x72fa8",
    "cmp     dword [rbx], 0x1",
    "jle     0x72ee0",
    "cmp     cl, 0x20",
    "jne     0x72ef8",
    "lea     rax, [rel locale_utf8locale]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x72fd8",
    "mov     r15d, 0x1",
    "mov     edx, dword [rbp-0x44]",
    "test    edx, edx",
    "je      0x72ef8",
    "mov     rdx, qword [rbp-0x50]",
    "xor     edi, edi",
    "lea     rcx, [rbp-0x40]",
    "mov     rsi, r13",
    "mov     r15, qword [rbp-0x40]",
    "sub     rdx, r13",
    "call    mbrtowc",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0x72fbf",
    "test    cl, cl",
    "js      0x72fd8",
    "nop     dword [rax+rax]",
    "test    rax, rax",
    "mov     edx, 0x1",
    "cmovne  rdx, rax",
    "mov     r15, rdx",
    "jmp     0x72f24",
    "mov     qword [rbp-0x40], r15",
    "jmp     0x72f1e",
    "setne   al",
    "movzx   eax, al",
    "mov     rsi, r13",
    "mov     rdi, r14",
    "mov     rdx, r15",
    "add     r13, r15",
    "call    memcpy",
    "movzx   eax, byte [r13]",
    "add     r14, r15",
    "test    al, al",
    "jne     0x72ef4"
  ]
}