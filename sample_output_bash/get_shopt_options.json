{
  "address": "0xcc940",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     edi, 0x1d8",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x8",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xcca12",
    "mov     esi, 0x1d8",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     r14, [rel data_156098]",
    "mov     r13d, 0x1",
    "mov     eax, 0x6",
    "lea     r12, [rel data_11f1dc]  {\"autocd\"}",
    "jmp     0xcc99b",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0xcc9ed",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "call    dcgettext",
    "mov     rdx, rbx",
    "lea     rsi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    fatal_error",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r12",
    "lea     rbx, [r13+0x1]",
    "add     r14, 0x18",
    "call    __strcpy_chk",
    "mov     r12, qword [r14-0x18]",
    "mov     qword [r15+r13*8-0x8], rax",
    "test    r12, r12",
    "jne     0xcc990",
    "mov     rdi, r12",
    "mov     r13, rbx",
    "call    strlen",
    "movsxd  r13, r13d",
    "mov     rax, r15",
    "mov     qword [r15+r13*8], 0x0",
    "add     rsp, 0x8",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}"
  ],
  "high level IL": [
    "int64_t result = malloc(0x1d8)",
    "if (result == 0)",
    "sub_a7f00()",
    "noreturn",
    "char const (** const r14)[0x12] = &data_156098",
    "int64_t r13 = 1",
    "uint64_t rax = 6",
    "void* const r12 = \"autocd\"",
    "while (true)",
    "char* domainname = malloc(rax + 1)",
    "if (domainname == 0)",
    "fatal_error(dcgettext(domainname, \"%s: cannot allocate %lu bytes\", 5), 0)",
    "noreturn",
    "r14 = &r14[3]",
    "char* rax_1 = __strcpy_chk(domainname, r12, rax + 1)",
    "r12 = r14[-3]",
    "*(result + (r13 << 3) - 8) = rax_1",
    "if (r12 == 0)",
    "break",
    "r13 += 1",
    "rax = strlen(r12)",
    "*(result + (sx.q(r13.d) << 3)) = 0",
    "return result"
  ]
}