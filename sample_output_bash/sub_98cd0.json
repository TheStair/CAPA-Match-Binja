{
  "address": "0x98cd0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "allocate or change RW memory/b4e5a298cb404535abd304755b86823e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "mov     edi, 0x80",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x38",
    "mov     dword [rbp-0x5c], esi",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x99232",
    "mov     esi, 0x80",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, dword [r14+0x8]",
    "mov     byte [r15], 0x0",
    "test    edx, edx",
    "jle     0x99212",
    "mov     rbx, r15",
    "jmp     0x990b2",
    "mov     qword [rbp-0x38], 0x80",
    "xor     r13d, r13d",
    "xor     esi, esi",
    "mov     r8, r14",
    "mov     rbx, r13",
    "mov     r12d, 0x80",
    "mov     r13d, esi",
    "nop     dword [rax]",
    "mov     eax, dword [rbp-0x5c]",
    "mov     byte [rbx], 0x0",
    "test    eax, eax",
    "jne     0x991e7",
    "add     rbx, 0x1",
    "cmp     dword [r8+0x8], ebx",
    "jg      0x98d30",
    "mov     qword [rbp-0x50], rbx",
    "mov     qword [rbp-0x58], r8",
    "jmp     0x98f34",
    "mov     rdi, r15",
    "call    sh_single_quote",
    "mov     rdi, r15",
    "mov     rbx, rax",
    "call    free",
    "mov     r15, rbx",
    "jmp     0x990c0",
    "add     rsp, 0x38",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [r8]",
    "mov     r14, qword [rax+rbx*8]",
    "test    r14, r14",
    "je      0x99065",
    "movsxd  rbx, r13d",
    "mov     rsi, rbx",
    "add     esi, 0x1",
    "cmp     r12d, esi",
    "jg      0x990af",
    "mov     rdi, qword [r14+0x8]",
    "call    ansic_shouldquote",
    "mov     rbx, qword [r14+0x8]",
    "test    eax, eax",
    "jne     0x98d50",
    "add     rbx, r15",
    "sub     esi, r12d",
    "and     esi, 0xfffffff8",
    "lea     r12d, [r12+rsi+0x8]",
    "movsxd  r12, r12d",
    "test    r15, r15",
    "je      0x99202",
    "test    rbx, rbx",
    "je      0x99190",
    "mov     rdi, rbx",
    "call    sh_contains_shell_metas",
    "test    eax, eax",
    "jne     0x99100",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r15, rax",
    "jmp     0x990a6",
    "mov     rdi, r15",
    "mov     rsi, r12",
    "call    realloc",
    "mov     r15, rax",
    "mov     rdi, qword [r14+0x10]",
    "test    rdi, rdi",
    "jne     0x98d7c",
    "cmp     byte [rbx], 0x0",
    "je      0x99110",
    "mov     rdi, rbx",
    "call    sh_double_quote",
    "mov     rbx, rax",
    "jmp     0x98d6f",
    "movzx   edx, byte [rbx]",
    "cmp     dl, 0x40",
    "je      0x99130",
    "test    r15, r15",
    "je      0x99256",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "call    ansic_shouldquote",
    "test    eax, eax",
    "je      0x990d8",
    "mov     eax, 0x5",
    "xor     ecx, ecx",
    "xor     ebx, ebx",
    "jmp     0x98e18",
    "mov     rdi, qword [r14+0x10]",
    "xor     ebx, ebx",
    "test    rdi, rdi",
    "jne     0x98d7c",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "call    sub_d80c0",
    "mov     rbx, rax",
    "mov     rdi, qword [r14+0x10]",
    "test    rdi, rdi",
    "je      0x990f0",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x99100",
    "cmp     dl, 0x2a",
    "je      0x99130",
    "mov     rdi, qword [r14+0x10]",
    "call    sh_double_quote",
    "mov     rcx, rax",
    "jmp     0x98dac",
    "mov     rcx, qword [r14+0x10]",
    "test    rcx, rcx",
    "je      0x991bc",
    "add     eax, r13d",
    "cmp     eax, r12d",
    "jge     0x98fc0",
    "mov     eax, 0x5",
    "xor     ecx, ecx",
    "xor     ebx, ebx",
    "jmp     0x98e18",
    "test    rbx, rbx",
    "je      0x9911f",
    "mov     rdi, qword [r14+0x10]",
    "test    rdi, rdi",
    "jne     0x98d7c",
    "mov     rdi, qword [r14+0x10]",
    "test    rdi, rdi",
    "jne     0x98d7c",
    "mov     edx, 0x4",
    "test    rbx, rbx",
    "je      0x98dd8",
    "test    rbx, rbx",
    "je      0x9911f",
    "cmp     byte [rcx], 0x0",
    "je      0x99168",
    "add     r12d, r12d",
    "cmp     eax, r12d",
    "jge     0x98fc0",
    "mov     rax, qword [rbp-0x38]",
    "movsxd  rdi, r13d",
    "mov     rsi, rbx",
    "mov     qword [rbp-0x40], rcx",
    "cmp     rdi, rax",
    "mov     rdx, rax",
    "cmovae  rdx, rdi",
    "sub     rdx, rdi",
    "add     rdi, r15",
    "call    __strcpy_chk",
    "xor     eax, eax",
    "cmp     byte [rbx], 0x0",
    "mov     rcx, qword [rbp-0x40]",
    "je      0x98e78",
    "movzx   edx, byte [rbx]",
    "jmp     0x98f7b",
    "jmp     0x98f99",
    "mov     eax, 0x5",
    "xor     ecx, ecx",
    "test    dl, dl",
    "je      0x98e18",
    "test    rcx, rcx",
    "je      0x98fae",
    "cmp     byte [rbx], 0x0",
    "je      0x98dd8",
    "cmp     byte [rbx], 0x0",
    "mov     eax, 0x5",
    "je      0x98e18",
    "test    rbx, rbx",
    "je      0x9911f",
    "mov     rdi, rcx",
    "xor     esi, esi",
    "call    sub_d80c0",
    "mov     rcx, rax",
    "movsxd  rsi, r12d",
    "mov     qword [rbp-0x40], rcx",
    "mov     qword [rbp-0x38], rsi",
    "test    r15, r15",
    "je      0x99150",
    "add     r13d, eax",
    "mov     rsi, qword [rbp-0x38]",
    "lea     r9d, [r13+0x1]",
    "movsxd  rax, r13d",
    "mov     byte [r15+rax], 0x20",
    "movsxd  rax, r9d",
    "mov     rdx, rsi",
    "cmp     rsi, rax",
    "mov     dword [rbp-0x40], r9d",
    "lea     rdi, [r15+rax]",
    "cmovb   rdx, rax",
    "sub     rdx, rax",
    "test    rcx, rcx",
    "je      0x99020",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x98e78",
    "cmp     byte [rbx+0x2], 0x0",
    "je      0x9924a",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     eax, 0x6",
    "je      0x98e18",
    "lea     eax, [rdx+0x1]",
    "xor     ecx, ecx",
    "jmp     0x98e18",
    "cmp     byte [rcx], 0x0",
    "lea     eax, [rdx+0x1]",
    "je      0x98e18",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     edx, 0x5",
    "je      0x98dd8",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     eax, 0x6",
    "je      0x98e18",
    "cmp     byte [rbx], 0x0",
    "je      0x991b0",
    "mov     rdi, qword [rbp-0x38]",
    "call    malloc",
    "mov     rcx, qword [rbp-0x40]",
    "mov     r15, rax",
    "jmp     0x98feb",
    "mov     rdi, r15",
    "call    realloc",
    "mov     rcx, qword [rbp-0x40]",
    "mov     r15, rax",
    "mov     rcx, rdx",
    "lea     rsi, [rel data_120b7f]",
    "mov     edx, 0x3",
    "call    __memcpy_chk",
    "lea     eax, [r13+0x3]",
    "cdqe    ",
    "mov     byte [r15+rax], 0x20",
    "cmp     rbx, qword [r14+0x8]",
    "je      0x9904d",
    "mov     rsi, rcx",
    "mov     qword [rbp-0x48], rcx",
    "call    __strcpy_chk",
    "mov     rcx, qword [rbp-0x48]",
    "xor     eax, eax",
    "mov     r9d, dword [rbp-0x40]",
    "cmp     byte [rcx], 0x0",
    "je      0x98ef8",
    "cmp     byte [rbx+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x98e78",
    "mov     eax, 0x7",
    "xor     ecx, ecx",
    "jmp     0x98e18",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     edx, [rax+0x4]",
    "cmp     byte [rcx+0x1], 0x0",
    "lea     eax, [rdx+0x2]",
    "je      0x98e18",
    "cmp     byte [rbx+0x2], 0x0",
    "jne     0x9921a",
    "jmp     0x98f99",
    "mov     eax, 0x5",
    "xor     ecx, ecx",
    "jmp     0x98e18",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x98f99",
    "test    r15, r15",
    "jne     0x98e24",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x38]",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     r14, qword [r14]",
    "add     r13d, 0x4",
    "test    r14, r14",
    "jne     0x98f34",
    "mov     rdi, rbx",
    "call    free",
    "add     r9d, eax",
    "lea     r13d, [r9+0x1]",
    "movsxd  r9, r9d",
    "mov     byte [r15+r9], 0x20",
    "cmp     rbx, qword [r14+0x8]",
    "je      0x98f20",
    "cmp     byte [rcx+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x98ef8",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     rcx, qword [rbp-0x40]",
    "nop     dword [rax]",
    "cmp     byte [rcx+0x2], 0x0",
    "lea     eax, [rdx+0x3]",
    "je      0x98e18",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x40], rcx",
    "call    strlen",
    "mov     rcx, qword [rbp-0x40]",
    "lea     edx, [rax+0x4]",
    "jmp     0x98dd8",
    "mov     edx, 0x6",
    "nop     dword [rax]",
    "mov     eax, 0x6",
    "xor     ecx, ecx",
    "jmp     0x98e18",
    "mov     rbx, qword [rbp-0x50]",
    "mov     r8, qword [rbp-0x58]",
    "mov     rdi, rcx",
    "call    free",
    "mov     r14, qword [r14]",
    "test    r14, r14",
    "je      0x9905d",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x40], rcx",
    "call    free",
    "mov     rcx, qword [rbp-0x40]",
    "nop     dword [rax]",
    "cmp     byte [rcx+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x98ef8",
    "mov     rdi, rcx",
    "mov     dword [rbp-0x48], edx",
    "mov     qword [rbp-0x40], rcx",
    "call    strlen",
    "mov     edx, dword [rbp-0x48]",
    "mov     rcx, qword [rbp-0x40]",
    "lea     eax, [rdx+rax+0x1]",
    "nop     dword [rax]",
    "mov     rdi, rcx",
    "mov     dword [rbp-0x48], r9d",
    "mov     qword [rbp-0x40], rcx",
    "call    strlen",
    "mov     r9d, dword [rbp-0x48]",
    "mov     rcx, qword [rbp-0x40]",
    "nop     dword [rax]"
  ]
}