{
  "address": "0x3b4d0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "call    sub_3ac10",
    "mov     rbx, rax",
    "mov     eax, dword [rel data_1608dc]",
    "cmp     eax, 0x120",
    "je      0x3b510",
    "call    sub_3b420",
    "mov     edi, 0x28",
    "mov     r13, rax",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x3b5cd",
    "cmp     eax, 0x121",
    "je      0x3b570",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel line_number]",
    "mov     qword [r12+0x18], rbx",
    "mov     rbx, r12",
    "mov     dword [r12], 0x0",
    "mov     eax, dword [rax]",
    "mov     qword [r12+0x20], r13",
    "mov     dword [r12+0x8], 0x1",
    "mov     dword [r12+0x4], eax",
    "mov     eax, dword [rel data_1608dc]",
    "mov     qword [r12+0x10], 0x0",
    "cmp     eax, 0x121",
    "jne     0x3b4fd",
    "call    sub_3b4d0",
    "mov     edi, 0x28",
    "mov     r13, rax",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x3b5e5",
    "add     rsp, 0x8",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel line_number]",
    "mov     qword [r12+0x18], rbx",
    "mov     rbx, r12",
    "mov     dword [r12], 0x0",
    "mov     eax, dword [rax]",
    "mov     qword [r12+0x20], r13",
    "mov     dword [r12+0x8], 0x2",
    "mov     dword [r12+0x4], eax",
    "mov     rax, rbx",
    "mov     qword [r12+0x10], 0x0",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    "
  ]
}