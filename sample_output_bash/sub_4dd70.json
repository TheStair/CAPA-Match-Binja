{
  "address": "0x4dd70",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "contain loop",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rdi",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "lea     rax, [rel loop_level]",
    "mov     rdi, qword [rdi+0x8]",
    "add     dword [rax], 0x1",
    "or      dword [rdi+0x4], 0x8",
    "test    byte [r14], 0x8",
    "je      0x4dda4",
    "mov     eax, esi",
    "lea     r15, [rel job_control]",
    "xor     r12d, r12d",
    "xor     eax, 0x1",
    "and     eax, 0x1",
    "mov     byte [rbp-0x31], al",
    "mov     eax, esi",
    "and     eax, 0x1",
    "mov     byte [rbp-0x32], al",
    "jmp     0x4de51",
    "mov     rax, qword [r14+0x10]",
    "or      dword [rax+0x4], 0x8",
    "call    execute_command",
    "mov     r8d, dword [r15]",
    "mov     ebx, eax",
    "test    r8d, r8d",
    "je      0x4de6d",
    "xor     edi, edi",
    "call    sub_67080",
    "lea     rax, [rel js]",
    "mov     esi, dword [rax+0x1c]",
    "test    esi, esi",
    "je      0x4de91",
    "lea     rax, [rel interactive_shell]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "jne     0x4de91",
    "test    ebx, ebx",
    "jne     0x4ddd0",
    "mov     ecx, dword [rel data_160908]",
    "test    ecx, ecx",
    "jne     0x4de91",
    "cmp     byte [rbp-0x31], 0x0",
    "jne     0x4dea3",
    "cmp     byte [rbp-0x32], 0x0",
    "je      0x4dde2",
    "call    sub_6aab0",
    "lea     rdx, [rel breaking]",
    "mov     eax, dword [rdx]",
    "test    eax, eax",
    "je      0x4deb5",
    "test    ebx, ebx",
    "je      0x4de99",
    "lea     rbx, [rel terminating_signal]",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "jne     0x4dee8",
    "lea     rdx, [rel continuing]",
    "mov     eax, dword [rdx]",
    "test    eax, eax",
    "je      0x4dec7",
    "sub     eax, 0x1",
    "mov     dword [rdx], eax",
    "mov     edx, dword [rel data_161100]",
    "mov     edi, dword [rbx]",
    "test    edx, edx",
    "jne     0x4ddf3",
    "lea     r13, [rel interrupt_state]",
    "mov     eax, dword [r13]",
    "test    eax, eax",
    "jne     0x4df28",
    "lea     rax, [rel loop_level]",
    "sub     dword [rax], 0x1",
    "add     rsp, 0x18",
    "mov     eax, r12d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "sub     eax, 0x1",
    "mov     dword [rdx], eax",
    "call    sub_8e2b0",
    "{ Does not return }",
    "call    throw_to_top_level",
    "jmp     0x4de06",
    "mov     rdi, qword [r14+0x10]",
    "call    execute_command",
    "mov     r12d, eax",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "jne     0x4df00",
    "mov     eax, dword [rel data_161100]",
    "mov     edi, dword [rbx]",
    "test    eax, eax",
    "je      0x4def8",
    "mov     eax, dword [r13]",
    "test    eax, eax",
    "jne     0x4df18",
    "mov     eax, dword [r13]",
    "test    eax, eax",
    "je      0x4de28",
    "call    throw_to_top_level",
    "jmp     0x4de28",
    "lea     rdx, [rel breaking]",
    "mov     eax, dword [rdx]",
    "test    eax, eax",
    "jne     0x4dec2",
    "lea     rdx, [rel continuing]",
    "mov     eax, dword [rdx]",
    "test    eax, eax",
    "je      0x4de4d",
    "mov     rdi, qword [r14+0x8]",
    "sub     eax, 0x1",
    "mov     dword [rdx], eax",
    "jne     0x4dec7"
  ]
}