{
  "address": "0x111120",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "xor     eax, eax  {0x0}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "lea     r15, [rel data_121bc8]",
    "push    r14 {__saved_r14}",
    "mov     r14, rdi",
    "mov     edi, 0x2",
    "push    r13 {__saved_r13}",
    "lea     r13, [rel data_122f19]",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     rbx, rsi",
    "lea     rsi, [rel data_122f10]  {\"compopt \"}",
    "sub     rsp, 0x8",
    "call    __printf_chk",
    "mov     r12, qword [rbx+0x10]",
    "lea     rdx, [rel data_121bb2]  {\"bashdefault\"}",
    "lea     rbx, [rel data_1551c0]",
    "jmp     0x11118b",
    "mov     rax, r12",
    "and     rax, qword [rbx+0x8]",
    "je      0x111170",
    "mov     rsi, r13  {data_122f19, \"+o %s \"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "add     rbx, 0x10",
    "call    __printf_chk",
    "mov     rdx, qword [rbx]",
    "test    rdx, rdx",
    "je      0x1111af",
    "mov     rsi, r15  {data_121bc8, \"-o %s \"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "add     rbx, 0x10",
    "call    __printf_chk",
    "mov     rdx, qword [rbx]",
    "test    rdx, rdx",
    "jne     0x11118b",
    "mov     rdi, r14",
    "call    sub_d0ba0",
    "add     rsp, 0x8",
    "mov     edi, 0xa",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     putchar"
  ],
  "high level IL": [
    "__printf_chk(2, \"compopt \")",
    "int64_t r12 = *(arg2 + 0x10)",
    "void* const rdx = \"bashdefault\"",
    "char const (** const rbx_1)[0xc] = &data_1551c0",
    "while (true)",
    "if ((r12 & rbx_1[1]) == 0)",
    "rbx_1 = &rbx_1[2]",
    "__printf_chk(2, \"+o %s \", rdx)",
    "rdx = *rbx_1",
    "if (rdx == 0)",
    "break",
    "rbx_1 = &rbx_1[2]",
    "__printf_chk(2, \"-o %s \", rdx)",
    "rdx = *rbx_1",
    "if (rdx == 0)",
    "break",
    "sub_d0ba0(arg1)",
    "return putchar(0xa) __tailcall"
  ]
}