{
  "address": "0x8d460",
  "rules": [
    "hash data using aphash/1c6766435cde44639c26b9e1f0d91a11",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using HC-128/26adaa3641374fccbeddc33b759c970e",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "allocate or change RW memory/b4e5a298cb404535abd304755b86823e",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/9f5ed5341ae94a0d943f2c8a6a459760",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "pxor    xmm0, xmm0",
    "xor     eax, eax",
    "mov     rbp, rsp",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     rsi, [rel trap_list]",
    "lea     rdi, [rel pending_traps]",
    "mov     dword [rel data_1612ac], 0x0",
    "lea     rbx, [rel original_signals]",
    "mov     qword [rel data_1612a4], 0x0",
    "movups  xmmword [rsi+0x208], xmm0",
    "lea     rdx, [rdi+0x4]",
    "movq    xmm0, qword [rel data_157f80]",
    "add     rdi, 0xc",
    "mov     qword [rsi+0x218], 0x0",
    "movq    qword [rbx], xmm0",
    "punpcklqdq xmm0, xmm0",
    "mov     qword [rsi], 0x0",
    "mov     dword [rel data_1611a0], 0x0",
    "mov     qword [rdi-0x8], 0x0",
    "mov     qword [rdi+0xf0], 0x0",
    "and     rdi, 0xfffffffffffffff8",
    "sub     rdx, rdi",
    "add     edx, 0x100",
    "shr     edx, 0x3",
    "mov     ecx, edx",
    "lea     rdx, [rbx+0x208]",
    "rep stosq qword [rdi]",
    "lea     rdi, [rsi+0x8]",
    "mov     ecx, 0x40",
    "rep stosq qword [rdi]",
    "lea     rdi, [rel data_1611ac]",
    "lea     rcx, [rel data_1611a4]",
    "mov     qword [rel data_1611a4], 0x0",
    "mov     qword [rel data_16129c], 0x0",
    "and     rdi, 0xfffffffffffffff8",
    "sub     rcx, rdi",
    "add     ecx, 0x100",
    "shr     ecx, 0x3",
    "rep stosq qword [rdi]",
    "lea     rax, [rbx+0x8]",
    "nop     ",
    "movups  xmmword [rax], xmm0",
    "add     rax, 0x20",
    "movups  xmmword [rax-0x10], xmm0",
    "cmp     rax, rdx",
    "jne     0x8d550",
    "xor     esi, esi",
    "mov     edi, 0x11",
    "call    set_signal_handler",
    "mov     edi, 0x11",
    "mov     rsi, rax",
    "mov     qword [rbx+0x88], rax",
    "call    set_signal_handler",
    "cmp     qword [rbx+0x88], 0x1",
    "mov     eax, dword [rel data_1611e4]",
    "je      0x8d668",
    "or      eax, 0x2",
    "jmp     0x8d594",
    "or      eax, 0xc",
    "xor     esi, esi",
    "mov     edi, 0x2",
    "mov     dword [rel data_1611e4], eax",
    "call    set_signal_handler",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "mov     qword [rbx+0x10], rax",
    "call    set_signal_handler",
    "cmp     qword [rbx+0x10], 0x1",
    "mov     eax, dword [rel data_1611a4+4]",
    "je      0x8d660",
    "or      eax, 0x2",
    "jmp     0x8d5cb",
    "or      eax, 0x4",
    "xor     esi, esi",
    "mov     edi, 0x3",
    "mov     dword [rel data_1611a4+4], eax",
    "call    set_signal_handler",
    "mov     edi, 0x3",
    "mov     rsi, rax",
    "mov     qword [rbx+0x18], rax",
    "call    set_signal_handler",
    "cmp     qword [rbx+0x18], 0x1",
    "mov     eax, dword [rel data_1611ac]",
    "je      0x8d65b",
    "or      eax, 0x2",
    "jmp     0x8d5fe",
    "or      eax, 0x4",
    "mov     dword [rel data_1611ac], eax",
    "lea     rax, [rel interactive]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x8d61e",
    "xor     esi, esi",
    "mov     edi, 0xf",
    "call    set_signal_handler",
    "mov     edi, 0xf",
    "mov     rsi, rax",
    "mov     qword [rbx+0x78], rax",
    "call    set_signal_handler",
    "cmp     qword [rbx+0x78], 0x1",
    "mov     eax, dword [rel data_1611dc]",
    "je      0x8d670",
    "mov     rbx, qword [rbp-0x8]",
    "leave   ",
    "jmp     get_original_tty_job_signals",
    "or      eax, 0x2",
    "jmp     0x8d648",
    "or      eax, 0x4",
    "mov     rbx, qword [rbp-0x8]",
    "mov     dword [rel data_1611dc], eax",
    "leave   ",
    "jmp     get_original_tty_job_signals"
  ]
}