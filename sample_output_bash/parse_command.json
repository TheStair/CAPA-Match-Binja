{
  "address": "0x3fbb0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x10",
    "lea     r12, [rel need_here_doc]",
    "mov     dword [r12], 0x0",
    "call    run_pending_traps",
    "lea     rax, [rel interactive]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0x3fbee",
    "lea     rax, [rel current_command_line_count]",
    "mov     dword [rax], 0x0",
    "call    yyparse",
    "mov     edx, dword [r12]",
    "test    edx, edx",
    "jne     0x3fca8",
    "lea     rax, [rel bash_input]",
    "mov     eax, dword [rax]",
    "cmp     eax, 0x3",
    "jne     0x3fc18",
    "mov     dword [rbp-0x14], eax",
    "call    gather_here_documents",
    "mov     eax, dword [rbp-0x14]",
    "add     rsp, 0x10",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x10",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel pushed_string_list]",
    "mov     rdx, qword [rdx]",
    "test    rdx, rdx",
    "je      0x3fc2e",
    "lea     rdx, [rel no_line_editing]",
    "mov     ecx, dword [rdx]",
    "test    ecx, ecx",
    "jne     0x3fce8",
    "cmp     qword [rdx+0x18], 0x0",
    "jne     0x3fbee",
    "lea     rbx, [rel data_11f1af]  {\"PROMPT_COMMAND\"}",
    "mov     rdi, rbx",
    "call    find_variable",
    "test    rax, rax",
    "je      0x3fc44",
    "cmp     eax, 0x1",
    "je      0x3fcc0",
    "lea     rax, [rel running_under_emacs]",
    "cmp     dword [rax], 0x2",
    "jne     0x3fbee",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rdi, rdi",
    "je      0x3fc44",
    "lea     rax, [rel current_readline_line]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x3fce8",
    "lea     rdi, [rel data_11fb41[3]]  {\"PWD\"}",
    "call    find_variable",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x3fd3b",
    "mov     eax, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    ah, 0x10",
    "jne     0x3fc44",
    "lea     rdx, [rel current_readline_line_index]",
    "movsxd  rdx, dword [rdx]",
    "cmp     byte [rax+rdx], 0x0",
    "jne     0x3fc44",
    "lea     rdi, [rel data_11f1be]  {\"eterm\"}",
    "call    get_working_directory",
    "mov     rcx, rax",
    "mov     rbx, rax",
    "jmp     0x3fc7b",
    "call    get_variable_value",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x3fd3b",
    "test    al, 0x4",
    "jne     0x3fd52",
    "nop     dword [rax+rax]",
    "mov     rax, qword [rel stderr]",
    "lea     rdx, [rel data_11f1c4]",
    "mov     esi, 0x2",
    "mov     rdi, qword [rax]",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x3fbee",
    "xor     ebx, ebx",
    "cmp     qword [rdi+0x8], 0x0",
    "jle     0x3fc44",
    "test    al, 0x40",
    "jne     0x3fc44",
    "mov     rsi, rbx",
    "call    execute_array_command",
    "jmp     0x3fc44",
    "cmp     byte [rdi], 0x0",
    "je      0x3fc44",
    "mov     rsi, rbx",
    "call    execute_variable_command",
    "jmp     0x3fc44"
  ]
}