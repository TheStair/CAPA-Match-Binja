{
  "address": "0xd8a80",
  "rules": [
    "hash data using aphash/1c6766435cde44639c26b9e1f0d91a11",
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "PEB access/fd0dc33357ac4dfab7ffc937f75726c6",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "hash data with CRC32/9576910bfc754e15b215ae4d3227da01",
    "encrypt data using HC-128/26adaa3641374fccbeddc33b759c970e",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "decompress data using aPLib/0343e5a0b17b4d2cad7af66693469884",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/9f5ed5341ae94a0d943f2c8a6a459760",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "mov     r12, rcx",
    "push    rbx",
    "mov     rbx, rdx",
    "sub     rsp, 0x8",
    "test    esi, esi",
    "je      0xd8af0",
    "mov     r9d, r8d",
    "and     r9d, 0x8",
    "jne     0xd8d70",
    "lea     eax, [rsi-0x2]",
    "cmp     eax, 0x3e",
    "jbe     0xd8b70",
    "lea     r10, [rbx+r12-0x2]",
    "mov     byte [r10+0x1], 0x0",
    "test    rdi, rdi",
    "js      0xd8df0",
    "mov     r9d, r8d",
    "and     r9d, 0x8",
    "je      0xd8e10",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121f8a]  {\"invalid base\"}",
    "lea     r13, [rcx-0x1]",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r13",
    "mov     rdi, rbx",
    "mov     rsi, rax",
    "call    strncpy",
    "mov     byte [rbx+r12-0x1], 0x0",
    "call    __errno_location",
    "mov     dword [rax], 0x16",
    "add     rsp, 0x8",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     rax, rcx",
    "mov     r9d, esi",
    "mov     rcx, r10",
    "nop     dword [rax]",
    "test    rdi, rdi",
    "js      0xd8e38",
    "lea     rcx, [rdx+rcx-0x2]",
    "neg     rdi",
    "mov     r9d, 0x2d",
    "mov     byte [rcx+0x1], 0x0",
    "lea     rcx, [rdx+rcx-0x2]",
    "mov     byte [rcx+0x1], 0x0",
    "lea     rax, [rcx-0x1]",
    "cmp     rdi, 0x9",
    "jbe     0xd8da8",
    "test    rdi, rdi",
    "jns     0xd8b80",
    "xor     r9d, r9d",
    "test    r9d, r9d",
    "jne     0xd8db8",
    "mov     rax, 0xcccccccccccccccd",
    "mov     r9d, esi",
    "mul     rdi",
    "shr     rdx, 0x3",
    "lea     rax, [rdx+rdx*4]",
    "add     rax, rax",
    "sub     rdi, rax",
    "add     edi, 0x30",
    "mov     byte [r10], dil",
    "mov     rdi, rdx",
    "jmp     0xd8b1d",
    "mov     r9d, esi",
    "mov     rcx, r10",
    "jmp     0xd8b1d",
    "lea     rcx, [r10-0x1]",
    "cmp     rdi, 0x9",
    "jbe     0xd8d98",
    "add     edi, 0x30",
    "mov     byte [rcx], dil",
    "jmp     0xd8c56",
    "mov     rsi, 0x6666666666666667",
    "nop     word [rax+rax]",
    "lea     rcx, [rbx+r12-0x2]",
    "mov     byte [rcx+0x1], 0x0",
    "cmp     esi, 0x8",
    "jne     0xd8bc8",
    "neg     rdi",
    "mov     r9d, 0x2d",
    "jmp     0xd8b80",
    "jg      0xd8c70",
    "nop     ",
    "mov     byte [rax], 0x2d",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x8",
    "add     rax, 0x1",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "mov     rax, rdi",
    "sub     rcx, 0x1",
    "imul    rsi",
    "mov     rax, rdi",
    "sar     rax, 0x3f",
    "sar     rdx, 0x2",
    "sub     rdx, rax",
    "lea     rax, [rdx+rdx*4]",
    "add     rax, rax",
    "sub     rdi, rax",
    "add     edi, 0x30",
    "mov     byte [rcx+0x1], dil",
    "mov     rdi, rdx",
    "test    rdx, rdx",
    "jne     0xd8b30",
    "mov     esi, 0xa",
    "jmp     0xd8c0f",
    "cmp     esi, 0xa",
    "je      0xd8e02",
    "mov     r10, rcx",
    "mov     rax, rdi",
    "cmp     esi, 0x2",
    "jne     0xd8c96",
    "mov     eax, edi",
    "sub     rcx, 0x1",
    "and     eax, 0x7",
    "add     eax, 0x30",
    "shr     rdi, 0x3",
    "mov     byte [rcx+0x1], al",
    "jne     0xd8b90",
    "test    r8b, 0x1",
    "je      0xd8c0f",
    "and     r8d, 0x2",
    "je      0xd8e30",
    "mov     r10, rcx",
    "mov     esi, r9d",
    "jmp     0xd8d7a",
    "mov     edx, r8d",
    "lea     r11, [rel data_121f97]  {\"0123456789abcdef\"}",
    "lea     r10, [rel data_121fa8]  {\"0123456789ABCDEF\"}",
    "and     edx, 0x4",
    "cmp     esi, 0x10",
    "je      0xd8d22",
    "movsxd  r10, esi",
    "mov     ebx, 0x5f",
    "mov     r11d, 0x40",
    "jmp     0xd8cc2",
    "nop     dword [rax]",
    "cmp     byte [rcx+0x1], 0x30",
    "je      0xd8e30",
    "mov     rax, rcx",
    "jmp     0xd8c56",
    "cmp     esi, 0xa",
    "je      0xd8e30",
    "mov     rax, rdi",
    "and     eax, 0xf",
    "test    edx, edx",
    "jne     0xd8d10",
    "mov     rax, rdi",
    "xor     edx, edx",
    "div     r10",
    "cmp     rdx, 0x9",
    "jbe     0xd8cb0",
    "mov     edx, eax",
    "sub     r10, 0x1",
    "and     edx, 0x1",
    "add     edx, 0x30",
    "shr     rax, 0x1",
    "mov     byte [r10+0x1], dl",
    "jne     0xd8be0",
    "bsr     rax, rdi",
    "mov     rdx, 0xffffffffffffffff",
    "test    rdi, rdi",
    "cdqe    ",
    "not     rax",
    "cmove   rax, rdx",
    "add     rcx, rax",
    "mov     byte [rcx], 0x30",
    "lea     rax, [rcx-0x1]",
    "jmp     0xd8c56",
    "mov     eax, 0xcccccccd",
    "mov     edx, esi",
    "mov     byte [rcx], 0x23",
    "imul    rdx, rax",
    "mov     eax, esi",
    "shr     rdx, 0x23",
    "lea     edi, [rdx+rdx*4]",
    "add     edi, edi",
    "sub     eax, edi",
    "add     eax, 0x30",
    "mov     byte [rcx-0x1], al",
    "lea     rax, [rcx-0x2]",
    "cmp     esi, 0xa",
    "jle     0xd8c56",
    "movzx   eax, byte [r10+rax]",
    "sub     rcx, 0x1",
    "shr     rdi, 0x4",
    "mov     byte [rcx+0x1], al",
    "je      0xd8d3e",
    "movzx   eax, byte [r11+rax]",
    "sub     rcx, 0x1",
    "shr     rdi, 0x4",
    "mov     byte [rcx+0x1], al",
    "jne     0xd8d22",
    "add     edx, 0x30",
    "cmp     rdx, 0x23",
    "ja      0xd8dd0",
    "add     edx, 0x30",
    "lea     rax, [rcx-0x3]",
    "mov     byte [rcx-0x2], dl",
    "test    r8b, 0x1",
    "je      0xd8c0f",
    "test    r8b, 0x1",
    "je      0xd8c0f",
    "mov     rdi, rax",
    "cmp     rdx, 0x3d",
    "ja      0xd8de0",
    "add     edx, 0x57",
    "sub     rcx, 0x1",
    "mov     byte [rcx+0x1], dl",
    "cmp     rdi, r10",
    "jae     0xd8cbf",
    "and     r8d, 0x4",
    "mov     byte [rcx-0x1], 0x30",
    "cmp     r8d, 0x1",
    "sbb     eax, eax",
    "and     eax, 0x20",
    "add     eax, 0x58",
    "mov     byte [rcx], al",
    "lea     rax, [rcx-0x2]",
    "jmp     0xd8c56",
    "lea     eax, [rsi-0x8]",
    "and     eax, 0xfffffff7",
    "jne     0xd8c0f",
    "cmp     rdx, 0x3e",
    "mov     edx, r11d",
    "cmovne  edx, ebx",
    "jmp     0xd8cb3",
    "add     edx, 0x1d",
    "jmp     0xd8cb3",
    "cmp     esi, 0x10",
    "jne     0xd8bab",
    "sub     rcx, 0x1",
    "mov     byte [rcx+0x1], dl",
    "cmp     rdi, r10",
    "jb      0xd8ce9",
    "jmp     0xd8d48"
  ]
}