{
  "address": "0x89f70",
  "rules": [
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "lea     rbx, [rel parse_and_execute_level]",
    "mov     esi, dword [rbx]",
    "test    esi, esi",
    "je      0x8a088",
    "mov     ecx, dword [rel data_161064]",
    "test    ecx, ecx",
    "jne     0x89fe2",
    "lea     r13, [rel running_trap]",
    "lea     r12, [rel data_1611a0]",
    "lea     r14, [rel data_1209dc]  {\"parse_and_execute top\"}",
    "nop     dword [rax]",
    "call    sub_875b0",
    "jmp     0x89fe7",
    "cmp     qword [rel data_161a50], 0x0",
    "jne     0x8a070",
    "mov     dword [rel data_160908], 0x0",
    "sub     eax, 0x1",
    "cdqe    ",
    "and     dword [r12+rax*4], 0xffffffcf",
    "lea     rax, [rel funcnest]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel breaking]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel continuing]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel loop_level]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel wait_intr_flag]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel return_catch_flag]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel comsub_ignore_return]",
    "mov     dword [rax], 0x0",
    "lea     rax, [rel executing_list]",
    "mov     dword [rax], 0x0",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "xor     edi, edi",
    "call    sub_113ed0",
    "cmp     qword [rel data_161a50], 0x0",
    "je      0x89ff8",
    "mov     rdi, r14",
    "call    sub_113ed0",
    "mov     edx, dword [rbx]",
    "test    edx, edx",
    "jne     0x89fa8",
    "mov     eax, dword [rel data_161064]",
    "mov     dword [rbx], 0x0",
    "test    eax, eax",
    "je      0x89ff8",
    "mov     eax, dword [r13]",
    "test    eax, eax",
    "jle     0x89fc4",
    "nop     word [rax+rax]"
  ]
}