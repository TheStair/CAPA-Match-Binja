{
  "address": "0x40c30",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "xor     r15d, r15d",
    "push    r14",
    "push    r13",
    "lea     r13, [rbp-0x140]",
    "push    r12",
    "mov     r12, rdi",
    "mov     rdi, r13",
    "push    rbx",
    "sub     rsp, 0x138",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "lea     rax, [rel line_number]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x14c], eax",
    "call    save_parser_state",
    "lea     rbx, [rel parser_state]",
    "mov     dword [rel data_160dcc], 0x119",
    "mov     qword [rel data_1608a8], 0x0",
    "mov     qword [rel data_1608a0], 0x0",
    "mov     eax, dword [rbx]",
    "mov     dword [rel data_1608ec], 0x0",
    "mov     dword [rel data_1608e8], 0x0",
    "mov     r14d, eax",
    "and     eax, 0xffbeecff",
    "or      ah, 0x20",
    "and     r14d, 0x4000",
    "mov     dword [rbx], eax",
    "mov     rdi, r13",
    "call    restore_parser_state",
    "lea     rax, [rel data_161610]",
    "cmp     r15, rax",
    "je      0x40eb7",
    "cmp     eax, 0xa",
    "je      0x40df0",
    "lea     rax, [rel last_command_exit_value]",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_158490]",
    "mov     dword [rel data_158490], 0x1",
    "mov     dword [rax], 0x1",
    "call    set_pipestatus_array",
    "lea     rax, [rel interactive_shell]",
    "mov     dword [rel data_160dcc], 0xa",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x40f03",
    "test    r15, r15",
    "je      0x40f10",
    "lea     rax, [rel interactive]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0x40cca",
    "lea     edx, [rax-0x119]",
    "cmp     edx, 0x1",
    "ja      0x40e80",
    "mov     edi, 0x2",
    "call    jump_to_top_level",
    "{ Does not return }",
    "lea     rax, [rel posixly_correct]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x40f58",
    "xor     r13d, r13d",
    "xor     eax, eax",
    "jmp     0x40db5",
    "mov     rax, qword [r15]",
    "test    rax, rax",
    "je      0x40d81",
    "call    sub_1145f0",
    "cmp     eax, 0x29",
    "je      0x40d2f",
    "lea     rax, [rel bash_input]",
    "mov     eax, dword [rax]",
    "sub     eax, 0x1",
    "cmp     eax, 0x1",
    "ja      0x40cca",
    "lea     rdx, [rel current_token]",
    "mov     dword [rdx], eax",
    "cmp     eax, 0x131",
    "je      0x40f30",
    "lea     rax, [rel yylval]",
    "lea     rdx, [rel wlcache]",
    "movq    xmm1, r15",
    "movq    xmm0, qword [rax]",
    "mov     eax, dword [rdx+0xc]",
    "punpcklqdq xmm1, xmm0",
    "test    eax, eax",
    "jle     0x40e40",
    "mov     edi, 0x1",
    "call    jump_to_top_level",
    "{ Does not return }",
    "mov     dword [r12], eax",
    "test    r14d, r14d",
    "je      0x40dc4",
    "mov     rdi, r15",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "call    string_list_internal",
    "mov     rdi, r15",
    "mov     r13, rax",
    "call    dispose_words",
    "test    r13, r13",
    "je      0x40f10",
    "mov     qword [r15], 0x0",
    "mov     rdx, r15",
    "mov     r15, rax",
    "jmp     0x40d73",
    "lea     rax, [rel pushed_string_list]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x40e30",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1236a0]  {\"unexpected EOF while looking for\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [rbp-0x14c]",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x40ea2",
    "mov     eax, dword [rbx]",
    "test    eax, 0x800000",
    "je      0x40f1a",
    "mov     edi, 0x10",
    "movaps  xmmword [rbp-0x160], xmm1",
    "movq    qword [rbp-0x148], xmm0",
    "call    malloc",
    "movq    xmm0, qword [rbp-0x148]",
    "test    rax, rax",
    "mov     r15, rax",
    "je      0x31cd8",
    "sub     eax, 0x1",
    "mov     rcx, qword [rdx]",
    "mov     dword [rdx+0xc], eax",
    "cdqe    ",
    "mov     r15, qword [rcx+rax*8]",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x40f62",
    "or      dword [rbx], 0x4000",
    "xor     eax, eax",
    "cmp     byte [r13], 0x0",
    "je      0x40db5",
    "mov     rax, qword [r15]",
    "mov     qword [r15], rdx",
    "mov     rdx, r15",
    "test    rax, rax",
    "jne     0x40d70",
    "call    sub_44ac0",
    "jmp     0x40cca",
    "cmp     qword [rax+0x18], 0x0",
    "jne     0x40cca",
    "test    r15, r15",
    "je      0x40eaf",
    "xor     edi, edi",
    "call    sub_3b600",
    "jmp     0x40e9d",
    "call    reset_parser",
    "mov     esi, 0x10",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "movq    qword [rbp-0x148], xmm0",
    "call    sub_a7f00",
    "{ Does not return }",
    "movdqa  xmm1, xmmword [rbp-0x160]",
    "jmp     0x40d21",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x138",
    "mov     rax, r13",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, r13",
    "call    strlen",
    "mov     r15, rax",
    "mov     rdi, r13",
    "call    restore_parser_state",
    "mov     rdi, r15",
    "call    dispose_words",
    "movups  xmmword [r15], xmm1",
    "call    sub_1145f0",
    "cmp     eax, 0x29",
    "jne     0x40cd4"
  ]
}