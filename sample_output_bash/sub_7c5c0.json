{
  "address": "0x7c5c0",
  "rules": [
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12, rsi",
    "push    rbx",
    "mov     rbx, rdx",
    "sub     rsp, 0x38",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "mov     eax, edi",
    "and     eax, 0xffffffdf",
    "cmp     eax, 0x41",
    "jne     0x7c610",
    "test    rdx, rdx",
    "je      0x7c630",
    "test    rsi, rsi",
    "je      0x7c630",
    "{Case 0x1-0x3, 0x5-0x9, 0xc-0xe, 0x11-0x13, 0x15-0x1f}",
    "xor     ebx, ebx",
    "sub     edi, 0x41",
    "cmp     edi, 0x34",
    "ja      0x7c630",
    "sub     edi, 0x41",
    "cmp     edi, 0x20",
    "ja      0x7c630",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel jump_table_136b48]",
    "movsxd  rax, dword [rdx+rdi*4]",
    "add     rax, rdx",
    "jmp     rax",
    "lea     rdx, [rel jump_table_136ac4]",
    "movsxd  rax, dword [rdx+rdi*4]",
    "add     rax, rdx",
    "jmp     rax",
    "{Case 0xa, 0x10}",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "{Case 0xf}",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "{Case 0x20}",
    "lea     r13, [rbp-0x50]",
    "xor     esi, esi",
    "mov     rdi, r12",
    "mov     rdx, r13",
    "call    var_attribute_string",
    "test    eax, eax",
    "jle     0x7c630",
    "{Case 0x4}",
    "mov     rdi, rbx",
    "call    strlen",
    "xor     ecx, ecx",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "mov     edx, eax",
    "call    ansiexpand",
    "mov     r12, rax",
    "mov     rdi, rax",
    "call    dequote_escapes",
    "mov     rdi, r12",
    "mov     rbx, rax",
    "call    free",
    "jmp     0x7c632",
    "{Case 0x34}",
    "cmp     byte [rbx], 0x0",
    "jne     0x7c8d8",
    "{Case 0x14}",
    "cmp     byte [rbx], 0x0",
    "je      0x7c74a",
    "{Case 0xb}",
    "cmp     byte [rbx], 0x0",
    "je      0x7c74a",
    "{Case 0x0}",
    "test    r12, r12",
    "je      0x7c7e5",
    "{Case 0x14}",
    "test    rbx, rbx",
    "je      0x7c74a",
    "{Case 0xb}",
    "test    rbx, rbx",
    "je      0x7c74a",
    "{Case 0x0}",
    "test    byte [r12+0x29], 0x10",
    "jne     0x7c8f8",
    "lea     rsp, [rbp-0x28]",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sh_quote_reusable",
    "lea     rsp, [rbp-0x28]",
    "mov     rdi, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     decode_prompt_string",
    "mov     rdi, r13",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x7c9e0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7c99a",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c995",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "lea     r13, [rbp-0x50]",
    "call    sh_quote_reusable",
    "mov     rdx, r13",
    "xor     esi, esi",
    "mov     rdi, r12",
    "mov     r14, rax",
    "call    var_attribute_string",
    "test    eax, eax",
    "mov     edx, eax",
    "sete    r15b",
    "test    r14, r14",
    "sete    al",
    "and     r15b, al",
    "mov     byte [rbp-0x5d], r15b",
    "jne     0x7c630",
    "lea     r13, [rbp-0x50]",
    "xor     esi, esi",
    "mov     rdi, r12",
    "mov     rdx, r13",
    "call    var_attribute_string",
    "mov     edx, eax",
    "test    eax, eax",
    "je      0x7c630",
    "cmp     qword [r12+0x8], 0x0",
    "je      0x7c8f8",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "mov     rbx, r12",
    "call    __strcpy_chk",
    "jmp     0x7c632",
    "mov     edx, 0x40",
    "jmp     0x7c7ae",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rbx], 0x0",
    "jmp     0x7c632",
    "mov     edx, 0x2",
    "jmp     0x7c7ae",
    "mov     edx, 0x1",
    "movsxd  rbx, edx",
    "test    r14, r14",
    "je      0x7c916",
    "movsxd  rbx, edx",
    "lea     rsp, [rbp-0x28]",
    "mov     rdi, rbx",
    "xor     esi, esi",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sub_dd4b0",
    "mov     r15, qword [r12]",
    "mov     dword [rbp-0x5c], edx",
    "mov     rdi, r15",
    "call    strlen",
    "lea     rsi, [rbx+rax+0x20]",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x58], rsi",
    "call    malloc",
    "mov     rsi, qword [rbp-0x58]",
    "mov     edx, dword [rbp-0x5c]",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0x7c9b2",
    "xor     ecx, ecx",
    "cmp     byte [r14], 0x0",
    "je      0x7c860",
    "mov     byte [rbp-0x5d], 0x1",
    "xor     r14d, r14d",
    "mov     byte [rbp-0x5d], 0x1",
    "xor     r14d, r14d",
    "test    edx, edx",
    "jle     0x7c986",
    "mov     r15, qword [r12]",
    "mov     dword [rbp-0x5c], edx",
    "mov     qword [rbp-0x58], rcx",
    "mov     rdi, r15",
    "call    strlen",
    "mov     rcx, qword [rbp-0x58]",
    "lea     rsi, [rbx+rcx+0x20]",
    "add     rsi, rax",
    "mov     rdi, rsi",
    "mov     qword [rbp-0x58], rsi",
    "call    malloc",
    "mov     rsi, qword [rbp-0x58]",
    "mov     edx, dword [rbp-0x5c]",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0x7c9b9",
    "cmp     byte [r14+0x1], 0x0",
    "mov     ecx, 0x1",
    "je      0x7c860",
    "mov     r9, r14",
    "mov     r8, r15",
    "lea     rcx, [rel data_120936[0xc]]  {\"%s=%s\"}",
    "jmp     0x7c967",
    "cmp     byte [rbp-0x5d], 0x0",
    "je      0x7c89e",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "mov     dword [rbp-0x5c], edx",
    "xor     ebx, ebx",
    "mov     qword [rbp-0x58], rsi",
    "call    sub_a7f00",
    "{ Does not return }",
    "test    edx, edx",
    "jle     0x7c986",
    "cmp     byte [r14+0x2], 0x0",
    "mov     ecx, 0x2",
    "je      0x7c860",
    "mov     rdx, rsi",
    "mov     rdi, rbx",
    "mov     esi, 0x2",
    "xor     eax, eax",
    "call    __sprintf_chk",
    "mov     r9, r15",
    "mov     r8, r13",
    "lea     rcx, [rel data_120927]  {\"declare -%s %s\"}",
    "sub     rsp, 0x8",
    "mov     rdx, rsi",
    "mov     r9, r15",
    "mov     r8, r13",
    "push    r14",
    "lea     rcx, [rel data_120936]  {\"declare -%s %s=%s\"}",
    "mov     esi, 0x2",
    "xor     eax, eax",
    "mov     rdi, rbx",
    "call    __sprintf_chk",
    "pop     rax",
    "pop     rdx",
    "jmp     0x7c979",
    "mov     rdi, r14",
    "mov     dword [rbp-0x58], edx",
    "call    strlen",
    "mov     edx, dword [rbp-0x58]",
    "mov     rcx, rax",
    "nop     dword [rax+rax]",
    "mov     rdi, r14",
    "call    free",
    "jmp     0x7c632"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}