{
  "address": "0x7c130",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "xor     r15d, r15d",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12, r9",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x48",
    "mov     qword [rbp-0x58], rsi",
    "mov     r14, qword [rbp+0x10]",
    "mov     qword [rbp-0x48], rdx",
    "mov     dword [rbp-0x50], ecx",
    "mov     dword [rbp-0x4c], r8d",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "movzx   eax, byte [rdi]",
    "cmp     al, 0x21",
    "je      0x7c370",
    "call    __ctype_b_loc",
    "movzx   ecx, byte [rbx+0x1]",
    "mov     rdx, rax",
    "mov     rdx, qword [rdx]",
    "mov     rax, rcx",
    "test    byte [rdx+rcx*2+0x1], 0x4",
    "jne     0x7c3c0",
    "cmp     al, 0x40",
    "je      0x7c300",
    "test    al, al",
    "jne     0x7c490",
    "cmp     cl, 0x5f",
    "je      0x7c3dd",
    "xor     r13d, r13d",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x7c18a",
    "xor     r13d, r13d",
    "cmp     al, 0x2a",
    "je      0x7c300",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "jne     0x7c3f0",
    "lea     rdx, [rel sh_syntaxtab]",
    "mov     esi, 0x1",
    "test    byte [rdx+0x85], 0x8",
    "jne     0x7c3f0",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "jne     0x7c3f0",
    "lea     edx, [rcx-0x30]",
    "cmp     dl, 0x9",
    "jbe     0x7c3c0",
    "mov     qword [r12], 0x0",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0x7c2a0",
    "cmp     al, 0x2a",
    "mov     r13d, 0x81",
    "mov     eax, 0x1",
    "cmovne  r13d, eax",
    "jmp     0x7c18a",
    "mov     edx, dword [rbp-0x50]",
    "lea     rdi, [rbx+0x1]",
    "mov     ecx, 0x1",
    "call    sub_7a300",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7c4c8",
    "lea     rdx, [rel posixly_correct]",
    "mov     edx, dword [rdx]",
    "test    edx, edx",
    "jne     0x7c4b1",
    "xor     esi, esi",
    "cmp     al, 0x2a",
    "sete    sil",
    "nop     dword [rax]",
    "lea     rdx, [rel posixly_correct]",
    "mov     ecx, dword [rdx]",
    "test    ecx, ecx",
    "jne     0x7c510",
    "mov     rdi, rbx",
    "call    find_variable",
    "test    rax, rax",
    "je      0x7c328",
    "lea     rdx, [rbp-0x40]",
    "xor     ecx, ecx",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    array_variable_name",
    "mov     r13, rax",
    "mov     eax, dword [rbp-0x4c]",
    "test    eax, eax",
    "sete    dl",
    "cmp     qword [rbp-0x48], 0x0",
    "setne   al",
    "and     edx, eax",
    "test    r13, r13",
    "je      0x7c4e0",
    "mov     qword [r12], 0x0",
    "xor     r13d, r13d",
    "mov     qword [r14], 0x0",
    "jmp     0x7c348",
    "movzx   eax, byte [rax]",
    "mov     r15d, 0x1",
    "jmp     0x7c177",
    "cmp     al, 0x40",
    "jne     0x7c3e5",
    "cmp     al, 0x23",
    "je      0x7c4b9",
    "cmp     al, 0x2a",
    "je      0x7c490",
    "cmp     al, 0x23",
    "je      0x7c3b3",
    "cmp     qword [rbp-0x58], 0x0",
    "je      0x7c338",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dh, 0x10",
    "jne     0x7c328",
    "test    dl, dl",
    "jne     0x7c530",
    "mov     rdi, r13",
    "mov     byte [rbp-0x61], dl",
    "call    find_variable",
    "mov     rdi, r13",
    "mov     qword [rbp-0x60], rax",
    "call    free",
    "movzx   edx, byte [rbp-0x61]",
    "mov     r8, qword [rbp-0x60]",
    "test    dl, dl",
    "je      0x7c209",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x7c5b7",
    "mov     esi, 0x1",
    "jmp     0x7c3f0",
    "cmp     al, 0x3f",
    "je      0x7c4b9",
    "cmp     al, 0x40",
    "je      0x7c490",
    "xor     esi, esi",
    "cmp     byte [rbx+0x2], 0x0",
    "sete    sil",
    "jmp     0x7c3f0",
    "cmp     al, 0x3f",
    "jne     0x7c510",
    "mov     rax, qword [rbp-0x58]",
    "mov     qword [r14], rax",
    "test    r13d, r13d",
    "je      0x7c460",
    "test    dl, 0x44",
    "je      0x7c328",
    "mov     rcx, 0x8000000000000000",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rax+0x8], rcx",
    "jmp     0x7c4e4",
    "xor     r8d, r8d",
    "jmp     0x7c42e",
    "test    r8, r8",
    "je      0x7c4e4",
    "mov     rcx, 0x8000000000000000",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rax+0x8], rcx",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x48",
    "mov     eax, r13d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     r15d, r15d",
    "xor     r13d, r13d",
    "jmp     0x7c18a",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x7c348",
    "mov     rdi, rbx",
    "call    find_variable",
    "mov     rdi, qword [rbp-0x58]",
    "mov     qword [r12], rax",
    "test    byte [rbp-0x50], 0x3",
    "je      0x7c4f0",
    "and     edx, 0x40",
    "mov     qword [r12], rax",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "je      0x7c500",
    "mov     edx, dword [rbp-0x4c]",
    "mov     qword [r12], r8",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "mov     rcx, qword [rbp-0x48]",
    "or      edx, 0x1",
    "call    sub_98120",
    "mov     qword [r14], rax",
    "mov     edx, dword [r8+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dh, 0x10",
    "je      0x7c22e",
    "call    dequote_escapes",
    "mov     qword [r14], rax",
    "jmp     0x7c47e",
    "call    dequote_string",
    "mov     qword [r14], rax",
    "xor     esi, esi",
    "call    array_reference",
    "test    rdi, rdi",
    "je      0x7c5b0",
    "test    r15d, r15d",
    "jne     0x7c290",
    "mov     rsi, qword [rbp-0x40]",
    "movzx   ecx, byte [rsi]",
    "cmp     cl, 0x40",
    "sete    al",
    "cmp     cl, 0x2a",
    "sete    dil",
    "or      eax, edi",
    "and     edx, 0x44",
    "je      0x7c420",
    "mov     qword [r12], 0x0",
    "mov     qword [r14], 0x0",
    "mov     edx, dword [r8+0x28 {Elf64_Header::section_header_offset.d}]",
    "xor     r13d, r13d",
    "jmp     0x7c33f",
    "mov     r13d, 0x3",
    "jmp     0x7c33f",
    "xor     eax, eax",
    "jmp     0x7c507",
    "xor     edx, edx",
    "mov     rsi, rdi",
    "lea     rdi, [rel data_121b60]  {\"0\"}",
    "call    hash_search",
    "test    rax, rax",
    "je      0x7c5b0",
    "test    al, al",
    "je      0x7c42e",
    "test    al, al",
    "je      0x7c25b",
    "mov     qword [r14], rax",
    "jmp     0x7c44c",
    "mov     rax, qword [rax+0x10]",
    "jmp     0x7c507",
    "cmp     byte [rsi+0x1], 0x5d",
    "je      0x7c568",
    "mov     edx, dword [rbp-0x4c]",
    "mov     rcx, qword [rbp-0x48]",
    "mov     esi, 0x1",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x58], r8",
    "mov     r13d, 0x3",
    "or      edx, 0x1",
    "call    sub_98120",
    "mov     r8, qword [rbp-0x58]",
    "cmp     byte [rsi+0x1], 0x5d",
    "je      0x7c548",
    "mov     qword [r12], r8",
    "mov     rax, qword [rbp-0x58]",
    "test    byte [rbp-0x50], 0x3",
    "je      0x7c598",
    "mov     eax, 0x2",
    "cmp     cl, 0x2a",
    "mov     r13d, 0x82",
    "cmovne  r13d, eax",
    "mov     rax, qword [r8+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "jmp     0x7c280",
    "test    rax, rax",
    "je      0x7c587",
    "test    rax, rax",
    "je      0x7c587",
    "mov     qword [r14], rax",
    "mov     qword [r12], r8",
    "test    r15d, r15d",
    "je      0x7c348",
    "mov     rax, qword [rbp-0x58]",
    "mov     qword [r14], rax",
    "jmp     0x7c47e",
    "mov     rdi, rax",
    "call    dequote_escapes",
    "mov     qword [rbp-0x58], rax",
    "jmp     0x7c587",
    "mov     rdi, rax",
    "call    dequote_string",
    "mov     qword [rbp-0x58], rax"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}