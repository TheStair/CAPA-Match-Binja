{
  "address": "0x10ba60",
  "rules": [
    "encrypt data using Curve25519/f2994133291147a090851ed21e9c381b",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "lea     r13, [rel data_12210c]  {\"(arg: %d) \"}",
    "push    r12",
    "mov     r12d, edi",
    "mov     rdi, r13",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     rax, [rel rl_numeric_arg]",
    "lea     r15, [rel rl_arg_sign]",
    "mov     esi, dword [r15]",
    "imul    esi, dword [rax]",
    "xor     eax, eax",
    "call    rl_message",
    "lea     rbx, [rel rl_readline_state]",
    "or      qword [rbx], 0x40",
    "call    rl_read_key",
    "and     qword [rbx], 0xffffffffffffffbf",
    "mov     r14d, eax",
    "mov     eax, 0x1",
    "test    r14d, r14d",
    "js      0x10bafb",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rdx, [rel _rl_argcxt]",
    "mov     eax, dword [rdx]",
    "test    al, 0x4",
    "jne     0x10bb10",
    "and     eax, 0xfffffffb",
    "mov     dword [rdx], eax",
    "call    rl_restore_prompt",
    "lea     rax, [rel rl_prompt]",
    "mov     rdx, qword [rax]",
    "lea     rax, [rel rl_display_prompt]",
    "mov     qword [rax], rdx",
    "mov     eax, dword [rel data_16a4b0]",
    "test    eax, eax",
    "jne     0x10bb70",
    "mov     esi, r14d",
    "mov     edi, r12d",
    "call    _rl_arg_dispatch",
    "mov     ebx, eax",
    "test    eax, eax",
    "jle     0x10baf3",
    "call    rl_restore_prompt",
    "mov     dword [rel data_16a4b0], 0x0",
    "jmp     0x10bb38",
    "lea     rax, [rel rl_redisplay_function]",
    "call    qword [rax]",
    "mov     rax, qword [rbx]",
    "lea     rdx, [rel rl_pending_input]",
    "and     ah, 0xfb",
    "mov     dword [rdx], r14d",
    "or      rax, 0x20000",
    "mov     qword [rbx], rax",
    "add     rsp, 0x8",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     eax, eax",
    "cmp     ebx, 0x1",
    "setne   al",
    "lea     rax, [rel rl_numeric_arg]",
    "mov     esi, dword [r15]",
    "mov     rdi, r13",
    "imul    esi, dword [rax]",
    "xor     eax, eax",
    "call    rl_message"
  ]
}