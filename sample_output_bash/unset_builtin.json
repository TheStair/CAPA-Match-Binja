{
  "address": "0xc2860",
  "rules": [
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "contain loop",
    "parse credit card information/ec13bfcb186a4b7fbe03b0f8d0b0e7ff",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for kernel debugger via shared user data structure/8dba58369c324a29b2fa79b10c98c249"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "lea     r13, [rel data_12181b]",
    "push    r12",
    "xor     r12d, r12d",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x68",
    "lea     r14, [rel loptend]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "lea     rax, [rel lcurrent]",
    "mov     dword [rbp-0x58], 0x0",
    "mov     qword [r14], 0x0",
    "mov     qword [rax], 0x0",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     dword [rbp-0x54], 0x0",
    "mov     ebx, dword [rbp-0x58]",
    "mov     r14, qword [r14]",
    "and     ebx, r12d",
    "jne     0xc2d6a",
    "cmp     eax, 0x6e",
    "je      0xc2950",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_134378]  {\"cannot simultaneously unset a fu\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xc291a",
    "lea     rdx, [rel assoc_expand_once]",
    "xor     r9d, r9d",
    "mov     edi, dword [rdx]",
    "test    edi, edi",
    "setne   r9b",
    "test    r14, r14",
    "je      0xc291a",
    "mov     dword [rbp-0x54], 0x1",
    "jmp     0xc28d0",
    "jg      0xc2900",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xc2d8c",
    "mov     eax, dword [rbp-0x54]",
    "xor     r10d, r10d",
    "mov     dword [rbp-0x6c], r12d",
    "mov     dword [rbp-0x64], r9d",
    "mov     r15d, r10d",
    "mov     edx, eax",
    "xor     eax, 0x1",
    "or      edx, r12d",
    "mov     byte [rbp-0x81], al",
    "mov     dword [rbp-0x60], edx",
    "mov     edx, dword [rbp-0x58]",
    "or      edx, r12d",
    "mov     dword [rbp-0x5c], edx",
    "jmp     0xc29f1",
    "mov     rsi, r13",
    "mov     rdi, rbx",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xc2960",
    "cmp     eax, 0x76",
    "jne     0xc2910",
    "cmp     eax, 0xffffff9d",
    "je      0xc2940",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x68",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [r14+0x8]",
    "mov     esi, dword [rbp-0x60]",
    "mov     r12d, 0x3",
    "test    byte [rax+0x9], 0x2",
    "mov     rbx, qword [rax]",
    "cmove   r12d, dword [rbp-0x64]",
    "xor     r13d, r13d",
    "test    esi, esi",
    "je      0xc2aa0",
    "call    builtin_usage",
    "mov     dword [rbp-0x58], 0x1",
    "jmp     0xc28d0",
    "call    builtin_help",
    "jmp     0xc2915",
    "cmp     eax, 0x66",
    "jne     0xc2910",
    "lea     rdx, [rbp-0x40]",
    "mov     esi, r12d",
    "mov     rdi, rbx",
    "xor     r13d, r13d",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "setne   r13b",
    "jmp     0xc2a15",
    "mov     rdi, rbx",
    "call    legal_identifier",
    "mov     r9d, dword [rbp-0x5c]",
    "or      r9d, eax",
    "jne     0xc29b8",
    "mov     ebx, 0x102",
    "mov     r12d, 0x1",
    "jmp     0xc28d0",
    "or      eax, dword [rbp-0x6c]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11fa8b]  {\"`%s': not a valid identifier\"}",
    "jne     0xc2ac0",
    "xor     r8d, r8d",
    "mov     ecx, dword [rbp-0x6c]",
    "test    ecx, ecx",
    "jne     0xc2d5e",
    "xor     edi, edi",
    "add     r15d, 0x1",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     r14, qword [r14]",
    "mov     rdi, rbx",
    "call    unbind_func",
    "mov     dword [rbp-0x68], eax",
    "mov     rcx, qword [rbp-0x78]",
    "mov     r9d, dword [rbp-0x80]",
    "mov     r8d, dword [rbp-0x70]",
    "mov     qword [rel data_1619d8], rcx",
    "mov     rcx, qword [rax+0x10]",
    "test    rcx, rcx",
    "jne     0xc2d21",
    "mov     r9d, dword [rbp-0x58]",
    "mov     r8d, r13d",
    "jmp     0xc2a29",
    "mov     edx, dword [rbp-0x54]",
    "test    edx, edx",
    "je      0xc2b80",
    "xor     ebx, ebx",
    "test    r15d, r15d",
    "setne   bl",
    "jmp     0xc291a",
    "test    r14, r14",
    "je      0xc2c20",
    "test    byte [rcx+0x28], 0x2",
    "jne     0xc2d38",
    "test    dl, dl",
    "je      0xc2d18",
    "lea     rax, [rel shell_functions]",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "mov     dword [rbp-0x70], r8d",
    "mov     dword [rbp-0x80], r9d",
    "mov     rcx, qword [rax]",
    "mov     rsi, rcx",
    "mov     qword [rbp-0x78], rcx",
    "call    hash_search",
    "movzx   edx, byte [rbp-0x81]",
    "mov     r13d, edx",
    "test    rax, rax",
    "je      0xc2a83",
    "mov     rdi, rbx",
    "call    find_variable",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0xc2dd2",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    find_variable_last_nameref",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0xc2d47",
    "mov     r9, qword [rcx]",
    "lea     rbx, [rel data_121866]  {\"function\"}",
    "jmp     0xc2c8a",
    "test    r8d, r8d",
    "jne     0xc2b17",
    "test    rcx, rcx",
    "je      0xc2a83",
    "cmp     dword [rbp-0x5c], 0x0",
    "jne     0xc2e31",
    "mov     r8d, dword [rax+0x28]",
    "test    r8d, 0x2000",
    "jne     0xc2cc0",
    "mov     rdi, rbx",
    "call    unbind_nameref",
    "mov     dword [rbp-0x68], eax",
    "mov     rax, qword [r14+0x8]",
    "mov     rdi, qword [rax]",
    "jmp     0xc2c0d",
    "mov     r8d, dword [rax+0x28]",
    "test    r8d, 0x2000",
    "jne     0xc2cc0",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "mov     qword [rbp-0x78], r9",
    "add     r15d, 0x1",
    "lea     rsi, [rel data_1201c8]  {\"%s: cannot unset: readonly %s\"}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x78]",
    "mov     rdx, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     r14, qword [r14]",
    "jmp     0xc29e8",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x33",
    "jg      0xc2b27",
    "jmp     0xc2a83",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    find_variable_last_nameref",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xc2e49",
    "lea     rax, [rel shell_functions]",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "mov     rcx, qword [rax]",
    "mov     rsi, rcx",
    "mov     qword [rbp-0x78], rcx",
    "call    hash_search",
    "test    rax, rax",
    "je      0xc2e31",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x1201e6]  {\"%s: cannot unset\"}",
    "jmp     0xc29cd",
    "mov     r9, qword [rcx]",
    "and     r8d, 0x2",
    "movzx   eax, byte [r9]",
    "cmp     byte [rbx], al",
    "je      0xc2cd8",
    "call    stupidly_hack_special_variables",
    "jmp     0xc2a8e",
    "and     r8d, 0x2",
    "jne     0xc2c80",
    "mov     rsi, qword [rbp-0x40]",
    "mov     rdi, rcx",
    "mov     edx, r12d",
    "mov     dword [rbp-0x70], r8d",
    "mov     dword [rbp-0x80], r9d",
    "mov     qword [rbp-0x78], rcx",
    "call    unbind_array_element",
    "mov     rcx, qword [rbp-0x78]",
    "mov     r9d, dword [rbp-0x80]",
    "cmp     eax, 0xfffffffe",
    "mov     dword [rbp-0x68], eax",
    "mov     r8d, dword [rbp-0x70]",
    "je      0xc2c30",
    "or      r12d, 0x4",
    "mov     rdi, rbx",
    "mov     r12d, 0x1",
    "call    unbind_variable",
    "mov     dword [rbp-0x68], eax",
    "jmp     0xc2da8",
    "test    byte [rax+0x29 {Elf64_Header::section_header_offset+1.b}], 0x8",
    "jne     0xc2e5f",
    "mov     rcx, qword [rbp-0x78]",
    "mov     qword [rel data_1619d8], rcx",
    "mov     rcx, qword [rax+0x10]",
    "test    rcx, rcx",
    "je      0xc2e31",
    "mov     rsi, r9",
    "mov     rdi, rbx",
    "mov     dword [rbp-0x70], r8d",
    "mov     qword [rbp-0x80], rcx",
    "mov     qword [rbp-0x78], r9",
    "call    strcmp",
    "mov     r9, qword [rbp-0x78]",
    "mov     rcx, qword [rbp-0x80]",
    "test    eax, eax",
    "mov     r8d, dword [rbp-0x70]",
    "jne     0xc2bb8",
    "mov     rbx, r9",
    "test    r8d, r8d",
    "jne     0xc2c83",
    "mov     r14, qword [r14]",
    "jmp     0xc29e8",
    "mov     r9, qword [rcx]",
    "test    r13d, r13d",
    "je      0xc2d47",
    "add     r15d, 0x1",
    "test    byte [rcx+0x28], 0x44",
    "jne     0xc2b61",
    "mov     eax, dword [rbp-0x68]",
    "test    eax, eax",
    "js      0xc2be0",
    "cmp     dword [rbp-0x68], 0xffffffff",
    "jne     0xc2b6a",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "xor     edx, edx",
    "xor     esi, esi",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0xc2f21",
    "mov     r9d, dword [rcx+0x28]",
    "and     r9d, 0x2",
    "jne     0xc2d38",
    "test    r8d, r8d",
    "je      0xc2bc4",
    "lea     rbx, [rel data_1202a7]  {\"variable\"}",
    "test    r13d, r13d",
    "je      0xc2d91",
    "mov     r9d, dword [rbp-0x5c]",
    "xor     r13d, r13d",
    "test    r8d, r8d",
    "jne     0xc2a8e",
    "mov     rbx, qword [rcx]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_12181f]  {\"%s: not an array variable\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     r14, qword [r14]",
    "jmp     0xc29e8",
    "add     r15d, 0x1",
    "cmp     eax, 0xffffffff",
    "jne     0xc2b61",
    "mov     rax, qword [r14+0x8]",
    "mov     rdi, qword [rax]",
    "jmp     0xc2c0d",
    "test    r12b, r12b",
    "je      0xc2b6a",
    "mov     rdi, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     r12d, 0x1",
    "call    unbind_variable",
    "mov     dword [rbp-0x68], eax",
    "jmp     0xc2da8",
    "mov     rax, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     rdi, rax",
    "mov     qword [rbp-0x78], rax",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0xc2f38",
    "test    r13d, r13d",
    "je      0xc2a83",
    "jmp     0xc2c83",
    "mov     rdi, rbx",
    "mov     r12d, 0x1",
    "call    unbind_variable",
    "mov     dword [rbp-0x68], eax",
    "nop     word [rax+rax]",
    "mov     r9d, dword [rbp-0x5c]",
    "mov     r13d, 0x1",
    "jmp     0xc2b17",
    "test    r13b, r13b",
    "je      0xc2b61",
    "mov     eax, dword [rbp-0x5c]",
    "test    eax, eax",
    "je      0xc2bfb",
    "mov     qword [rbp-0x80], rax",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x78]",
    "mov     rdx, r13",
    "mov     rdi, rcx",
    "call    __strcpy_chk",
    "lea     rcx, [rbp-0x44]",
    "lea     rdx, [rbp-0x40]",
    "xor     esi, esi",
    "mov     rdi, rax",
    "mov     r13, rax",
    "call    array_variable_name",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0xc2f0e",
    "mov     r8d, r13d",
    "mov     r13d, 0x1",
    "jmp     0xc2b17",
    "or      r9d, r8d",
    "jne     0xc2c70",
    "mov     rdi, rbx",
    "call    unbind_func",
    "mov     dword [rbp-0x68], eax",
    "mov     rax, qword [r14+0x8]",
    "mov     rdi, qword [rax]",
    "mov     dword [rbp-0x68], 0xffffffff",
    "jmp     0xc2b6a",
    "mov     rdi, r13",
    "mov     r12d, 0x1",
    "call    free",
    "jmp     0xc2da8",
    "mov     qword [rbp-0x80], rax",
    "call    find_variable",
    "mov     rdi, qword [rbp-0x80]",
    "mov     qword [rbp-0x78], rax",
    "call    free",
    "mov     rax, qword [rbp-0x78]",
    "test    rax, rax",
    "je      0xc2f0e",
    "mov     dword [rbp-0x68], 0xffffffff",
    "jmp     0xc2b61",
    "mov     rsi, qword [rbp-0x40]",
    "movsxd  rdx, dword [rbp-0x44]",
    "lea     rdx, [rsi+rdx-0x1]",
    "cmp     byte [rdx], 0x5d",
    "jne     0xc2f00",
    "mov     edx, r12d",
    "mov     rdi, rax",
    "call    unbind_array_element",
    "mov     dword [rbp-0x68], eax",
    "mov     byte [rdx], 0x0",
    "mov     rsi, qword [rbp-0x40]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}