{
  "address": "0xc4ac0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "check for software breakpoints/327d7e2a69024accaa8b20822309fd94",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "xor     r14d, r14d",
    "push    r13",
    "lea     r13, [rel data_1210f7[2]]  {\"lp\"}",
    "push    r12",
    "xor     r12d, r12d",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x18",
    "lea     r15, [rel loptend]",
    "lea     rax, [rel lcurrent]",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     qword [r15], 0x0",
    "mov     qword [rax], 0x0",
    "mov     rbx, qword [r15]",
    "test    r12d, r12d",
    "jne     0xc4e3a",
    "cmp     eax, 0x6c",
    "je      0xc4b70",
    "xor     edi, edi",
    "mov     esi, 0x1",
    "call    display_signal_list",
    "mov     edi, eax",
    "jmp     0xc4d3d",
    "test    r14d, r14d",
    "jne     0xc4c92",
    "add     r12d, 0x1",
    "jmp     0xc4b16",
    "cmp     eax, 0x70",
    "je      0xc4b60",
    "add     rsp, 0x18",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     sh_chkwrite",
    "mov     r9d, dword [rel data_168770]",
    "test    r9d, r9d",
    "jne     0xc4ca3",
    "test    rbx, rbx",
    "je      0xc4c92",
    "mov     rsi, r13",
    "mov     rdi, rbx",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xc4b80",
    "add     r14d, 0x1",
    "jmp     0xc4b16",
    "cmp     eax, 0xffffff9d",
    "je      0xc4b58",
    "call    get_all_original_signals",
    "test    r14d, r14d",
    "je      0xc4d23",
    "call    sub_8aa00",
    "mov     rax, qword [rbx+0x8]",
    "mov     r14, qword [rax]",
    "test    r14, r14",
    "je      0xc4dfa",
    "call    builtin_help",
    "jmp     0xc4b3a",
    "call    builtin_usage",
    "xor     ebx, ebx",
    "nop     dword [rax]",
    "lea     rax, [rel posixly_correct]",
    "xor     r14d, r14d",
    "mov     r8d, dword [rax]",
    "test    r8d, r8d",
    "setne   r14b",
    "test    rbx, rbx",
    "je      0xc4d23",
    "mov     r15, qword [rbx]",
    "test    r15, r15",
    "je      0xc4b35",
    "movzx   esi, byte [r14]",
    "test    sil, sil",
    "jne     0xc4e99",
    "mov     r12d, 0x102",
    "mov     edi, ebx",
    "mov     esi, r14d",
    "add     ebx, 0x1",
    "call    sub_bd320",
    "cmp     ebx, 0x44",
    "jne     0xc4d28",
    "mov     edi, r12d",
    "lea     r13, [rel data_133bf8]  {\"%s: invalid signal specification\"}",
    "jmp     0xc4ce2",
    "lea     rdx, [rel subshell_environment]",
    "mov     rdx, r14",
    "mov     eax, esi",
    "jmp     0xc4eac",
    "mov     r15, qword [rbx]",
    "test    r15, r15",
    "je      0xc4b35",
    "mov     rax, qword [rbx+0x8]",
    "mov     esi, 0x3",
    "mov     rdi, qword [rax]",
    "call    decode_signal",
    "cmp     eax, 0xffffffff",
    "jne     0xc4cd0",
    "mov     r13d, 0x2",
    "jmp     0xc4bd4",
    "xor     r13d, r13d",
    "cmp     sil, 0x2d",
    "jne     0xc4bd4",
    "sub     eax, 0x30",
    "cmp     al, 0x9",
    "jbe     0xc4ea0",
    "lea     rdx, [rel subshell_environment]",
    "mov     r13d, 0x2",
    "mov     esi, r14d",
    "mov     edi, eax",
    "call    sub_bd320",
    "mov     rax, qword [rbx+0x8]",
    "mov     edx, 0x5",
    "mov     rsi, r13",
    "xor     edi, edi",
    "mov     r12, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, r12",
    "xor     eax, eax",
    "mov     r12d, 0x1",
    "call    builtin_error",
    "jmp     0xc4cda",
    "test    byte [rdx], 0x80",
    "je      0xc4c00",
    "movzx   eax, byte [r14+0x1]",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "test    al, al",
    "je      0xc4f25",
    "lea     rax, [rel posixly_correct]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0xc4ef6",
    "mov     rax, qword [r15+0x8]",
    "mov     esi, 0x3",
    "mov     rdi, qword [rax]",
    "call    decode_signal",
    "mov     ebx, eax",
    "cmp     eax, 0xffffffff",
    "je      0xc4d60",
    "jmp     0xc4e81",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "je      0xc4d3a",
    "mov     esi, 0x3",
    "mov     rdi, r14",
    "call    decode_signal",
    "cmp     eax, 0xffffffff",
    "je      0xc4ed8",
    "cmp     sil, 0x2d",
    "jne     0xc4e4d",
    "mov     r15, qword [rbx]",
    "test    r15, r15",
    "je      0xc4b35",
    "mov     rax, qword [r15+0x8]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133bf8]  {\"%s: invalid signal specification\"}",
    "xor     edi, edi",
    "mov     r12d, 0x1",
    "mov     rbx, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xc4bf4",
    "cmp     r13d, 0x1",
    "jne     0xc4be0",
    "mov     qword [rbp-0x38], rdx",
    "call    free_trap_strings",
    "mov     rdx, qword [rbp-0x38]",
    "and     dword [rdx], 0xffffff7f",
    "jmp     0xc4c00",
    "lea     rax, [rel posixly_correct]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "jne     0xc4dfa",
    "lea     rdx, [rel subshell_environment]",
    "mov     r15, rbx",
    "mov     r13d, 0x1",
    "jmp     0xc4bd4",
    "mov     esi, 0x3",
    "mov     rdi, r14",
    "call    decode_signal",
    "cmp     eax, 0xffffffff",
    "je      0xc4dfa",
    "movzx   eax, byte [r14+0x1]",
    "test    al, al",
    "jne     0xc4e4d",
    "lea     rdx, [rel subshell_environment]",
    "jmp     0xc4e1a",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0xc4b40",
    "cmp     r13d, 0x2",
    "je      0xc4d50",
    "mov     edi, eax",
    "call    restore_default_signal",
    "cmp     ebx, 0x3",
    "je      0xc4dd0",
    "movzx   esi, byte [r14]",
    "test    sil, sil",
    "je      0xc4bbb",
    "lea     rdx, [rel subshell_environment]",
    "mov     r15, qword [rbx]",
    "mov     eax, dword [rdx]",
    "test    r15, r15",
    "jne     0xc4e0d",
    "mov     r15, qword [rbx]",
    "test    r15, r15",
    "je      0xc4b35",
    "add     rsp, 0x18",
    "mov     eax, r12d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edi, eax",
    "call    ignore_signal",
    "jmp     0xc4bf4",
    "mov     rsi, r14",
    "mov     edi, eax",
    "call    set_signal",
    "mov     esi, 0x1",
    "mov     edi, 0x3",
    "call    set_signal_handler",
    "jmp     0xc4bf4",
    "jg      0xc4d98",
    "movzx   esi, byte [r14]",
    "test    sil, sil",
    "je      0xc4f4c",
    "mov     r15, rbx",
    "mov     r13d, 0x1",
    "test    al, 0x80",
    "je      0xc4c00",
    "lea     rdx, [rel subshell_environment]",
    "jmp     0xc4e2c",
    "cmp     ebx, 0xf",
    "je      0xc4da9",
    "cmp     ebx, 0x2",
    "jne     0xc4bf4",
    "xor     r13d, r13d",
    "test    al, al",
    "sete    r13b",
    "jmp     0xc4bd4",
    "lea     rax, [rel interactive]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0xc4bf4",
    "lea     eax, [rbx-0x14]",
    "cmp     eax, 0x2",
    "ja      0xc4bf4",
    "lea     rax, [rel interactive]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jne     0xc4de4",
    "mov     esi, 0x1",
    "mov     edi, ebx",
    "call    set_signal_handler",
    "jmp     0xc4bf4",
    "lea     rsi, [rel sigint_sighandler]",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "jmp     0xc4bf4",
    "lea     rax, [rel interactive_shell]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0xc4c7c",
    "lea     rsi, [rel termsig_sighandler]",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "jmp     0xc4bf4",
    "lea     rdx, [rel running_trap]",
    "lea     rax, [rel sourcelevel]",
    "mov     eax, dword [rax]",
    "or      eax, dword [rdx]",
    "lea     rdx, [rel parse_and_execute_level]",
    "or      eax, dword [rdx]",
    "jne     0xc4de4"
  ]
}