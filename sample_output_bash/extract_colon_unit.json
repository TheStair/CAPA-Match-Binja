{
  "address": "0x45ca0",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "push    rbx",
    "test    rdi, rdi",
    "je      0x45d70",
    "xor     ebx, ebx",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "mov     r12, rsi",
    "mov     rbx, rdi",
    "call    strlen",
    "mov     edi, dword [r12]",
    "cmp     edi, eax",
    "jge     0x45d70",
    "test    edi, edi",
    "jne     0x45d28",
    "movsxd  rcx, edi",
    "add     rcx, rbx",
    "movzx   eax, byte [rcx]",
    "cmp     al, 0x3a",
    "jne     0x45cd5",
    "movzx   eax, byte [rbx]",
    "mov     rcx, rbx",
    "test    al, al",
    "je      0x45d48",
    "add     edi, 0x1",
    "movsxd  rcx, edi",
    "add     rcx, rbx",
    "movzx   eax, byte [rcx]",
    "jmp     0x45cd5",
    "mov     dword [r12], edi",
    "cmp     al, 0x3a",
    "je      0x45d48",
    "add     edi, 0x1",
    "mov     dword [r12], edi",
    "jmp     0x45d51",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x45d89",
    "movsxd  rax, edi",
    "lea     r8, [rbx+rax+0x1]",
    "mov     rax, r8",
    "nop     dword [rax+rax]",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rbx], 0x0",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "lea     edx, [rdi+0x1]",
    "sub     edx, r8d",
    "add     edx, esi",
    "mov     dword [r12], edx",
    "cmp     edi, edx",
    "je      0x45d4c",
    "cmp     dl, 0x3a",
    "jne     0x45cf0",
    "cmp     byte [rcx], 0x0",
    "jne     0x45d80",
    "mov     esi, edi",
    "mov     rdi, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "jmp     substring",
    "movzx   edx, byte [rax]",
    "mov     rcx, rax",
    "mov     rsi, rax",
    "add     rax, 0x1",
    "test    dl, dl",
    "je      0x45d06"
  ]
}