{
  "address": "0xf3d00",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "encrypt data using XXTEA/8b51ac557ada4334b6544ffbf490740a/6611357b470d4f51a55c8b60d2040800",
    "decrypt data using TEA/b2f1d7a7bfa04984a8dca63866a95e23/65029a7be1a74342926ce5af1066d3d1",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "allocate or change RW memory/b4e5a298cb404535abd304755b86823e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae",
    "encrypt data using TEA/6daa315fd3424f3e9ddc04a16106b42a/a391c789b13342be8944ab433e4f9dba"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15, rdi",
    "push    r14",
    "mov     r14, rcx",
    "push    r13",
    "mov     r13, rdx",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x98",
    "lea     rax, [rel rl_prompt]",
    "mov     qword [rbp-0x78], r8",
    "mov     qword [rbp-0x80], r9",
    "cmp     qword [rax], rdi",
    "mov     qword [rbp-0x48], rdi",
    "sete    al",
    "and     esi, 0x1",
    "cmp     al, sil",
    "je      0xf3d53",
    "call    __ctype_get_mb_cur_max",
    "mov     dword [rbp-0x40], eax",
    "mov     rbx, rax",
    "lea     rax, [rel _rl_screenwidth]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0xf42b8",
    "lea     rax, [rel _rl_show_mode_in_prompt]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xf4070",
    "xor     esi, esi",
    "xor     edi, edi",
    "call    _rl_get_screen_size",
    "jmp     0xf3d6f",
    "mov     rdi, qword [rbp-0x48]",
    "call    strlen",
    "mov     dword [rbp-0x38], eax",
    "mov     r12, rax",
    "cmp     ebx, 0x1",
    "jle     0xf3f80",
    "lea     rax, [rel rl_editing_mode]",
    "mov     ebx, dword [rax]",
    "cmp     ebx, 0x1",
    "je      0xf454b",
    "mov     rdi, qword [rbp-0x48]",
    "mov     esi, 0x1",
    "call    strchr",
    "test    rax, rax",
    "jne     0xf3d98",
    "lea     rax, [rel rl_byte_oriented]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xf3f80",
    "lea     rax, [rel _rl_emacs_mode_str]",
    "mov     r8, qword [rax]",
    "test    r8, r8",
    "je      0xf4609",
    "lea     rax, [rel _rl_keymap]",
    "lea     rsi, [rel vi_insertion_keymap]",
    "cmp     qword [rax], rsi",
    "je      0xf452a",
    "lea     ebx, [r12+0x1]",
    "movsxd  rbx, ebx",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     qword [rbp-0x58], rax",
    "test    rax, rax",
    "je      0xf466a",
    "lea     rax, [rel _rl_screenwidth]",
    "mov     edx, 0x50",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "cmovle  eax, edx",
    "cmp     eax, r12d",
    "jle     0xf3d98",
    "mov     r12d, 0x1",
    "lea     r8, [rel data_120650[4]]  {\"@\"}",
    "jmp     0xf40b9",
    "lea     rax, [rel _rl_emacs_modestr_len]",
    "movsxd  r12, dword [rax]",
    "mov     rbx, r12",
    "jmp     0xf40b9",
    "lea     rax, [rel _rl_vi_ins_mode_str]",
    "mov     r8, qword [rax]",
    "test    r8, r8",
    "je      0xf45b0",
    "lea     rax, [rel _rl_vi_cmd_mode_str]",
    "mov     r8, qword [rax]",
    "test    r8, r8",
    "je      0xf45c7",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel _rl_screenwidth]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "jle     0xf4280",
    "cmp     qword [rbp-0x48], r15",
    "je      0xf461b",
    "mov     rdi, r15",
    "mov     qword [rbp-0x38], r8",
    "call    strlen",
    "lea     ebx, [rbx+rax+0x1]",
    "movsxd  rbx, ebx",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r8, qword [rbp-0x38]",
    "test    rax, rax",
    "mov     qword [rbp-0x48], rax",
    "je      0xf4652",
    "mov     r12d, 0x5",
    "mov     ebx, 0x5",
    "lea     r8, [rel data_1228d6]  {\"(ins)\"}",
    "jmp     0xf40b9",
    "lea     rax, [rel _rl_vi_ins_modestr_len]",
    "movsxd  r12, dword [rax]",
    "mov     rbx, r12",
    "jmp     0xf40b9",
    "mov     r12d, 0x5",
    "mov     ebx, 0x5",
    "lea     r8, [rel data_1228dc]  {\"(cmd)\"}",
    "jmp     0xf40b9",
    "lea     rax, [rel _rl_vi_cmd_modestr_len]",
    "movsxd  r12, dword [rax]",
    "mov     rbx, r12",
    "cmp     r12d, 0x4f",
    "jle     0xf3dcf",
    "cmp     esi, r12d",
    "jle     0xf4038",
    "mov     rdi, r15",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0xf46bb",
    "test    r13, r13",
    "je      0xf3fc6",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdi, qword [rbp-0x48]",
    "mov     rcx, rbx",
    "mov     rdx, r12",
    "mov     rsi, r8",
    "call    __memcpy_chk",
    "cmp     rbx, r12",
    "mov     rax, qword [rbp-0x48]",
    "mov     rsi, r15",
    "cmovb   rbx, r12",
    "lea     rdi, [rax+r12]",
    "mov     rdx, rbx",
    "sub     rdx, r12",
    "call    __strcpy_chk",
    "jmp     0xf3d53",
    "mov     ebx, 0x8",
    "mov     r12d, 0x1",
    "movsxd  rax, r12d",
    "mov     ecx, r12d",
    "imul    rax, rax, 0x66666667",
    "sar     ecx, 0x1f",
    "sar     rax, 0x25",
    "sub     eax, ecx",
    "lea     ebx, [rax+0x2]",
    "lea     r12d, [rax+0x1]",
    "movsxd  rbx, ebx",
    "shl     rbx, 0x2",
    "jmp     0xf3dda",
    "mov     eax, dword [rbp-0x38]",
    "mov     rdi, qword [rel data_16a740]",
    "cdq     ",
    "idiv    esi",
    "lea     ebx, [rax+0x2]",
    "lea     r12d, [rax+0x1]",
    "movsxd  rbx, ebx",
    "shl     rbx, 0x2",
    "test    rdi, rdi",
    "jne     0xf3dea",
    "mov     qword [rbp-0x38], rax",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, rbx",
    "mov     rsi, r15",
    "mov     rdi, rcx",
    "call    __strcpy_chk",
    "mov     qword [rbp-0x48], rax",
    "jmp     0xf3fbd",
    "test    r14, r14",
    "je      0xf3fd2",
    "mov     dword [r13], r12d",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     qword [rbp-0x50], rax",
    "jmp     0xf3df6",
    "mov     rsi, rbx",
    "call    realloc",
    "mov     qword [rbp-0x50], rax",
    "mov     rdi, qword [rel data_16a740]",
    "test    rdi, rdi",
    "je      0xf405c",
    "mov     rax, qword [rbp-0x78]",
    "test    rax, rax",
    "je      0xf3fe1",
    "mov     dword [r14], 0x0",
    "mov     rax, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0xf467e",
    "xor     eax, eax",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rel data_16a740], rax",
    "mov     edx, r12d",
    "lea     rdi, [rax+0x4]",
    "mov     esi, 0xff",
    "mov     dword [rax], 0x0",
    "shl     rdx, 0x2",
    "call    memset",
    "mov     rax, qword [rbp-0x48]",
    "movzx   eax, byte [rax]",
    "test    al, al",
    "je      0xf44c0",
    "mov     rax, qword [rbp-0x80]",
    "test    rax, rax",
    "je      0xf3fed",
    "mov     dword [rax], 0x0",
    "mov     dword [rbp-0x3c], 0x0",
    "mov     r12, qword [rbp-0x58]",
    "xor     r10d, r10d",
    "xor     r9d, r9d",
    "mov     dword [rbp-0x6c], 0x0",
    "mov     dword [rbp-0x5c], 0x0",
    "jmp     0xf4180",
    "xor     r10d, r10d",
    "mov     qword [rbp-0x98], r14",
    "xor     r11d, r11d",
    "xor     r9d, r9d",
    "mov     dword [rbp-0x60], 0x0",
    "mov     rbx, qword [rbp-0x48]",
    "xor     r8d, r8d",
    "mov     r14d, r10d",
    "mov     dword [rbp-0x38], 0x0",
    "mov     r12, qword [rbp-0x58]",
    "mov     dword [rbp-0x3c], 0x0",
    "mov     dword [rbp-0x6c], 0x0",
    "mov     dword [rbp-0x5c], 0x0",
    "mov     qword [rbp-0x68], 0x0",
    "mov     qword [rbp-0x88], r15",
    "mov     qword [rbp-0x90], r13",
    "jmp     0xf3f31",
    "mov     rdi, qword [rel data_16a740]",
    "test    rdi, rdi",
    "je      0xf45f7",
    "mov     dword [rax], r12d",
    "lea     rsi, [rel _rl_screenwidth]",
    "mov     eax, dword [rbp-0x5c]",
    "mov     byte [r12], 0x0",
    "cmp     eax, dword [rsi]",
    "cmovg   r9d, dword [rbp-0x3c]",
    "test    r13, r13",
    "je      0xf419f",
    "test    r8d, r8d",
    "je      0xf3e90",
    "mov     edi, 0x8",
    "call    malloc",
    "mov     rbx, rax",
    "jmp     0xf400a",
    "mov     esi, 0x8",
    "call    realloc",
    "mov     rbx, rax",
    "test    r14, r14",
    "je      0xf41aa",
    "mov     dword [r13], eax",
    "cmp     al, 0x1",
    "je      0xf41f0",
    "cmp     al, 0x2",
    "je      0xf4210",
    "test    rbx, rbx",
    "je      0xf46a3",
    "mov     esi, 0x8",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rel data_136560]",
    "mov     qword [rel data_16a740], rbx",
    "mov     qword [rbx], rax",
    "mov     rax, qword [rbp-0x48]",
    "mov     qword [rbp-0x58], rax",
    "jmp     0xf41d3",
    "mov     rax, qword [rbp-0x78]",
    "test    rax, rax",
    "je      0xf41b6",
    "mov     eax, dword [rbp-0x6c]",
    "mov     dword [r14], eax",
    "mov     qword [rbp-0x68], rbx",
    "mov     r15, rbx",
    "mov     r8d, 0x1",
    "add     rbx, 0x1",
    "jmp     0xf3f24",
    "cmp     dword [rbp-0x40], 0x1",
    "jle     0xf3eaf",
    "mov     r15d, dword [rbp-0x60]",
    "test    r15d, r15d",
    "je      0xf4244",
    "cmp     dword [rbp-0x40], 0x1",
    "jle     0xf3f5b",
    "mov     rax, qword [rbp-0x58]",
    "add     rsp, 0x98",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbp-0x80]",
    "test    rax, rax",
    "je      0xf41c2",
    "mov     dword [rax], r9d",
    "movzx   eax, byte [r15+0x1]",
    "test    al, al",
    "je      0xf4168",
    "add     dword [rbp-0x5c], 0x1",
    "lea     rdx, [r12+0x1]",
    "mov     r15, rbx",
    "add     r14d, 0x1",
    "mov     byte [r12], al",
    "add     rbx, 0x1",
    "mov     r12, rdx",
    "lea     rcx, [rel rl_byte_oriented]",
    "mov     edi, dword [rcx]",
    "test    edi, edi",
    "je      0xf42d0",
    "mov     rsi, qword [rbp-0x68]",
    "lea     rax, [rbx+0x1]",
    "lea     rdx, [rsi+0x1]",
    "cmp     rbx, rdx",
    "je      0xf44b0",
    "mov     rsi, qword [rbp-0x58]",
    "mov     rcx, qword [rbp-0x50]",
    "mov     rdx, r12",
    "movsxd  rax, r11d",
    "sub     rdx, rsi",
    "mov     dword [rcx+rax*4], edx",
    "cmp     r11d, 0x1",
    "jne     0xf4244",
    "lea     rdx, [r12+0x1]",
    "mov     byte [r12], al",
    "mov     r15, rbx",
    "add     r9d, 0x1",
    "add     rbx, 0x1",
    "mov     r12, rdx",
    "jmp     0xf3eca",
    "lea     rdx, [rel rl_byte_oriented]",
    "mov     r10d, dword [rdx]",
    "test    r10d, r10d",
    "je      0xf4408",
    "mov     rax, qword [rbp-0x48]",
    "cmp     rax, r15",
    "je      0xf41d3",
    "mov     dword [rax], r10d",
    "mov     r10d, r14d",
    "mov     r15, qword [rbp-0x88]",
    "mov     r13, qword [rbp-0x90]",
    "mov     r14, qword [rbp-0x98]",
    "lea     ecx, [r11+0x1]",
    "imul    r13d, ecx",
    "cmp     r14d, r13d",
    "jl      0xf3f14",
    "mov     eax, dword [rbp-0x3c]",
    "cmp     r14d, r13d",
    "cmovge  eax, r9d",
    "mov     dword [rbp-0x3c], eax",
    "setge   al",
    "movzx   eax, al",
    "mov     dword [rbp-0x38], eax",
    "mov     rdi, qword [rbp-0x48]",
    "mov     r13, rbx",
    "mov     ecx, 0x1",
    "mov     dword [rbp-0x70], r11d",
    "mov     edx, 0x1",
    "mov     dword [rbp-0xa8], r9d",
    "sub     r13, rdi",
    "mov     dword [rbp-0xa0], r8d",
    "mov     esi, r13d",
    "mov     dword [rbp-0xac], r13d",
    "call    sub_107460",
    "mov     r8d, dword [rbp-0xa0]",
    "mov     r9d, dword [rbp-0xa8]",
    "mov     ecx, eax",
    "mov     r11d, dword [rbp-0x70]",
    "sub     ecx, r13d",
    "je      0xf45e7",
    "mov     r15, rbx",
    "xor     r8d, r8d",
    "mov     rbx, rax",
    "jmp     0xf3f24",
    "mov     rcx, qword [rbp-0x58]",
    "mov     rdx, r12",
    "mov     r15, rbx",
    "xor     r8d, r8d",
    "mov     rbx, rax",
    "sub     rdx, rcx",
    "lea     ecx, [rdx-0x1]",
    "mov     dword [rbp-0x6c], ecx",
    "jmp     0xf3f24",
    "mov     r13d, dword [rbp-0x38]",
    "mov     eax, dword [rbp-0x3c]",
    "test    r13d, r13d",
    "cmovne  eax, r9d",
    "mov     dword [rbp-0x3c], eax",
    "lea     rax, [rel _rl_screenwidth]",
    "mov     ecx, dword [rbp-0x38]",
    "mov     r13d, dword [rax]",
    "test    ecx, ecx",
    "jne     0xf3ef1",
    "mov     rdi, qword [rbp-0x48]",
    "mov     r13, rbx",
    "mov     ecx, 0x1",
    "mov     dword [rbp-0x70], r11d",
    "mov     edx, 0x1",
    "mov     dword [rbp-0xa8], r9d",
    "sub     r13, rdi",
    "mov     dword [rbp-0xa0], r8d",
    "mov     esi, r13d",
    "call    sub_107460",
    "mov     r8d, dword [rbp-0xa0]",
    "mov     r9d, dword [rbp-0xa8]",
    "sub     eax, r13d",
    "mov     r11d, dword [rbp-0x70]",
    "mov     ecx, eax",
    "lea     r15d, [rax-0x1]",
    "je      0xf45de",
    "mov     rdi, rax",
    "call    free",
    "test    r8d, r8d",
    "jne     0xf3f24",
    "mov     rdi, qword [rbp-0x50]",
    "movsxd  rax, r11d",
    "lea     r10, [rdi+rax*4+0x4]",
    "cmp     dword [r10], 0xffffffff",
    "je      0xf4120",
    "mov     qword [rbp-0xa0], rbx",
    "lea     r15, [rbx-0x1]",
    "jmp     0xf43f6",
    "lea     r15d, [rcx-0x1]",
    "mov     rdi, r12",
    "mov     rsi, rbx",
    "mov     dword [rbp-0xa8], ecx",
    "lea     rdx, [r15+0x1]",
    "mov     dword [rbp-0x70], eax",
    "add     r15, rbx",
    "mov     dword [rbp-0xb8], r11d",
    "mov     dword [rbp-0xb4], r9d",
    "mov     dword [rbp-0xb0], r8d",
    "mov     qword [rbp-0xa0], rdx",
    "call    memcpy",
    "mov     rdx, qword [rbp-0xa0]",
    "mov     r10d, dword [rbp-0x70]",
    "mov     ecx, dword [rbp-0xa8]",
    "add     dword [rbp-0x5c], ecx",
    "add     r12, rdx",
    "lea     rax, [rbx+rdx]",
    "cmp     r10d, r13d",
    "mov     r8d, dword [rbp-0xb0]",
    "mov     qword [rbp-0xa0], rax",
    "mov     r9d, dword [rbp-0xb4]",
    "mov     r11d, dword [rbp-0xb8]",
    "jle     0xf43f6",
    "lea     r15, [rbx-0x1]",
    "jmp     0xf44a2",
    "lea     r13, [r15+0x1]",
    "mov     rsi, rbx",
    "mov     rdi, r12",
    "mov     dword [rbp-0x70], r9d",
    "mov     rdx, r13",
    "mov     dword [rbp-0xac], r11d",
    "add     r15, rbx",
    "add     r12, r13",
    "mov     dword [rbp-0xa8], r8d",
    "add     rbx, r13",
    "mov     dword [rbp-0xa0], eax",
    "call    memcpy",
    "mov     ecx, dword [rbp-0xa0]",
    "mov     r9d, dword [rbp-0x70]",
    "mov     r8d, dword [rbp-0xa8]",
    "mov     r11d, dword [rbp-0xac]",
    "xor     eax, eax",
    "cmp     r14d, r13d",
    "sete    al",
    "mov     dword [rbp-0x60], eax",
    "mov     rsi, qword [rbp-0x58]",
    "mov     rax, r12",
    "sub     rax, rsi",
    "mov     esi, eax",
    "cmp     r14d, r13d",
    "jle     0xf4157",
    "mov     rbx, qword [rbp-0xa0]",
    "jmp     0xf3eca",
    "mov     dword [rbp-0xb8], r11d",
    "mov     dword [rbp-0xb4], r9d",
    "mov     dword [rbp-0xb0], r8d",
    "mov     dword [rbp-0x70], r10d",
    "mov     dword [rbp-0xa8], ecx",
    "call    __ctype_get_mb_cur_max",
    "mov     ecx, dword [rbp-0xa8]",
    "mov     r10d, dword [rbp-0x70]",
    "cmp     rax, 0x1",
    "mov     r8d, dword [rbp-0xb0]",
    "mov     r9d, dword [rbp-0xb4]",
    "mov     r11d, dword [rbp-0xb8]",
    "je      0xf43f3",
    "add     r9d, ecx",
    "jmp     0xf3eca",
    "mov     dword [r10], esi",
    "mov     r11d, ecx",
    "jmp     0xf3f14",
    "cmp     dword [rbp-0x40], 0x1",
    "mov     byte [r12], 0x0",
    "jle     0xf414d",
    "add     r14d, ecx",
    "lea     rax, [rel rl_byte_oriented]",
    "mov     esi, dword [rax]",
    "test    esi, esi",
    "je      0xf4570",
    "mov     edx, r14d",
    "mov     esi, eax",
    "sub     edx, r13d",
    "sub     esi, edx",
    "lea     rdx, [rel rl_byte_oriented]",
    "mov     edx, dword [rdx]",
    "test    edx, edx",
    "je      0xf44e8",
    "mov     esi, dword [rbp-0xac]",
    "mov     rdi, qword [rbp-0x48]",
    "xor     ecx, ecx",
    "mov     edx, r10d",
    "mov     dword [rbp-0xb0], r11d",
    "mov     dword [rbp-0x70], r9d",
    "mov     dword [rbp-0xa8], r8d",
    "call    sub_f9f10",
    "mov     r11d, dword [rbp-0xb0]",
    "mov     r9d, dword [rbp-0x70]",
    "mov     r8d, dword [rbp-0xa8]",
    "add     r14d, eax",
    "jmp     0xf43f6",
    "mov     rdi, qword [rbp-0x58]",
    "xor     edx, edx",
    "mov     dword [rbp-0x70], r8d",
    "mov     dword [rbp-0xac], r9d",
    "mov     qword [rbp-0xa8], r10",
    "mov     dword [rbp-0xa0], ecx",
    "call    _rl_find_prev_mbchar_internal",
    "mov     ecx, dword [rbp-0xa0]",
    "mov     r8d, dword [rbp-0x70]",
    "mov     r10, qword [rbp-0xa8]",
    "mov     r9d, dword [rbp-0xac]",
    "mov     esi, eax",
    "jmp     0xf4157"
  ]
}