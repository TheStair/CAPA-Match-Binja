{
  "address": "0x7aee0",
  "rules": [
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x38",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x28], rax",
    "xor     eax, eax",
    "movzx   eax, byte [rdi+0x1]",
    "test    al, al",
    "je      0x7b080",
    "lea     rax, [rel posparam_count]",
    "movsxd  rax, dword [rax]",
    "mov     rbx, rdi",
    "cmp     al, 0x40",
    "je      0x7af50",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "cmp     byte [rbx+0x2], 0x0",
    "je      0x7b080",
    "cmp     al, 0x2a",
    "je      0x7af50",
    "lea     r12, [rbx+0x1]",
    "xor     edx, edx",
    "xor     esi, esi",
    "mov     rdi, r12",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0x7b0b0",
    "lea     rcx, [rel sh_syntaxtab]",
    "movzx   edx, al",
    "test    byte [rcx+rdx*4+0x1], 0x8",
    "je      0x7af5a",
    "lea     rsi, [rbp-0x30]",
    "mov     rdi, r12",
    "call    legal_number",
    "test    eax, eax",
    "je      0x7b210",
    "lea     rcx, [rbp-0x34]",
    "lea     rdx, [rbp-0x30]",
    "xor     esi, esi",
    "mov     rdi, r12",
    "call    array_variable_name",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7b198",
    "cmp     byte [rdi+0x2], 0x0",
    "jne     0x7af5a",
    "mov     rdi, r12",
    "call    find_variable",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x7b348",
    "mov     rdi, qword [rbp-0x30]",
    "call    get_dollar_var_value",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x7b178",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0x7b18e",
    "mov     rdi, rax",
    "call    find_variable",
    "mov     rdi, rbx",
    "mov     r13, rax",
    "call    free",
    "test    r13, r13",
    "je      0x7b198",
    "sub     eax, 0x21",
    "cmp     al, 0x1e",
    "ja      0x7b130",
    "mov     rdi, r12",
    "call    find_variable",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x7b6d9",
    "mov     eax, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    ah, 0x10",
    "jne     0x7b35f",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x7b786",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "mov     eax, 0x0",
    "jbe     0x7b570",
    "xor     eax, eax",
    "jmp     0x7b08a",
    "mov     rax, qword [rbp-0x30]",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_158490]",
    "lea     rdx, [rax-0x1]",
    "mov     qword [rbp-0x30], rdx",
    "movzx   ebx, byte [rax-0x1]",
    "mov     byte [rax-0x1], 0x0",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rel data_158490], 0x1",
    "mov     dword [rax], 0x1",
    "call    set_pipestatus_array",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x12029b]  {\"%s: unbound variable\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    report_error",
    "mov     rax, qword [rbp-0x30]",
    "mov     byte [rax], bl",
    "mov     eax, dword [r13+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    ah, 0x10",
    "jne     0x7b198",
    "{Case 0x1, 0x4-0x8, 0xa-0xb, 0xd-0x1d}",
    "test    r12, r12",
    "je      0x7b18e",
    "lea     rdx, [rel jump_table_136a28]",
    "movzx   eax, al",
    "movsxd  rax, dword [rdx+rax*4]",
    "add     rax, rdx",
    "jmp     rax",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x7b36a",
    "mov     eax, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    eax, 0x1044",
    "je      0x7b508",
    "test    al, 0x44",
    "je      0x7b508",
    "mov     eax, 0x1",
    "shl     rax, 0x3f",
    "jmp     0x7b08a",
    "call    __ctype_get_mb_cur_max",
    "cmp     byte [rbx], 0x0",
    "je      0x7b108",
    "cmp     byte [rbx], 0x0",
    "je      0x7b108",
    "mov     rdx, qword [rbp-0x28]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x7b794",
    "test    al, 0x44",
    "je      0x7b2a0",
    "xor     eax, eax",
    "cmp     byte [r12], 0x0",
    "je      0x7b160",
    "{Case 0x2}",
    "lea     rax, [rel posparam_count]",
    "{Case 0x1e}",
    "lea     rax, [rel last_command_exit_value]",
    "movsxd  rdi, dword [rax]",
    "call    itos",
    "mov     r12, rax",
    "jmp     0x7b130",
    "{Case 0xc}",
    "call    which_set_flags",
    "mov     r12, rax",
    "jmp     0x7b130",
    "{Case 0x3}",
    "lea     rax, [rel dollar_dollar_pid]",
    "movsxd  rdi, dword [rax]",
    "call    itos",
    "mov     r12, rax",
    "jmp     0x7b130",
    "{Case 0x0}",
    "lea     rax, [rel last_asynchronous_pid]",
    "mov     edx, dword [rax]",
    "cmp     edx, 0xffffffff",
    "jne     0x7b124",
    "mov     rdi, rbx",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x7b799",
    "xor     eax, eax",
    "jmp     0x7b08a",
    "cmp     qword [r13+0x18 {Elf64_Header::entry}], 0x0",
    "jne     0x7b36a",
    "mov     rdi, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    al, 0x40",
    "je      0x7b657",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x48], rax",
    "call    free",
    "mov     rax, qword [rbp-0x48]",
    "jmp     0x7b08a",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x7b108",
    "cmp     byte [rbx+0x1], 0x0",
    "mov     eax, 0x1",
    "jne     0x7b697",
    "lea     rax, [rel unbound_vars_is_error]",
    "mov     edi, dword [rax]",
    "test    edi, edi",
    "jne     0x7b1a5",
    "mov     edi, eax",
    "and     edi, 0x4",
    "je      0x7b690",
    "mov     rdi, r12",
    "mov     qword [rbp-0x48], rax",
    "call    free",
    "mov     rax, qword [rbp-0x48]",
    "jmp     0x7b08a",
    "cmp     byte [r12+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x7b160",
    "movsxd  rdi, dword [rax]",
    "call    itos",
    "mov     r12, rax",
    "nop     ",
    "xor     eax, eax",
    "jmp     0x7b08a",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r12",
    "mov     rsi, rbx",
    "mov     rdi, r13",
    "mov     rbx, r13",
    "call    __strcpy_chk",
    "mov     byte [r13], 0x24",
    "mov     esi, 0x1",
    "mov     rdi, r13",
    "call    expand_string",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x7b560",
    "cmp     qword [r13+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "je      0x7b18e",
    "xor     esi, esi",
    "call    array_reference",
    "mov     rbx, rax",
    "jmp     0x7b26b",
    "test    rdi, rdi",
    "je      0x7b178",
    "cmp     byte [rbx+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x7b108",
    "mov     rdi, rbx",
    "call    mbstrlen",
    "jmp     0x7b108",
    "nop     dword [rax]",
    "mov     rsi, qword [rbp-0x30]",
    "movzx   eax, byte [rsi]",
    "cmp     al, 0x40",
    "sete    dl",
    "cmp     al, 0x2a",
    "sete    al",
    "xor     ebx, ebx",
    "or      edx, eax",
    "xor     ebx, ebx",
    "jmp     0x7afd5",
    "mov     rbx, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     edi, 0x4",
    "cmp     byte [r12+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x7b160",
    "mov     rdi, r13",
    "call    free",
    "xor     eax, eax",
    "jmp     0x7b08a",
    "lea     rsi, [rel data_1204ae[4]]  {\" \"}",
    "mov     rdi, rax",
    "call    string_list_internal",
    "mov     rdi, rbx",
    "mov     r13, rax",
    "call    free",
    "mov     rdi, r12",
    "call    dispose_words",
    "test    r13, r13",
    "je      0x7b18e",
    "call    __ctype_get_mb_cur_max",
    "mov     rdi, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "cmp     rax, 0x1",
    "jbe     0x7b70b",
    "test    rbx, rbx",
    "je      0x7b178",
    "xor     edx, edx",
    "mov     rsi, rdi",
    "lea     rdi, [rel data_121b60]  {\"0\"}",
    "call    hash_search",
    "test    rax, rax",
    "je      0x7b178",
    "mov     rdi, rbx",
    "call    strlen",
    "jmp     0x7b108",
    "cmp     byte [rsi+0x1], 0x5d",
    "jne     0x7b2ce",
    "mov     edx, dword [rbp-0x34]",
    "xor     ecx, ecx",
    "mov     rdi, r13",
    "call    array_expand_index",
    "mov     rsi, rax",
    "test    byte [r13+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0x7b5a8",
    "mov     rsi, qword [rbp-0x30]",
    "movzx   ecx, byte [rsi]",
    "cmp     cl, 0x40",
    "sete    dl",
    "cmp     cl, 0x2a",
    "sete    cl",
    "or      edx, ecx",
    "test    al, 0x40",
    "je      0x7b2c6",
    "test    dl, dl",
    "jne     0x7b428",
    "test    dl, dl",
    "jne     0x7b450",
    "mov     rdi, r12",
    "call    strlen",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "mov     eax, 0x0",
    "jbe     0x7b5d0",
    "test    rdi, rdi",
    "je      0x7b18e",
    "test    rdi, rdi",
    "je      0x7b18e",
    "call    __ctype_get_mb_cur_max",
    "cmp     rax, 0x1",
    "jbe     0x7b6b3",
    "mov     rbx, qword [rax+0x10]",
    "test    edi, edi",
    "je      0x7b6a4",
    "test    rax, rax",
    "js      0x7b67b",
    "test    rax, rax",
    "js      0x7b666",
    "cmp     byte [rsi+0x1], 0x5d",
    "jne     0x7affa",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     byte [rsi+rax-0x1], 0x0",
    "mov     rdi, qword [rbp-0x30]",
    "test    rdi, rdi",
    "je      0x7b6f1",
    "cmp     byte [r13], 0x0",
    "je      0x7b410",
    "cmp     byte [r13], 0x0",
    "je      0x7b410",
    "cmp     byte [rdi], 0x0",
    "je      0x7b18e",
    "cmp     byte [rdi], 0x0",
    "je      0x7b18e",
    "cmp     byte [rbx], 0x0",
    "je      0x7b18e",
    "cmp     byte [rbx], 0x0",
    "je      0x7b18e",
    "xor     eax, eax",
    "cmp     qword [r13+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "setne   al",
    "jmp     0x7b08a",
    "test    rbx, rbx",
    "je      0x7b18e",
    "mov     rdi, qword [rbp-0x30]",
    "call    err_badarraysub",
    "jmp     0x7b207",
    "je      0x7b5c0",
    "mov     rax, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     rax, qword [rax]",
    "lea     rsi, [rsi+rax+0x1]",
    "test    rsi, rsi",
    "jns     0x7b2f2",
    "mov     rdi, rbx",
    "call    array_reference",
    "mov     qword [rbp-0x30], rax",
    "nop     ",
    "mov     rax, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rax, rax",
    "je      0x7b18e",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     byte [rax-0x1], 0x5d",
    "jmp     0x7b619",
    "cmp     byte [rdi], 0x0",
    "je      0x7b610",
    "mov     rdi, r13",
    "mov     qword [rbp-0x48], rax",
    "call    free",
    "mov     rax, qword [rbp-0x48]",
    "jmp     0x7b08a",
    "cmp     byte [r13+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x7b410",
    "cmp     byte [r13+0x1], 0x0",
    "mov     eax, 0x1",
    "jne     0x7b6fe",
    "cmp     byte [rdi+0x1], 0x0",
    "je      0x7b296",
    "cmp     byte [rdi+0x1], 0x0",
    "je      0x7b296",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x7b296",
    "cmp     byte [rbx+0x1], 0x0",
    "jne     0x7b737",
    "mov     rax, qword [rbx+0x8]",
    "jmp     0x7b08a",
    "or      rax, 0xffffffffffffffff",
    "jmp     0x7b08a",
    "mov     rax, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "jmp     0x7b5b5",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0x7b08a",
    "test    rdi, rdi",
    "je      0x7b08a",
    "movsxd  rax, dword [rax+0xc]",
    "jmp     0x7b08a",
    "mov     rbx, qword [rbp-0x30]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120287]  {\"bad array subscript\"}",
    "call    dcgettext",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "mov     rsi, rbx",
    "xor     eax, eax",
    "call    report_error",
    "jmp     0x7b207",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     byte [rdi+rax-0x1], 0x5d",
    "xor     esi, esi",
    "call    sub_8c420",
    "mov     rdx, qword [rbp-0x30]",
    "mov     rbx, rax",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     byte [rdx+rax-0x1], 0x5d",
    "test    rbx, rbx",
    "je      0x7b619",
    "cmp     byte [r13+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x7b410",
    "mov     rdi, r13",
    "call    mbstrlen",
    "jmp     0x7b410",
    "nop     ",
    "mov     eax, 0x1",
    "jmp     0x7b08a",
    "cmp     byte [rdi+0x2], 0x0",
    "je      0x7b744",
    "call    mbstrlen",
    "jmp     0x7b08a",
    "cmp     byte [rbx+0x2], 0x0",
    "je      0x7b744",
    "mov     rdi, rbx",
    "call    mbstrlen",
    "jmp     0x7b08a",
    "mov     qword [rbp-0x30], rax",
    "jmp     0x7b300",
    "call    __ctype_get_mb_cur_max",
    "mov     rdi, qword [rbp-0x30]",
    "cmp     rax, 0x1",
    "mov     eax, 0x0",
    "jbe     0x7b4c8",
    "cmp     byte [rdi], 0x0",
    "je      0x7b08a",
    "cmp     byte [rdi], 0x0",
    "je      0x7b08a",
    "cmp     byte [rbx], 0x0",
    "je      0x7b74e",
    "mov     rdi, r13",
    "call    strlen",
    "jmp     0x7b410",
    "mov     eax, 0x2",
    "jmp     0x7b08a",
    "call    strlen",
    "jmp     0x7b08a",
    "mov     rdi, rbx",
    "call    strlen",
    "jmp     0x7b08a",
    "cmp     byte [rdi+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x7b08a",
    "cmp     byte [rdi+0x1], 0x0",
    "mov     eax, 0x1",
    "je      0x7b08a",
    "mov     r12, qword [rbp-0x30]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_120287]  {\"bad array subscript\"}",
    "call    dcgettext",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "mov     rsi, r12",
    "xor     eax, eax",
    "call    report_error",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x7b207",
    "mov     rsi, qword [r13+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    rsi, rsi",
    "je      0x7b650",
    "cmp     byte [rdi+0x2], 0x0",
    "mov     eax, 0x2",
    "je      0x7b08a",
    "call    mbstrlen",
    "cdqe    ",
    "jmp     0x7b08a",
    "xor     eax, eax",
    "jmp     0x7b066",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "call    hash_search",
    "test    rax, rax",
    "je      0x7b650",
    "call    strlen",
    "cdqe    ",
    "jmp     0x7b08a",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x30], rax",
    "call    free",
    "jmp     0x7b300",
    "mov     rax, qword [rax+0x10]"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}