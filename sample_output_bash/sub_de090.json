{
  "address": "0xde090",
  "rules": [
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/37fcdffa79f84274a0a7280c1c8f403a",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/2595307ea71d425c8c0b4e2392af2cf7",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/ba22e5cbb4214cdaa9e658605c2a045c",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "decompress data using LZO/092a7ec81c914a2c8dcd8934990c5995",
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data using aphash/ef28217586414e46ab1e9ea5fafa8c30",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/71ff62d8869d418e88d129a8b5fcc11b",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/811ca4c4f8d549569ea2aaef177bf1ac",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/e07fefb4fc9348cdbcc471f43936d29f",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "encrypt data using RC4 KSA/89b7ba675fcb4f4eac2317f83c0a9436",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/19c5b9e7682744d8b574f82a4f55cf68",
    "allocate or change RW memory/b4e5a298cb404535abd304755b86823e",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/03953aa079f14ec384dfb3745989fa21"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "mov     r12d, esi",
    "push    rbx",
    "mov     rbx, r8",
    "lea     r12d, [r12*4+0x4]",
    "sub     rsp, 0x48",
    "mov     dword [rbp-0x50], edx",
    "mov     qword [rbp-0x68], rcx",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    __ctype_get_mb_cur_max",
    "mov     dword [rbp-0x4c], eax",
    "mov     eax, 0xc",
    "cmp     r12d, eax",
    "cmovl   r12d, eax",
    "movsxd  r12, r12d",
    "mov     rdi, r12",
    "call    malloc",
    "mov     qword [rbp-0x60], rax",
    "test    rax, rax",
    "je      0xde7cd",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "test    r13, r13",
    "je      0xde74a",
    "mov     rax, qword [rbp-0x60]",
    "jmp     0xde2a5",
    "movzx   r14d, byte [r13]",
    "mov     r15, qword [rbp-0x60]",
    "nop     word [rax+rax]",
    "mov     byte [rax], 0x0",
    "test    rbx, rbx",
    "je      0xde2b6",
    "mov     rax, r15",
    "jmp     0xde2a5",
    "lea     r8, [r13+0x1]",
    "cmp     r14b, 0x5c",
    "jne     0xde1f0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xde7c8",
    "mov     rsi, qword [rbp-0x60]",
    "sub     rax, rsi",
    "mov     dword [rbx], eax",
    "lea     rax, [rel locale_utf8locale]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0xde250",
    "movzx   ecx, byte [r13+0x1]",
    "test    cl, cl",
    "je      0xde290",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x60]",
    "add     rsp, 0x48",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, dword [rbp-0x4c]",
    "lea     r9, [r15+0x1]",
    "test    eax, eax",
    "jle     0xde277",
    "lea     r9, [r15+0x1]",
    "test    r14b, r14b",
    "jns     0xde277",
    "lea     rax, [rel locale_utf8locale]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0xde250",
    "lea     eax, [rcx-0x22]",
    "lea     rdx, [r13+0x2]",
    "movsx   esi, cl",
    "cmp     al, 0x56",
    "ja      0xde178",
    "mov     byte [r15], r14b",
    "movzx   r14d, byte [r13+0x1]",
    "mov     r15, r9",
    "mov     r13, r8",
    "jmp     0xde110",
    "mov     eax, r14d",
    "lea     rdx, [rel is_basic_table]",
    "mov     ecx, r14d",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0xde206",
    "movsxd  rdx, dword [rbp-0x4c]",
    "xor     ecx, ecx",
    "lea     rdi, [rbp-0x3c]",
    "mov     rsi, r13",
    "mov     qword [rbp-0x58], r9",
    "mov     qword [rbp-0x48], r8",
    "call    mbrtowc",
    "mov     r8, qword [rbp-0x48]",
    "mov     r9, qword [rbp-0x58]",
    "mov     byte [r15], r14b",
    "cmp     rax, 0xfffffffffffffffd",
    "mov     r12, rax",
    "jbe     0xde2e0",
    "mov     byte [r15], 0x5c",
    "lea     rax, [r15+0x1]",
    "{Case 0x1-0x4, 0x6-0xd, 0x16-0x1c, 0x1e-0x22, 0x24-0x32, 0x34-0x39, 0x3b-0x3e, 0x42, 0x45-0x4b, 0x4d-0x4f, 0x51, 0x55}",
    "movzx   r12d, byte [r13+0x2]",
    "lea     rdi, [rel jump_table_1386e4]",
    "movzx   eax, al",
    "movsxd  rax, dword [rdi+rax*4]",
    "add     rax, rdi",
    "jmp     rax",
    "test    r14b, r14b",
    "je      0xde1df",
    "mov     rdx, rax",
    "sub     rdx, 0x1",
    "je      0xde238",
    "movzx   r14d, byte [r13+0x1]",
    "mov     r15, r9",
    "mov     r13, r8",
    "jmp     0xde110",
    "mov     byte [r15], 0x5c",
    "mov     r14d, r12d",
    "mov     r13, rdx",
    "add     r15, 0x1",
    "test    r8d, r8d",
    "jne     0xde19e",
    "mov     r14d, r12d",
    "mov     r13, rdx",
    "{Case 0x41}",
    "cmp     qword [rbp-0x68], 0x0",
    "jne     0xde79f",
    "{Case 0x0, 0x5, 0x1d}",
    "test    byte [rbp-0x50], 0x1",
    "jne     0xde319",
    "{Case 0x3a}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "nop     dword [rax+rax]",
    "{Case 0xf-0x15}",
    "mov     eax, dword [rbp-0x50]",
    "and     eax, 0x1",
    "je      0xde529",
    "{Case 0x33, 0x53}",
    "xor     r12d, r12d",
    "cmp     esi, 0x75",
    "mov     byte [rbp-0x58], cl",
    "setne   r12b",
    "mov     qword [rbp-0x48], rdx",
    "call    __ctype_b_loc",
    "mov     rdx, qword [rbp-0x48]",
    "movzx   ecx, byte [rbp-0x58]",
    "xor     edi, edi",
    "lea     r12d, [r12*4+0x4]",
    "mov     r8, qword [rax]",
    "mov     esi, r12d",
    "jmp     0xde38c",
    "{Case 0x23, 0x43}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0x1b",
    "jmp     0xde1d0",
    "{Case 0x54}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0xb",
    "jmp     0xde1d0",
    "{Case 0x52}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0x9",
    "jmp     0xde1d0",
    "{Case 0x40}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0x8",
    "jmp     0xde1d0",
    "{Case 0x3f}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0x7",
    "jmp     0xde1d0",
    "{Case 0x50}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0xd",
    "jmp     0xde1d0",
    "{Case 0x4c}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0xa",
    "jmp     0xde1d0",
    "{Case 0x44}",
    "movzx   r14d, byte [r13+0x2]",
    "mov     rax, r15",
    "mov     r13, rdx",
    "mov     ecx, 0xc",
    "jmp     0xde1d0",
    "{Case 0x56}",
    "mov     eax, dword [rbp-0x50]",
    "test    al, 0x2",
    "jne     0xde5b8",
    "{Case 0xe}",
    "mov     eax, dword [rbp-0x50]",
    "and     eax, 0x1",
    "mov     rsi, r8",
    "mov     rdi, r9",
    "add     r13, r12",
    "add     r15, r12",
    "call    memcpy",
    "mov     r8, qword [rbp-0x48]",
    "movzx   r14d, byte [r8+r12-0x1]",
    "jmp     0xde110",
    "cmp     esi, 0x1",
    "je      0xde1ac",
    "mov     rax, r15",
    "jmp     0xde1d0",
    "mov     rax, qword [rbp-0x68]",
    "mov     byte [r15], 0x0",
    "mov     dword [rax], 0x1",
    "test    rbx, rbx",
    "je      0xde2b6",
    "mov     esi, dword [rbp-0x50]",
    "test    sil, 0x1",
    "je      0xde5d4",
    "movzx   r14d, byte [r13+0x2]",
    "mov     byte [r15], 0x5c",
    "lea     rax, [r15+0x1]",
    "mov     r13, rdx",
    "jmp     0xde1d0",
    "movzx   r14d, byte [r13+0x2]",
    "sub     esi, 0x30",
    "lea     ecx, [r14-0x30]",
    "cmp     cl, 0x7",
    "ja      0xde761",
    "movzx   r14d, byte [rdx]",
    "movzx   eax, r14b",
    "test    byte [r8+rax*2+0x1], 0x10",
    "je      0xde674",
    "mov     byte [rax], cl",
    "lea     r15, [rax+0x1]",
    "test    r14b, r14b",
    "jne     0xde119",
    "movzx   r14d, byte [r13+0x2]",
    "cmp     r14b, 0x7b",
    "je      0xde6fc",
    "and     eax, 0x10",
    "movzx   r14d, byte [r13+0x2]",
    "mov     r12d, eax",
    "mov     r13, rdx",
    "jmp     0xde578",
    "lea     ecx, [rax+0x4]",
    "movsxd  rcx, ecx",
    "add     rcx, r13",
    "jmp     0xde555",
    "mov     byte [r15], 0x1",
    "lea     rax, [r15+0x1]",
    "jmp     0xde1d0",
    "cmp     esi, 0x7f",
    "jne     0xde345",
    "mov     rax, qword [rbp-0x60]",
    "mov     r10, r15",
    "sub     r10, rax",
    "mov     dword [rbx], r10d",
    "jmp     0xde2b6",
    "movsx   r12, byte [r13+0x2]",
    "test    r12b, r12b",
    "jne     0xde68d",
    "mov     esi, 0x63",
    "nop     dword [rax+rax]",
    "cmp     esi, r12d",
    "jne     0xde59a",
    "sub     esi, 0x1",
    "jb      0xde59a",
    "or      dword [rbp-0x50], 0x10",
    "movzx   r14d, byte [r13+0x3]",
    "lea     rdx, [r13+0x3]",
    "mov     r12d, 0x10",
    "jmp     0xde48e",
    "mov     r12d, dword [rbp-0x50]",
    "and     r12d, 0x10",
    "jmp     0xde48e",
    "test    r12d, r12d",
    "jne     0xde5ec",
    "test    r8d, r8d",
    "je      0xde623",
    "mov     r8d, dword [rbp-0x50]",
    "mov     ecx, esi",
    "and     r8d, 0x2",
    "jmp     0xde195",
    "sub     r14d, 0x30",
    "add     rdx, 0x1",
    "movsx   r14d, r14b",
    "lea     esi, [r14+rsi*8]",
    "movzx   r14d, byte [rdx]",
    "lea     eax, [r14-0x30]",
    "cmp     al, 0x7",
    "jbe     0xde550",
    "and     esi, 0x2",
    "movzx   r14d, byte [r13+0x3]",
    "movsx   eax, r12b",
    "lea     rdx, [r13+0x3]",
    "mov     r8d, esi",
    "je      0xde6ab",
    "mov     esi, 0x63",
    "jmp     0xde17d",
    "cmp     rdi, 0x7f",
    "ja      0xde714",
    "mov     byte [r15], 0x5c",
    "lea     rax, [r15+0x1]",
    "mov     r13, rdx",
    "jmp     0xde1d0",
    "lea     r9d, [r14-0x61]",
    "shl     rdi, 0x4",
    "movsx   eax, r14b",
    "cmp     r9b, 0x5",
    "jbe     0xde380",
    "mov     byte [rbp-0x58], cl",
    "mov     qword [rbp-0x48], rdx",
    "call    __ctype_b_loc",
    "movzx   esi, r14b",
    "mov     rdx, qword [rbp-0x48]",
    "movzx   ecx, byte [rbp-0x58]",
    "mov     rdi, qword [rax]",
    "mov     r8d, 0x2",
    "xor     eax, eax",
    "test    byte [rdi+rsi*2+0x1], 0x10",
    "je      0xde4f3",
    "and     dword [rbp-0x50], 0xffffffef",
    "movzx   esi, al",
    "mov     ecx, eax",
    "cmp     r14b, 0x7d",
    "je      0xde753",
    "cmp     r8d, 0x2",
    "jne     0xde628",
    "test    r12d, r12d",
    "jne     0xde64e",
    "lea     r9d, [r14-0x61]",
    "shl     eax, 0x4",
    "movsx   esi, r14b",
    "cmp     r9b, 0x5",
    "ja      0xde60b",
    "test    r8d, r8d",
    "je      0xde345",
    "cmp     rdx, rcx",
    "je      0xde571",
    "movzx   esi, sil",
    "mov     r13, rdx",
    "cmp     eax, 0x3f",
    "je      0xde735",
    "cmp     eax, 0x5c",
    "je      0xde77d",
    "mov     eax, dword [rbp-0x50]",
    "mov     r8d, eax",
    "and     r8d, 0x2",
    "test    al, 0x4",
    "je      0xde32e",
    "mov     rsi, r15",
    "mov     qword [rbp-0x48], rdx",
    "call    u32cconv",
    "mov     rdx, qword [rbp-0x48]",
    "cdqe    ",
    "movzx   r14d, byte [rdx]",
    "add     r15, rax",
    "mov     r13, rdx",
    "jmp     0xde110",
    "mov     r8d, dword [rbp-0x50]",
    "mov     esi, edi",
    "mov     ecx, edi",
    "mov     r13, rdx",
    "and     r8d, 0x2",
    "jmp     0xde195",
    "sub     eax, 0x57",
    "cdqe    ",
    "sub     r14d, 0x41",
    "cmp     r14b, 0x5",
    "ja      0xde590",
    "movzx   r14d, byte [rdx+0x1]",
    "lea     r13, [rdx+0x1]",
    "jmp     0xde516",
    "movzx   r14d, byte [rdx]",
    "mov     r13, rdx",
    "jmp     0xde516",
    "movzx   esi, al",
    "mov     ecx, eax",
    "mov     r13, rdx",
    "jmp     0xde516",
    "mov     byte [r15], 0x5c",
    "mov     r13, rdx",
    "add     r15, 0x1",
    "mov     esi, 0x78",
    "shl     eax, 0x4",
    "lea     esi, [r14-0x61]",
    "mov     ecx, eax",
    "movsx   eax, r14b",
    "cmp     sil, 0x5",
    "jbe     0xde635",
    "sub     r14d, 0x41",
    "lea     r9d, [rsi-0x37]",
    "sub     esi, 0x30",
    "cmp     r14b, 0x5",
    "cmovbe  esi, r9d",
    "jmp     0xde4d9",
    "sub     esi, 0x57",
    "mov     r13, rdx",
    "test    r8d, r8d",
    "jne     0xde795",
    "mov     dword [rbp-0x58], r8d",
    "mov     qword [rbp-0x48], rdx",
    "call    __ctype_b_loc",
    "mov     rdx, qword [rbp-0x48]",
    "mov     r8d, dword [rbp-0x58]",
    "mov     rcx, rax",
    "movzx   eax, r12b",
    "mov     rcx, qword [rcx]",
    "test    byte [rcx+rax*2+0x1], 0x2",
    "je      0xde769",
    "cmp     r14b, 0x5c",
    "jne     0xde6b4",
    "sub     eax, 0x30",
    "cdqe    ",
    "jmp     0xde385",
    "sub     eax, 0x37",
    "cdqe    ",
    "jmp     0xde385",
    "mov     r8d, dword [rbp-0x50]",
    "and     r8d, 0x2",
    "jmp     0xde195",
    "sub     eax, 0x57",
    "sub     r14d, 0x41",
    "lea     esi, [rax-0x37]",
    "sub     eax, 0x30",
    "cmp     r14b, 0x5",
    "cmovbe  eax, esi",
    "jmp     0xde638",
    "movzx   r14d, byte [rdx+0x1]",
    "add     eax, esi",
    "add     rdx, 0x1",
    "sub     r8d, 0x1",
    "movzx   esi, r14b",
    "test    byte [rdi+rsi*2+0x1], 0x10",
    "jne     0xde4b8",
    "mov     ecx, 0x7f",
    "jmp     0xde1ac",
    "mov     rax, r15",
    "mov     ecx, 0x7f",
    "jmp     0xde1d0",
    "mov     ecx, r12d",
    "mov     esi, r12d",
    "mov     r13, rdx",
    "and     ecx, 0x1f",
    "and     esi, 0x1f",
    "jmp     0xde195",
    "call    __ctype_toupper_loc",
    "mov     r13, qword [rbp-0x48]",
    "mov     r8d, dword [rbp-0x58]",
    "mov     rax, qword [rax]",
    "mov     esi, dword [rax+r12*4]",
    "and     esi, 0x1f",
    "mov     ecx, esi",
    "jmp     0xde195",
    "movzx   r14d, byte [r13+0x4]",
    "lea     rdx, [r13+0x4]",
    "jmp     0xde6b4",
    "add     rdi, rax",
    "add     rdx, 0x1",
    "movzx   r14d, byte [rdx+0x1]",
    "add     eax, ecx",
    "add     rdx, 0x1",
    "movzx   ecx, r14b",
    "test    byte [rdi+rcx*2+0x1], 0x10",
    "je      0xde5ec"
  ]
}