{
  "address": "0xd74a0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data using aphash/ef28217586414e46ab1e9ea5fafa8c30",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/37fcdffa79f84274a0a7280c1c8f403a",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/2595307ea71d425c8c0b4e2392af2cf7",
    "contain loop",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/ba22e5cbb4214cdaa9e658605c2a045c",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/03953aa079f14ec384dfb3745989fa21"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "sub     rsp, 0x38",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "call    strlen",
    "add     rax, r12",
    "mov     qword [rbp-0x50], rax",
    "call    __ctype_get_mb_cur_max",
    "mov     rdi, r12",
    "mov     dword [rbp-0x48], eax",
    "call    strlen",
    "lea     rbx, [rax+rax+0x3]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r10d, dword [rbp-0x48]",
    "test    rax, rax",
    "mov     r15, rax",
    "je      0xd769b",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "movzx   ecx, byte [r12]",
    "mov     byte [r15], 0x22",
    "lea     rbx, [r15+0x1]",
    "test    cl, cl",
    "je      0xd75b8",
    "mov     eax, 0x22",
    "mov     word [rbx], ax",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd7696",
    "lea     r14, [rel locale_utf8locale]",
    "lea     r13, [rel sh_syntaxtab]",
    "jmp     0xd7550",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "movzx   edx, cl",
    "mov     eax, dword [r14]",
    "test    byte [r13+rdx*4], 0x40",
    "je      0xd756e",
    "test    eax, eax",
    "jne     0xd7530",
    "cmp     cl, 0xa",
    "je      0xd75e8",
    "test    cl, cl",
    "js      0xd75f8",
    "cmp     r10d, 0x1",
    "jle     0xd7538",
    "test    eax, eax",
    "je      0xd7572",
    "mov     byte [rbx], 0x5c",
    "add     rbx, 0x1",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jle     0xd75a0",
    "mov     rax, rbx",
    "add     rbx, 0x1",
    "mov     byte [rax], cl",
    "mov     rax, r12",
    "add     r12, 0x1",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "jne     0xd7538",
    "jmp     0xd7538",
    "mov     rax, r12",
    "mov     byte [rbx], cl",
    "add     r12, 0x1",
    "add     rbx, 0x1",
    "movzx   ecx, byte [rax+0x1]",
    "test    cl, cl",
    "jne     0xd7550",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "mov     edx, 0x1",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0xd7650",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jg      0xd7650",
    "nop     dword [rax]",
    "mov     rdx, qword [rbp-0x50]",
    "mov     rax, qword [rbp-0x40]",
    "xor     edi, edi",
    "lea     rcx, [rbp-0x40]",
    "mov     rsi, r12",
    "mov     dword [rbp-0x48], r10d",
    "sub     rdx, r12",
    "mov     qword [rbp-0x58], rax",
    "call    mbrtowc",
    "mov     edx, 0x1",
    "mov     r10d, dword [rbp-0x48]",
    "test    rax, rax",
    "cmovne  rdx, rax",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0xd7621",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "mov     dword [rbp-0x58], r10d",
    "mov     qword [rbp-0x48], rdx",
    "call    memcpy",
    "mov     rdx, qword [rbp-0x48]",
    "mov     r10d, dword [rbp-0x58]",
    "lea     rax, [r12+rdx-0x1]",
    "add     rbx, rdx",
    "add     r12, rdx",
    "jmp     0xd7548",
    "mov     rax, qword [rbp-0x58]",
    "mov     edx, 0x1",
    "mov     qword [rbp-0x40], rax",
    "jmp     0xd7621",
    "movzx   ecx, byte [rax+0x1]",
    "test    cl, cl",
    "je      0xd75b8"
  ]
}