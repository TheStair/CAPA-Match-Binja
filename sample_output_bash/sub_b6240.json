{
  "address": "0xb6240",
  "rules": [
    "create or open file",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "read file on Linux",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "get file attributes",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x288",
    "mov     qword [rbp-0x1c0], rdi",
    "lea     rdi, [rel data_11f2f1]  {\"FUNCNAME\"}",
    "mov     dword [rbp-0x1b4], esi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    find_variable",
    "mov     qword [rbp-0x1d8], 0x0",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xb6299",
    "lea     rdi, [rel data_11f2fa]  {\"BASH_SOURCE\"}",
    "xor     r15d, r15d",
    "call    find_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0xb62ba",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "jne     0xb63f0",
    "lea     rdi, [rel data_11f306]  {\"BASH_LINENO\"}",
    "call    find_variable",
    "mov     qword [rbp-0x1e0], 0x0",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0xb62e3",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "jne     0xb6410",
    "mov     rax, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x1d8], rax",
    "jmp     0xb6299",
    "lea     rdi, [rel data_12011e]  {\"BASH_ARGV\"}",
    "call    find_variable",
    "mov     qword [rbp-0x1c8], rax",
    "test    rax, rax",
    "je      0xb6310",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "jne     0xb6400",
    "mov     r15, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "jmp     0xb62ba",
    "lea     rdi, [rel data_120114]  {\"BASH_ARGC\"}",
    "call    find_variable",
    "mov     qword [rbp-0x1d0], rax",
    "test    rax, rax",
    "je      0xb633d",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0xb6420",
    "mov     rax, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x1e0], rax",
    "jmp     0xb62e3",
    "mov     rdi, qword [rbp-0x1c0]",
    "xor     esi, esi",
    "xor     eax, eax",
    "call    open",
    "mov     r14d, eax",
    "test    eax, eax",
    "jns     0xb6440",
    "test    byte [rax+0x28 {Elf64_Header::section_header_offset.b}], 0x4",
    "je      0xb6430",
    "mov     qword [rbp-0x1c8], 0x0",
    "jmp     0xb6310",
    "mov     rax, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x1c8], rax",
    "lea     rsi, [rbp-0x190]",
    "mov     edi, eax",
    "call    fstat",
    "cmp     eax, 0xffffffff",
    "je      0xb6610",
    "call    __errno_location",
    "mov     r12d, dword [rax]",
    "mov     rbx, rax",
    "mov     qword [rbp-0x1d0], 0x0",
    "jmp     0xb633d",
    "mov     rax, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "mov     qword [rbp-0x1d0], rax",
    "call    __errno_location",
    "mov     edi, r14d",
    "mov     r12d, dword [rax]",
    "mov     rbx, rax",
    "call    close",
    "jmp     0xb6363",
    "mov     eax, dword [rbp-0x1b4]",
    "and     eax, 0x2",
    "mov     dword [rbp-0x1ec], eax",
    "jne     0xb6630",
    "mov     edi, r12d",
    "call    strerror",
    "mov     rsi, qword [rbp-0x1c0]",
    "lea     rdi, [rel data_121afe[9]]  {\"%s: %s\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    report_error",
    "cmp     r12d, 0x2",
    "je      0xb6395",
    "mov     dword [rbx], r12d",
    "lea     rax, [rel builtin_error]",
    "mov     qword [rbp-0x1f8], rax",
    "jmp     0xb647a",
    "lea     rax, [rel internal_error]",
    "mov     qword [rbp-0x1f8], rax",
    "lea     rax, [rel last_command_exit_value]",
    "mov     edi, 0x3",
    "mov     dword [rax], 0x1",
    "call    jump_to_top_level",
    "{ Does not return }",
    "mov     eax, dword [rbp-0x1b4]",
    "test    al, 0x2",
    "je      0xb63e0",
    "test    byte [rbp-0x1b4], 0x10",
    "jne     0xb6fc5",
    "mov     eax, dword [rbp-0x178]",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "je      0xb69f8",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x1213c8]  {\"%s: is a directory\"}",
    "test    byte [rbp-0x1b4], 0x80",
    "je      0xb6a40",
    "cmp     dword [rbx], 0x2",
    "sete    bl",
    "movzx   ebx, bl",
    "and     ebx, eax",
    "sub     ebx, 0x1",
    "jmp     0xb63b1",
    "mov     ebx, 0x1",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xb6fc0",
    "jmp     0xb63ac",
    "mov     rdx, qword [rbp-0x160]",
    "mov     r8, rdx",
    "cmp     rdx, 0xffffffffffffffff",
    "je      0xb6d40",
    "mov     edx, 0x5",
    "lea     rsi, [rel 0x1213db]  {\"%s: not a regular file\"}",
    "cmp     eax, 0x8000",
    "jne     0xb6a04",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x288",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1213f2]  {\"%s: file is too large\"}",
    "jmp     0xb6a04",
    "cmp     eax, 0x8000",
    "jne     0xb64d1",
    "xor     edi, edi",
    "mov     ebx, 0xffffffff",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x1c0]",
    "mov     rcx, qword [rbp-0x1f8]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    rcx",
    "mov     edi, r14d",
    "call    close",
    "mov     edi, dword [rbp-0x1ec]",
    "test    edi, edi",
    "je      0xb63b1",
    "mov     rdx, qword [rbp-0x160]",
    "mov     r8, rdx",
    "cmp     rdx, 0xffffffffffffffff",
    "je      0xb6d40",
    "xor     edx, edx",
    "lea     rsi, [rbp-0x1a0]",
    "mov     edi, r14d",
    "call    zmapfd",
    "movsxd  r8, eax",
    "mov     qword [rbp-0x208], r8",
    "call    __errno_location",
    "mov     edi, r14d",
    "mov     esi, dword [rax]",
    "mov     qword [rbp-0x200], rax",
    "mov     dword [rbp-0x1f0], esi",
    "call    close",
    "mov     esi, dword [rbp-0x1f0]",
    "mov     rdx, qword [rbp-0x200]",
    "mov     r8, qword [rbp-0x208]",
    "mov     dword [rdx], esi",
    "test    r8, r8",
    "js      0xb6e6d",
    "jmp     0xb64c8",
    "test    rdx, rdx",
    "jns     0xb6c90",
    "mov     rdi, qword [rbp-0x1a0]",
    "call    free",
    "call    __errno_location",
    "mov     r12d, dword [rax]",
    "mov     rbx, rax",
    "jmp     0xb6366",
    "mov     rdi, qword [rbp-0x1a0]",
    "test    r8, r8",
    "je      0xb6e3c",
    "lea     rax, [r8+0x1]",
    "mov     qword [rbp-0x250], r8",
    "mov     rdi, rax",
    "mov     qword [rbp-0x278], rax",
    "call    malloc",
    "mov     r8, qword [rbp-0x250]",
    "test    rax, rax",
    "mov     r9, rax",
    "je      0xb6fdc",
    "test    byte [rbp-0x1b4], 0x1",
    "je      0xb6375",
    "call    free",
    "mov     esi, dword [rbp-0x1ec]",
    "xor     ebx, ebx",
    "test    esi, esi",
    "sete    bl",
    "jmp     0xb63b1",
    "mov     qword [rbp-0x210], r8",
    "mov     qword [rbp-0x220], rdi",
    "call    strlen",
    "mov     r8, qword [rbp-0x210]",
    "cdqe    ",
    "cmp     rax, r8",
    "jge     0xb665d",
    "mov     rsi, qword [rbp-0x278]",
    "mov     qword [rbp-0x288], rax",
    "xor     eax, eax",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     qword [rbp-0x290], r8",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r8",
    "mov     rsi, r9",
    "mov     edi, r14d",
    "mov     qword [rbp-0x1a0], r9",
    "call    read",
    "mov     qword [rbp-0x258], rax",
    "call    __errno_location",
    "mov     r8, qword [rbp-0x258]",
    "mov     rdx, rax",
    "test    r8, r8",
    "js      0xb6e53",
    "mov     eax, dword [rbp-0x1b4]",
    "and     eax, 0x4",
    "mov     r14d, eax",
    "jne     0xb6a68",
    "xor     ecx, ecx",
    "mov     qword [rbp-0x230], rbx",
    "mov     rax, qword [rbp-0x220]",
    "xor     r14d, r14d",
    "mov     qword [rbp-0x238], r12",
    "mov     ebx, dword [rbp-0x1ec]",
    "mov     r12, r8",
    "mov     qword [rbp-0x240], r13",
    "mov     r13, rcx",
    "jmp     0xb65a4",
    "mov     edi, r14d",
    "mov     ebx, dword [rax]",
    "mov     qword [rbp-0x280], rax",
    "call    close",
    "mov     rdx, qword [rbp-0x280]",
    "mov     dword [rdx], ebx",
    "mov     rax, qword [rbp-0x1a0]",
    "mov     edi, r14d",
    "mov     qword [rbp-0x270], r8",
    "mov     qword [rbp-0x268], rdx",
    "mov     byte [rax+r8], 0x0",
    "mov     esi, dword [rdx]",
    "mov     dword [rbp-0x260], esi",
    "call    close",
    "mov     esi, dword [rbp-0x260]",
    "mov     rdx, qword [rbp-0x268]",
    "mov     r8, qword [rbp-0x270]",
    "mov     dword [rdx], esi",
    "jmp     0xb6527",
    "lea     rdi, [rel data_121408]  {\"_evalfile\"}",
    "call    begin_unwind_frame",
    "mov     edi, 0x20",
    "call    malloc",
    "mov     rdx, rax",
    "test    rax, rax",
    "je      0xb7084",
    "lea     rax, [rel return_catch]",
    "movdqa  xmm4, xmmword [rax]",
    "movdqa  xmm5, xmmword [rax+0x10]",
    "movdqa  xmm6, xmmword [rax+0x20]",
    "movdqa  xmm7, xmmword [rax+0x30]",
    "movaps  xmmword [rbp-0x100], xmm4",
    "movdqa  xmm4, xmmword [rax+0x40]",
    "movaps  xmmword [rbp-0xf0], xmm5",
    "movdqa  xmm5, xmmword [rax+0x50]",
    "movaps  xmmword [rbp-0xe0], xmm6",
    "movdqa  xmm6, xmmword [rax+0x60]",
    "movaps  xmmword [rbp-0xd0], xmm7",
    "movdqa  xmm7, xmmword [rax+0x70]",
    "movaps  xmmword [rbp-0xc0], xmm4",
    "movdqa  xmm4, xmmword [rax+0x80]",
    "movaps  xmmword [rbp-0xb0], xmm5",
    "movdqa  xmm5, xmmword [rax+0x90]",
    "movaps  xmmword [rbp-0xa0], xmm6",
    "movdqa  xmm6, xmmword [rax+0xa0]",
    "movaps  xmmword [rbp-0x90], xmm7",
    "movdqa  xmm7, xmmword [rax+0xb0]",
    "mov     rax, qword [rax+0xc0]",
    "movaps  xmmword [rbp-0x80], xmm4",
    "mov     qword [rbp-0x40], rax",
    "movaps  xmmword [rbp-0x70], xmm5",
    "movaps  xmmword [rbp-0x60], xmm6",
    "movaps  xmmword [rbp-0x50], xmm7",
    "test    byte [rbp-0x1b4], 0x8",
    "je      0xb6735",
    "lea     rdi, [rax+r13]",
    "cmp     byte [rdi], 0x0",
    "jne     0xb6590",
    "mov     qword [rbp-0x298], rax",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rel data_161a50]",
    "mov     dword [rdx+0x18], 0x4",
    "mov     edi, 0xe4",
    "mov     qword [rel data_161a50], rdx",
    "mov     qword [rdx], rax",
    "lea     rax, [rel sub_872f0]",
    "mov     qword [rdx+0x8], rax",
    "lea     rax, [rel return_catch_flag]",
    "mov     qword [rbp-0x228], rdx",
    "mov     qword [rdx+0x10], rax",
    "mov     eax, dword [rax]",
    "mov     dword [rdx+0x1c], eax",
    "call    malloc",
    "mov     rdx, qword [rbp-0x228]",
    "test    rax, rax",
    "mov     rcx, rax",
    "je      0xb7057",
    "lea     rax, [rel return_catch_flag]",
    "mov     rdx, qword [rbp-0x1c0]",
    "mov     esi, 0x1",
    "mov     rdi, r15",
    "add     dword [rax], 0x1",
    "lea     rax, [rel sourcelevel]",
    "add     dword [rax], 0x1",
    "call    array_rshift",
    "call    executing_line_number",
    "movsxd  rdi, eax",
    "call    itos",
    "mov     rdi, qword [rbp-0x1e0]",
    "mov     esi, 0x1",
    "mov     rdx, rax",
    "mov     qword [rbp-0x218], rax",
    "call    array_rshift",
    "mov     rdi, qword [rbp-0x218]",
    "call    free",
    "mov     rdi, qword [rbp-0x1d8]",
    "mov     esi, 0x1",
    "lea     rdx, [rel data_11f4ab]  {\"source\"}",
    "call    array_rshift",
    "mov     edi, 0x30",
    "call    malloc",
    "mov     qword [rbp-0x1e8], rax",
    "test    rax, rax",
    "je      0xb703f",
    "lea     rax, [rel interactive]",
    "mov     eax, dword [rax]",
    "mov     dword [rbp-0x1a4], eax",
    "add     r13, 0x1",
    "cmp     r12, r13",
    "jle     0xb6648",
    "mov     rdx, r12",
    "lea     rsi, [rax+r13+0x1]",
    "sub     r12, 0x1",
    "sub     rdx, r13",
    "call    memmove",
    "test    ebx, ebx",
    "je      0xb6590",
    "mov     qword [rbp-0x2a0], rax",
    "mov     esi, 0xe4",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel return_catch]",
    "mov     qword [rcx], rdx",
    "lea     rsi, [rel sub_872f0]",
    "mov     edi, 0x20",
    "mov     qword [rcx+0x8], rsi",
    "movdqa  xmm4, xmmword [rax]",
    "movdqa  xmm5, xmmword [rax+0x10]",
    "mov     qword [rcx+0x10], rax",
    "movdqa  xmm6, xmmword [rax+0x20]",
    "movdqa  xmm7, xmmword [rax+0x30]",
    "mov     dword [rcx+0x18], 0xc8",
    "movups  xmmword [rcx+0x1c], xmm4",
    "movdqa  xmm4, xmmword [rax+0x40]",
    "movups  xmmword [rcx+0x2c], xmm5",
    "movdqa  xmm5, xmmword [rax+0x50]",
    "movups  xmmword [rcx+0x3c], xmm6",
    "movdqa  xmm6, xmmword [rax+0x60]",
    "movups  xmmword [rcx+0x4c], xmm7",
    "movdqa  xmm7, xmmword [rax+0x70]",
    "movups  xmmword [rcx+0x5c], xmm4",
    "movdqa  xmm4, xmmword [rax+0x80]",
    "movups  xmmword [rcx+0x6c], xmm5",
    "movdqa  xmm5, xmmword [rax+0x90]",
    "movups  xmmword [rcx+0x7c], xmm6",
    "movdqa  xmm6, xmmword [rax+0xa0]",
    "movups  xmmword [rcx+0x8c], xmm7",
    "movdqa  xmm7, xmmword [rax+0xb0]",
    "mov     rax, qword [rax+0xc0]",
    "mov     qword [rel data_161a50], rcx",
    "mov     qword [rcx+0xdc], rax",
    "movups  xmmword [rcx+0x9c], xmm4",
    "movups  xmmword [rcx+0xac], xmm5",
    "movups  xmmword [rcx+0xbc], xmm6",
    "movups  xmmword [rcx+0xcc], xmm7",
    "mov     qword [rbp-0x248], rcx",
    "mov     eax, dword [rbp-0x1b4]",
    "and     eax, 0x8",
    "mov     dword [rbp-0x25c], eax",
    "je      0xb6e89",
    "mov     esi, 0x30",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x1e8]",
    "mov     rcx, qword [rbp-0x1e0]",
    "mov     qword [rax+0x20], rcx",
    "mov     rcx, qword [rbp-0x1d8]",
    "mov     qword [rax+0x10], r15",
    "mov     qword [rax+0x18], r12",
    "mov     qword [rax+0x28], r13",
    "mov     qword [rax], rcx",
    "mov     qword [rax+0x8], rbx",
    "test    r14d, r14d",
    "jne     0xb6def",
    "mov     rbx, qword [rbp-0x230]",
    "mov     r12, qword [rbp-0x238]",
    "mov     r13, qword [rbp-0x240]",
    "mov     rax, qword [rbp-0x1a0]",
    "add     r14d, 0x1",
    "cmp     r14d, 0x100",
    "jle     0xb6590",
    "call    malloc",
    "lea     rsi, [rel sub_872f0]",
    "test    rax, rax",
    "je      0xb6c1b",
    "call    malloc",
    "mov     rcx, qword [rbp-0x248]",
    "test    rax, rax",
    "mov     rdx, rax",
    "je      0xb7012",
    "lea     rdx, [rel uwcache]",
    "mov     eax, dword [rdx+0xc]",
    "test    eax, eax",
    "jle     0xb6f4a",
    "test    dword [rbp-0x1b4], 0x100",
    "jne     0xb6de0",
    "mov     rdi, qword [rbp-0x1a0]",
    "mov     ebx, 0x7e",
    "call    free",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_123648]  {\"%s: cannot execute binary file\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x1c0]",
    "mov     rcx, qword [rbp-0x1f8]",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    rcx",
    "jmp     0xb63b1",
    "xor     eax, eax",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, qword [rel data_161a50]",
    "mov     qword [rax+0x8], rsi",
    "mov     dword [rax+0x18], 0x4",
    "mov     qword [rax], rdx",
    "lea     rdx, [rel sourcelevel]",
    "mov     qword [rel data_161a50], rax",
    "mov     qword [rax+0x10], rdx",
    "mov     edx, dword [rdx]",
    "mov     dword [rax+0x1c], edx",
    "jmp     0xb6735",
    "mov     qword [rbp-0x2a8], rax",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rax, [rel interactive]",
    "mov     qword [rdx], rcx",
    "lea     rcx, [rel sub_872f0]",
    "mov     edi, 0x20",
    "mov     qword [rdx+0x8], rcx",
    "mov     qword [rdx+0x10], rax",
    "mov     eax, dword [rax]",
    "mov     dword [rdx+0x18], 0x4",
    "mov     dword [rdx+0x1c], eax",
    "mov     qword [rel data_161a50], rdx",
    "call    malloc",
    "lea     rcx, [rel sub_872f0]",
    "test    rax, rax",
    "jne     0xb6f19",
    "mov     edi, 0x20",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "jne     0xb6e10",
    "sub     eax, 0x1",
    "mov     rcx, qword [rdx]",
    "mov     dword [rdx+0xc], eax",
    "cdqe    ",
    "mov     rax, qword [rcx+rax*8]",
    "mov     dword [rbp-0x1b8], 0x414",
    "jmp     0xb6884",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x2c",
    "jg      0xb6825",
    "mov     rdx, qword [rel data_161a50]",
    "mov     qword [rax+0x8], rcx",
    "mov     dword [rax+0x18], 0x4",
    "mov     qword [rax], rdx",
    "lea     rdx, [rel sourcelevel]",
    "mov     qword [rel data_161a50], rax",
    "mov     qword [rax+0x10], rdx",
    "mov     edx, dword [rdx]",
    "mov     dword [rax+0x1c], edx",
    "jmp     0xb6728",
    "mov     rdx, qword [rel data_161a50]",
    "mov     rcx, qword [rbp-0x1e8]",
    "mov     qword [rax], rdx",
    "lea     rdx, [rel restore_funcarray_state]",
    "mov     qword [rax+0x10], rcx",
    "mov     qword [rax+0x8], rdx",
    "mov     qword [rel data_161a50], rax",
    "jmp     0xb67f8",
    "xor     eax, eax",
    "mov     esi, 0x20",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     rdi, [rel return_catch]",
    "xor     esi, esi",
    "call    __sigsetjmp",
    "endbr64 ",
    "test    eax, eax",
    "je      0xb6d58",
    "mov     rdx, qword [rbp-0x1c0]",
    "mov     rdi, qword [rbp-0x1c8]",
    "mov     esi, 0x1",
    "call    array_rshift",
    "mov     eax, 0x31",
    "mov     esi, 0x1",
    "mov     rdi, qword [rbp-0x1d0]",
    "lea     rdx, [rbp-0x192]",
    "mov     word [rbp-0x192], ax",
    "call    array_rshift",
    "test    r14d, r14d",
    "jne     0xb6ecf",
    "lea     rbx, [rel bash_argv_initialized]",
    "mov     edx, dword [rbx]",
    "test    edx, edx",
    "je      0xb6f80",
    "lea     rax, [rel interactive]",
    "mov     dword [rax], 0x0",
    "mov     edx, dword [rbp-0x1b8]",
    "mov     rsi, qword [rbp-0x1c0]",
    "mov     rdi, qword [rbp-0x1a0]",
    "call    parse_and_execute",
    "mov     ebx, eax",
    "test    byte [rbp-0x1b4], 0x4",
    "je      0xb68be",
    "mov     edi, 0xffffffff",
    "call    parse_and_execute_cleanup",
    "lea     rax, [rel return_catch_value]",
    "mov     ebx, dword [rax]",
    "test    byte [rbp-0x1b4], 0x4",
    "jne     0xb6d80",
    "lea     rdx, [rel uwcache]",
    "mov     eax, dword [rdx+0xc]",
    "test    eax, eax",
    "jle     0xb6fa3",
    "xor     eax, eax",
    "test    byte [rbp-0x1b4], 0x20",
    "sete    al",
    "shl     eax, 0x2",
    "or      eax, 0x410",
    "mov     dword [rbp-0x1b8], eax",
    "call    list_rest_of_args",
    "mov     r12, rax",
    "mov     rdi, rax",
    "call    push_args",
    "mov     rdi, r12",
    "call    dispose_words",
    "mov     dword [rbx], 0x1",
    "jmp     0xb6825",
    "test    byte [rbp-0x1b4], 0x8",
    "je      0xb68d6",
    "cmp     qword [rel data_161a50], 0x0",
    "je      0xb69cf",
    "mov     edi, 0x20",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "jne     0xb6ef0",
    "sub     eax, 0x1",
    "mov     rcx, qword [rdx]",
    "mov     dword [rdx+0xc], eax",
    "cdqe    ",
    "mov     rax, qword [rcx+rax*8]",
    "mov     rdi, qword [rbp-0x1e8]",
    "call    restore_funcarray_state",
    "test    dword [rbp-0x1b4], 0x100",
    "jne     0xb691a",
    "mov     edx, dword [rbp-0x1a4]",
    "lea     rax, [rel interactive]",
    "mov     dword [rax], edx",
    "lea     rax, [rel current_token]",
    "cmp     dword [rax], 0x131",
    "je      0xb6db0",
    "lea     rdi, [rel data_121408]  {\"_evalfile\"}",
    "call    sub_113ed0",
    "lea     rax, [rel current_token]",
    "cmp     dword [rax], 0x131",
    "jne     0xb69e2",
    "mov     rdx, qword [rel data_161a50]",
    "mov     qword [rax+0x10], 0x0",
    "mov     qword [rax], rdx",
    "lea     rdx, [rel pop_args]",
    "mov     qword [rel data_161a50], rax",
    "mov     qword [rax+0x8], rdx",
    "jmp     0xb686a",
    "jmp     0xb6f60",
    "lea     rax, [rel return_catch_flag]",
    "movdqa  xmm0, xmmword [rbp-0x100]",
    "movdqa  xmm1, xmmword [rbp-0xf0]",
    "movdqa  xmm2, xmmword [rbp-0xe0]",
    "sub     dword [rax], 0x1",
    "lea     rax, [rel sourcelevel]",
    "movdqa  xmm3, xmmword [rbp-0xd0]",
    "movdqa  xmm4, xmmword [rbp-0xc0]",
    "sub     dword [rax], 0x1",
    "lea     rax, [rel return_catch]",
    "movdqa  xmm5, xmmword [rbp-0xb0]",
    "movdqa  xmm6, xmmword [rbp-0xa0]",
    "movdqa  xmm7, xmmword [rbp-0x90]",
    "movaps  xmmword [rax], xmm0",
    "mov     rdx, qword [rbp-0x40]",
    "movdqa  xmm0, xmmword [rbp-0x80]",
    "movaps  xmmword [rax+0x10], xmm1",
    "movdqa  xmm1, xmmword [rbp-0x70]",
    "movaps  xmmword [rax+0x20], xmm2",
    "movdqa  xmm2, xmmword [rbp-0x60]",
    "movaps  xmmword [rax+0x30], xmm3",
    "movdqa  xmm3, xmmword [rbp-0x50]",
    "movaps  xmmword [rax+0x40], xmm4",
    "movaps  xmmword [rax+0x50], xmm5",
    "movaps  xmmword [rax+0x60], xmm6",
    "movaps  xmmword [rax+0x70], xmm7",
    "movaps  xmmword [rax+0x80], xmm0",
    "movaps  xmmword [rax+0x90], xmm1",
    "movaps  xmmword [rax+0xa0], xmm2",
    "movaps  xmmword [rax+0xb0], xmm3",
    "mov     qword [rax+0xc0], rdx",
    "mov     rdi, qword [rbp-0x1d0]",
    "mov     edx, 0x1",
    "mov     esi, 0x1",
    "call    array_shift",
    "mov     edx, 0x1",
    "mov     esi, 0x1",
    "mov     rdi, qword [rbp-0x1c8]",
    "call    array_shift",
    "mov     edx, dword [rel data_160dbc]",
    "mov     dword [rax], 0xa",
    "mov     dword [rel data_160db8], edx",
    "mov     edx, dword [rel data_160dcc]",
    "mov     dword [rel data_160dcc], 0x131",
    "mov     dword [rel data_160dbc], edx",
    "jmp     0xb69e2",
    "test    byte [rbp-0x1b4], 0x2",
    "je      0xb63ac",
    "nop     dword [rax]",
    "jmp     0xb63b1"
  ]
}