{
  "address": "0xbbbb0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "log keystrokes via raw input data/4762f396f48d4e318a08125296476d20",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae",
    "check if file exists/33e235b3e802457492251bc0c05ce35e/2e923016c5754d05a3af5b3b8024a7e6"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x138",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xbbf83",
    "call    builtin_usage",
    "mov     rax, qword [rdi+0x8]",
    "mov     r15, rdi",
    "mov     r14, qword [rax]",
    "movzx   edx, byte [r14]",
    "cmp     dl, 0x2d",
    "je      0xbc028",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xbc17f",
    "lea     rsi, [rel 0x1210f5]  {\"--help\"}",
    "mov     rdi, r14",
    "mov     byte [rbp-0x154], dl",
    "call    strcmp",
    "movzx   edx, byte [rbp-0x154]",
    "test    eax, eax",
    "jne     0xbbbf7",
    "lea     rax, [rel posixly_correct]",
    "mov     r13d, 0x2",
    "mov     dword [rbp-0x154], 0x0",
    "lea     r12, [rel data_1206c6[3]]  {\"TERM\"}",
    "mov     ebx, 0xf",
    "cmp     dword [rax], 0x1",
    "adc     r13d, 0x0",
    "xor     r8d, r8d",
    "nop     dword [rax]",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x138",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "call    builtin_help",
    "jmp     0xbbf88",
    "movzx   eax, byte [r14+0x1]",
    "mov     edx, eax",
    "and     edx, 0xffffffdf",
    "cmp     dl, 0x4c",
    "jne     0xbbd10",
    "mov     ecx, dword [rbp-0x154]",
    "test    ecx, ecx",
    "jne     0xbc080",
    "mov     eax, 0x102",
    "jmp     0xbbf15",
    "cmp     al, 0x73",
    "je      0xbbd50",
    "cmp     byte [r14+0x2], 0x0",
    "jne     0xbbd2b",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xbc17f",
    "cmp     ebx, 0xffffffff",
    "je      0xbc0f8",
    "movzx   edx, byte [r14+0x2]",
    "test    dl, dl",
    "jne     0xbbdb0",
    "cmp     al, 0x6e",
    "je      0xbbd50",
    "test    r8d, r8d",
    "jne     0xbbc31",
    "add     dword [rbp-0x154], 0x1",
    "mov     r15, qword [r15]",
    "add     rsp, 0x138",
    "mov     rdi, r15",
    "xor     esi, esi",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "jmp     display_signal_list",
    "lea     rsi, [rel data_133bf8]  {\"%s: invalid signal specification\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "test    r15, r15",
    "je      0xbbf83",
    "mov     dword [rbp-0x158], r8d",
    "mov     byte [rbp-0x160], dl",
    "cmp     al, 0x73",
    "jne     0xbbf40",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0xbc145",
    "cmp     al, 0x2d",
    "jne     0xbbf70",
    "lea     r12, [r14+0x1]",
    "mov     esi, r13d",
    "mov     rdi, r12",
    "call    decode_signal",
    "mov     r15, qword [r15]",
    "mov     r8d, 0x1",
    "mov     ebx, eax",
    "jmp     0xbbcf0",
    "mov     rax, qword [r15+0x8]",
    "mov     r14, qword [rax]",
    "movzx   edx, byte [r14]",
    "jmp     0xbbc28",
    "lea     rax, [rbp-0x148]",
    "mov     qword [rbp-0x160], rax",
    "jmp     0xbbc9c",
    "call    __ctype_b_loc",
    "mov     r8d, dword [rbp-0x158]",
    "mov     rsi, rax",
    "movzx   eax, byte [rbp-0x160]",
    "mov     rsi, qword [rsi]",
    "mov     rdx, rax",
    "test    byte [rsi+rax*2+0x1], 0x8",
    "je      0xbbd2b",
    "call    __ctype_b_loc",
    "mov     r8d, dword [rbp-0x158]",
    "mov     rsi, rax",
    "movzx   eax, byte [rbp-0x160]",
    "mov     rsi, qword [rsi]",
    "mov     rdx, rax",
    "test    byte [rsi+rax*2+0x1], 0x4",
    "je      0xbbd2b",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_123628]  {\"%s: option requires an argument\"}",
    "call    dcgettext",
    "mov     rsi, r14",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xbc118",
    "mov     rax, qword [r15+0x8]",
    "mov     r12, qword [rax]",
    "movzx   edx, byte [r12]",
    "cmp     al, 0x3f",
    "jne     0xbbd2b",
    "cmp     byte [r14+0x2], 0x0",
    "je      0xbc122",
    "test    r15, r15",
    "je      0xbbc31",
    "cmp     dl, 0x2d",
    "je      0xbbcd0",
    "mov     rax, qword [r15+0x8]",
    "mov     r13, qword [rax]",
    "movzx   eax, byte [r13]",
    "cmp     al, 0x2d",
    "jne     0xbbc68",
    "lea     r12, [r14+0x2]",
    "jmp     0xbbd71",
    "lea     r12, [r14+0x2]",
    "jmp     0xbbd71",
    "mov     eax, 0x1",
    "jmp     0xbbf15",
    "mov     esi, r13d",
    "mov     rdi, r12",
    "mov     dword [rbp-0x160], r8d",
    "call    decode_signal",
    "mov     r8d, dword [rbp-0x160]",
    "mov     ebx, eax",
    "xor     ebx, ebx",
    "cmp     byte [r12+0x1], 0x0",
    "je      0xbbd9b",
    "cmp     byte [r14+0x2], 0x0",
    "jne     0xbbd2b",
    "mov     r15, qword [r15]",
    "jmp     0xbbc31",
    "test    al, al",
    "jne     0xbbdf8",
    "cmp     byte [r13+0x1], 0x0",
    "lea     r14, [r13+0x1]",
    "jne     0xbbdfb",
    "cmp     dl, 0x30",
    "jne     0xbbd80",
    "mov     r15, qword [r15]",
    "add     r8d, 0x1",
    "jmp     0xbbcf0",
    "mov     r14, r13",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133c20]  {\"`%s': not a pid or valid job spe\u2026\"}",
    "mov     rsi, qword [rbp-0x160]",
    "mov     rdi, r13",
    "call    legal_number",
    "test    eax, eax",
    "je      0xbbe23",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_134220]  {\"%s: arguments must be process or\u2026\"}",
    "jmp     0xbbc7c",
    "mov     rax, qword [r15+0x8]",
    "mov     r13, qword [rax]",
    "movzx   eax, byte [r13]",
    "test    al, al",
    "je      0xbbe3b",
    "mov     rax, qword [rbp-0x148]",
    "movsxd  r13, eax",
    "mov     edi, eax",
    "cmp     rax, r13",
    "je      0xbc0ae",
    "mov     edx, dword [rbp-0x154]",
    "xor     eax, eax",
    "test    edx, edx",
    "sete    al",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "cmp     byte [r14], 0x0",
    "je      0xbbc70",
    "cmp     al, 0x25",
    "jne     0xbbcbb",
    "xor     edx, edx",
    "cmp     eax, 0xffffffff",
    "mov     esi, ebx",
    "setl    dl",
    "call    kill_pid",
    "test    eax, eax",
    "jns     0xbbeee",
    "lea     r14, [rbp-0xc0]",
    "lea     r13, [rbp-0x140]",
    "mov     rdi, r14",
    "call    sigemptyset",
    "mov     esi, 0x11",
    "mov     rdi, r14",
    "call    sigaddset",
    "mov     rdi, r13",
    "call    sigemptyset",
    "xor     edi, edi",
    "mov     rdx, r13",
    "mov     rsi, r14",
    "call    sigprocmask",
    "mov     rdi, r15",
    "call    get_job_spec",
    "test    eax, eax",
    "js      0xbbf98",
    "mov     r15, qword [r15]",
    "add     dword [rbp-0x154], 0x1",
    "test    r15, r15",
    "jne     0xbbc9c",
    "call    __errno_location",
    "mov     edi, dword [rax]",
    "cmp     edi, 0x16",
    "je      0xbc056",
    "cmp     eax, 0xfffffffe",
    "je      0xbbfc7",
    "lea     rdx, [rel js]",
    "cmp     dword [rdx+0x1c], eax",
    "jle     0xbbfa0",
    "nop     dword [rax]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133bf8]  {\"%s: invalid signal specification\"}",
    "call    dcgettext",
    "mov     rsi, r12",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xbbc90",
    "call    strerror",
    "test    rax, rax",
    "je      0xbc167",
    "xor     edx, edx",
    "mov     rsi, r13",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "jmp     0xbbc90",
    "nop     dword [rax]",
    "mov     rax, qword [r15+0x8]",
    "lea     rsi, [rel 0x12111a]  {\"%s: no such job\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r14, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, r14",
    "xor     eax, eax",
    "call    builtin_error",
    "lea     rdx, [rel jobs]",
    "cdqe    ",
    "mov     rdx, qword [rdx]",
    "mov     rax, qword [rdx+rax*8]",
    "test    rax, rax",
    "je      0xbbfa0",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0xbbf08",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121640]  {\"Unknown error\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "jmp     0xbc0df",
    "mov     rdx, rax",
    "mov     rsi, r13",
    "lea     rdi, [rel data_12164e]  {\"(%ld) - %s\"}",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xbbc90",
    "test    byte [rax+0x18], 0x4",
    "jne     0xbbfe0",
    "mov     r14d, dword [rax+0x10]",
    "jmp     0xbbec8",
    "mov     rax, qword [rax+0x8]",
    "mov     r14d, dword [rax+0x8]",
    "xor     edx, edx",
    "mov     rsi, r13",
    "mov     edi, 0x2",
    "call    sigprocmask",
    "mov     edx, 0x1",
    "mov     esi, ebx",
    "mov     edi, r14d",
    "call    kill_pid",
    "test    eax, eax",
    "js      0xbbff0",
    "call    __errno_location",
    "mov     edi, dword [rax]",
    "cmp     edi, 0x16",
    "je      0xbc056",
    "call    strerror",
    "mov     rdx, rax",
    "test    rax, rax",
    "je      0xbc12a",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121640]  {\"Unknown error\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, rax",
    "jmp     0xbc00d",
    "movsxd  rsi, r14d",
    "lea     rdi, [rel data_12164e]  {\"(%ld) - %s\"}",
    "xor     eax, eax",
    "call    builtin_error",
    "jmp     0xbbc90"
  ]
}