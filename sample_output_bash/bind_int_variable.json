{
  "address": "0x61d00",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using Curve25519/f2994133291147a090851ed21e9c381b",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "decompress data using LZO/26f3c5fbc30d47478934b5c8a528f3cf",
    "hash data using jshash/233fdcfb5e35456582357b77945ff9aa"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rsi",
    "mov     esi, edx",
    "push    r13",
    "sar     esi, 0x7",
    "push    r12",
    "and     esi, 0x1",
    "mov     r12d, edx",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x8",
    "and     edx, 0x1000",
    "je      0x61df0",
    "xor     edx, edx",
    "call    tokenize_array_reference",
    "mov     esi, r12d",
    "shr     esi, 0x2",
    "and     esi, 0x20",
    "test    eax, eax",
    "jne     0x61d50",
    "or      esi, 0x2",
    "xor     edx, edx",
    "call    tokenize_array_reference",
    "test    eax, eax",
    "je      0x61e08",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "mov     rdi, rbx",
    "call    array_variable_name",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x61e98",
    "mov     rdi, rbx",
    "call    legal_identifier",
    "test    eax, eax",
    "je      0x61ea0",
    "mov     esi, r12d",
    "shr     esi, 0x2",
    "and     esi, 0x20",
    "or      esi, 0x40",
    "xor     r13d, r13d",
    "jmp     0x61d96",
    "mov     rdi, rax",
    "call    find_variable",
    "mov     rdi, r13",
    "mov     r15, rax",
    "call    free",
    "test    r15, r15",
    "je      0x61e98",
    "lea     rsi, [rel data_11fa8b]  {\"`%s': not a valid identifier\"}",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     rdi, rbx",
    "xor     r13d, r13d",
    "call    find_variable",
    "test    rax, rax",
    "je      0x61e3f",
    "mov     edx, r12d",
    "xor     ecx, ecx",
    "mov     rsi, r14",
    "mov     rdi, rbx",
    "call    assign_array_element",
    "mov     r12, rax",
    "mov     eax, dword [r15+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     r13d, eax",
    "and     eax, 0xffffffef",
    "mov     dword [r15+0x28 {Elf64_Header::section_header_offset.d}], eax",
    "and     r13d, 0x10",
    "add     rsp, 0x8",
    "mov     rax, r12",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     edx, edx",
    "mov     rsi, r14",
    "mov     rdi, rbx",
    "call    bind_variable",
    "mov     r12, rax",
    "jmp     0x61da9",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     r13d, edx",
    "mov     ecx, edx",
    "and     ecx, 0xffffffef",
    "and     r13d, 0x10",
    "and     edx, 0x4",
    "mov     dword [rax+0x28 {Elf64_Header::section_header_offset.d}], ecx",
    "jne     0x61e58",
    "xor     r12d, r12d",
    "jmp     0x61dd5",
    "mov     eax, dword [r12+0x28]",
    "mov     edx, eax",
    "or      edx, 0x10",
    "test    r13d, r13d",
    "cmovne  eax, edx",
    "mov     edx, eax",
    "and     dh, 0xef",
    "mov     dword [r12+0x28], edx",
    "test    ah, 0x8",
    "jne     0x61e70",
    "test    r12, r12",
    "je      0x61ec0",
    "xor     ecx, ecx",
    "mov     rdx, r14",
    "xor     esi, esi",
    "mov     rdi, rbx",
    "call    bind_array_variable",
    "mov     r12, rax",
    "jmp     0x61da9",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_132f28]  {\"%s: assigning integer to name re\u2026\"}",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_warning",
    "jmp     0x61dd5"
  ]
}