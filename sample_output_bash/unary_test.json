{
  "address": "0x90590",
  "rules": [
    "hash data using djb2/9bc6b91561f04ebca409510ba6653174",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "hash data using jshash/495bfd597bd14a45826758e92f604bf6",
    "get file attributes",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "hide graphical window from taskbar/3804d9f76e4f47c8b3a7ed608bc3a556",
    "encrypt data using HC-128/6b96453112c8451898bd701d3a138e39",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/0ca7235c9c5c4809bc0188a71b737109"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    rbx",
    "sub     rsp, 0xd8",
    "movzx   eax, byte [rdi+0x1]",
    "mov     rdx, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rdx",
    "xor     edx, edx",
    "sub     eax, 0x47",
    "cmp     al, 0x33",
    "ja      0x905d8",
    "{Case 0x1-0x4, 0x6, 0x9-0xa, 0xd-0x19, 0x22-0x23, 0x25-0x26, 0x2a, 0x32}",
    "xor     eax, eax",
    "lea     rdx, [rel jump_table_136f24]",
    "movzx   eax, al",
    "mov     rdi, rsi",
    "movsxd  rax, dword [rdx+rax*4]",
    "add     rax, rdx",
    "jmp     rax",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rbx, qword [rbp-0x8]",
    "leave   ",
    "retn    ",
    "{Case 0x1a, 0x1e}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "{Case 0x5, 0x21}",
    "cmp     byte [rsi], 0x0",
    "je      0x905d8",
    "{Case 0xc}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0xb}",
    "lea     rax, [rel expanding_redir]",
    "xor     esi, esi",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0x90697",
    "{Case 0x1b}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x0}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x8}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x7}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "js      0x905d8",
    "{Case 0x33}",
    "xor     eax, eax",
    "cmp     byte [rsi], 0x0",
    "sete    al",
    "jmp     0x905da",
    "{Case 0x31}",
    "mov     esi, 0x1",
    "call    sh_eaccess",
    "test    eax, eax",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "{Case 0x30}",
    "mov     esi, 0x2",
    "call    sh_eaccess",
    "test    eax, eax",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "{Case 0x2f}",
    "lea     rax, [rel assoc_expand_once]",
    "xor     ebx, ebx",
    "mov     qword [rbp-0xd8], rdi",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "setne   bl",
    "xor     edx, edx",
    "shl     ebx, 0x5",
    "mov     esi, ebx",
    "call    tokenize_array_reference",
    "mov     rdi, qword [rbp-0xd8]",
    "test    eax, eax",
    "je      0x90aa0",
    "{Case 0x2e}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x2d}",
    "lea     rsi, [rbp-0xd0]",
    "call    legal_number",
    "test    eax, eax",
    "je      0x905d8",
    "{Case 0x2c}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x2b}",
    "mov     esi, 0x4",
    "call    sh_eaccess",
    "test    eax, eax",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "{Case 0x29}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x28}",
    "call    minus_o_option_value",
    "cmp     eax, 0x1",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "{Case 0x27}",
    "xor     eax, eax",
    "cmp     byte [rsi], 0x0",
    "setne   al",
    "jmp     0x905da",
    "{Case 0x24}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x20}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x1f}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "js      0x905d8",
    "{Case 0x1d}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "{Case 0x1c}",
    "lea     rsi, [rbp-0xb0]",
    "call    sh_stat",
    "test    eax, eax",
    "jne     0x905d8",
    "mov     rdx, qword [rbp-0x18]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x90b61",
    "lea     rsi, [rbp-0xb0]",
    "call    lstat",
    "test    eax, eax",
    "jne     0x905d8",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0xc000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "call    sub_502c0",
    "test    rax, rax",
    "je      0x905d8",
    "lea     rax, [rel assigning_in_environment]",
    "lea     rdx, [rel executing_builtin]",
    "xor     esi, esi",
    "mov     eax, dword [rax]",
    "or      eax, dword [rdx]",
    "setne   sil",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0x6000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "lea     rax, [rel current_user]",
    "mov     ecx, dword [rbp-0x90]",
    "cmp     dword [rax+0xc], ecx",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "lea     rax, [rel current_user]",
    "mov     ecx, dword [rbp-0x94]",
    "cmp     dword [rax+0x4], ecx",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     rax, qword [rbp-0x58]",
    "cmp     qword [rbp-0x68], rax",
    "jg      0x905d8",
    "lea     rsi, [rbp-0xd0]",
    "mov     qword [rbp-0xd8], rdi",
    "call    legal_number",
    "mov     rdi, qword [rbp-0xd8]",
    "test    eax, eax",
    "je      0x90ae6",
    "lea     rax, [rel shell_compatibility_level]",
    "cmp     dword [rax], 0x33",
    "jle     0x90831",
    "mov     eax, dword [rbp-0x98]",
    "shr     eax, 0xb",
    "and     eax, 0x1",
    "jmp     0x905da",
    "mov     rax, qword [rbp-0xd0]",
    "movsxd  rdx, eax",
    "mov     edi, eax",
    "cmp     rax, rdx",
    "jne     0x905d8",
    "xor     eax, eax",
    "cmp     qword [rbp-0x80], 0x0",
    "setg    al",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0x1000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "shr     eax, 0x9",
    "and     eax, 0x1",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "shr     eax, 0xa",
    "and     eax, 0x1",
    "jmp     0x905da",
    "xor     eax, eax",
    "test    dword [rbp-0x98], 0x7000",
    "sete    al",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0x2000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     eax, dword [rbp-0x98]",
    "and     eax, 0xf000",
    "cmp     eax, 0xa000",
    "sete    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "test    dh, 0x10",
    "jne     0x905d8",
    "mov     eax, 0x1",
    "jne     0x905da",
    "call    find_variable",
    "test    rax, rax",
    "je      0x905d8",
    "mov     rax, qword [rbp-0xd0]",
    "test    rax, rax",
    "js      0x905d8",
    "or      ebx, 0x1",
    "pxor    xmm0, xmm0",
    "lea     rcx, [rbp-0xd0]",
    "xor     esi, esi",
    "mov     rax, 0x8000000000000000",
    "mov     edx, ebx",
    "movaps  xmmword [rbp-0xc0], xmm0",
    "mov     dword [rbp-0xd0], 0xffff",
    "mov     qword [rbp-0xc8], rax",
    "call    sub_98120",
    "mov     rdi, rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "setne   al",
    "cmp     word [rbp-0xce], 0x0",
    "jle     0x90890",
    "or      bl, 0x80",
    "call    isatty",
    "test    eax, eax",
    "setne   al",
    "movzx   eax, al",
    "jmp     0x905da",
    "cmp     qword [rax+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "je      0x905d8",
    "mov     rax, qword [rbp-0x50]",
    "sub     eax, dword [rbp-0x60]",
    "test    eax, eax",
    "setg    al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     edx, dword [rax+0x28 {Elf64_Header::section_header_offset.d}]",
    "mov     ecx, edx",
    "and     ecx, 0x1004",
    "cmp     ecx, 0x4",
    "je      0x90b2a",
    "lea     rdx, [rel posparam_count]",
    "movsxd  rdx, dword [rdx]",
    "cmp     rax, rdx",
    "setle   al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     rdi, qword [rbp-0xc0]",
    "test    rdi, rdi",
    "je      0x905da",
    "mov     dword [rbp-0xd8], eax",
    "call    free",
    "mov     eax, dword [rbp-0xd8]",
    "mov     eax, edx",
    "shr     eax, 0xb",
    "and     eax, 0x1",
    "jmp     0x905da",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "xor     esi, esi",
    "call    array_reference",
    "test    rax, rax",
    "setne   al",
    "movzx   eax, al",
    "jmp     0x905da",
    "mov     ecx, edx",
    "and     ecx, 0x1040",
    "cmp     ecx, 0x40",
    "je      0x90b43",
    "mov     dword [rbp-0xd8], eax",
    "call    free",
    "mov     eax, dword [rbp-0xd8]",
    "jmp     0x905da",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rel data_121b60]  {\"0\"}",
    "call    assoc_reference",
    "test    rax, rax",
    "setne   al",
    "movzx   eax, al",
    "jmp     0x905da",
    "and     dh, 0x10",
    "jne     0x905d8",
    "cmp     qword [rax+0x8 {Elf64_Header::ident.abi_version.q}], 0x0",
    "setne   al",
    "movzx   eax, al",
    "jmp     0x905da"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}