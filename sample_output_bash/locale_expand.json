{
  "address": "0xa92b0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, edx",
    "push    r13",
    "sub     r14d, esi",
    "mov     r13, r8",
    "push    r12",
    "lea     r15d, [r14+0x1]",
    "mov     r12, rdi",
    "push    rbx",
    "mov     ebx, edx",
    "sub     rsp, 0x28",
    "mov     dword [rbp-0x48], ecx",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "movsxd  rax, r15d",
    "mov     dword [rbp-0x44], esi",
    "mov     rdi, rax",
    "mov     qword [rbp-0x50], rax",
    "call    malloc",
    "movsxd  rsi, dword [rbp-0x44]",
    "test    rax, rax",
    "je      0xa9465",
    "mov     rsi, qword [rbp-0x50]",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     dword [rbp-0x3c], esi",
    "mov     r15, rax",
    "cmp     ebx, esi",
    "jle     0xa9458",
    "xor     r14d, r14d",
    "jmp     0xa9332",
    "lea     edx, [r14-0x1]",
    "add     rsi, r12",
    "mov     rdi, rax",
    "add     rdx, 0x1",
    "call    memcpy",
    "mov     dword [rbp-0x3c], ebx",
    "movsxd  rax, r14d",
    "add     rax, r15",
    "mov     byte [rax], 0x0",
    "lea     rax, [rel dump_translatable_strings]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0xa93b0",
    "lea     rax, [rel dump_po_strings]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xa93e8",
    "cmp     byte [r15], 0x0",
    "jne     0xa9380",
    "lea     rsi, [rbp-0x40]",
    "mov     rdi, r15",
    "mov     dword [rbp-0x40], 0x0",
    "call    mk_msgstr",
    "lea     r8, [rel data_122e02]",
    "mov     ecx, dword [rbp-0x48]",
    "lea     rsi, [rel data_133aa8]  {\"#: %s:%d\\nmsgid %s%s\\nmsgstr \"\"\\n\"}",
    "mov     rbx, rax",
    "mov     eax, dword [rbp-0x40]",
    "mov     edi, 0x2",
    "mov     r9, rbx",
    "test    eax, eax",
    "lea     rax, [rel data_120fc7]",
    "cmovne  r8, rax",
    "lea     rax, [rel bash_input]",
    "mov     rdx, qword [rax+0x8]",
    "lea     rax, [rel data_11f036[9]]  {\"stdin\"}",
    "test    rdx, rdx",
    "cmove   rdx, rax",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0xa93d3",
    "mov     rdx, r15",
    "lea     rsi, [rel data_122a03[8]]  {\"\"%s\"\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     rdi, r15",
    "lea     rdx, [rbp-0x3c]",
    "mov     esi, r14d",
    "call    sub_a9150",
    "mov     rdi, r15",
    "mov     rbx, rax",
    "call    free",
    "test    r13, r13",
    "je      0xa93a6",
    "test    r13, r13",
    "je      0xa9355",
    "test    r13, r13",
    "je      0xa9355",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xa9460",
    "mov     dword [r13], r14d",
    "jmp     0xa9355",
    "mov     r15, rbx",
    "jmp     0xa9355",
    "mov     eax, dword [rbp-0x3c]",
    "mov     dword [r13], eax",
    "mov     dword [r13], 0x0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    "
  ]
}