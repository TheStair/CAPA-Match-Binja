{
  "address": "0xa60d0",
  "rules": [
    "write file on Linux",
    "log keystrokes via raw input data/5b32ff98460e406e86dc2ef8d82ba1a5",
    "check Internet connectivity via WinINet/4ebebc1fd30e4dc8aec0393f85edc8f3",
    "check OS version/35d8fd86b2bf418898b01c7af02eb9bc",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "check OS version/a792de506c61438eae0e98a59003db67",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "check OS version/0e7e919fd4d74b758d9097ed7c3be828"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     ebx, edi",
    "sub     rsp, 0x158",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "lea     rax, [rel rl_executing_keyseq]",
    "mov     r12, qword [rax]",
    "lea     rax, [rel rl_key_sequence_length]",
    "movsxd  r13, dword [rax]",
    "lea     rax, [rel _rl_keymap]",
    "mov     r14, r13",
    "mov     r15, qword [rax]",
    "cmp     edi, 0x1",
    "jg      0xa61d0",
    "mov     rdx, r15",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "call    rl_trim_arg_from_keyseq",
    "test    eax, eax",
    "jle     0xa6132",
    "lea     rax, [rel rl_explicit_arg]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0xa61d0",
    "mov     rdi, r15",
    "call    sub_9d860",
    "lea     rcx, [rbp-0x15c]",
    "mov     rsi, r13",
    "mov     rdi, r12",
    "mov     rdx, rax",
    "call    sub_ee140",
    "mov     edx, dword [rbp-0x15c]",
    "cmp     edx, 0x1",
    "je      0xa6200",
    "movsxd  rdx, eax",
    "sub     r14d, eax",
    "add     r12, rdx",
    "movsxd  r13, r14d",
    "jmp     0xa6132",
    "movsx   edx, byte [rax+0x1000]",
    "mov     dword [rbp-0x15c], edx",
    "cmp     edx, 0x2",
    "jne     0xa616c",
    "test    rax, rax",
    "je      0xa616c",
    "lea     rax, [rel _rl_out_stream]",
    "mov     edi, 0xa",
    "mov     rsi, qword [rax]",
    "call    putc",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1339a0]  {\"bash_execute_unix_command: canno\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    internal_error",
    "call    rl_forced_update_display",
    "mov     eax, 0x1",
    "mov     rax, qword [rax+0x1008]",
    "mov     qword [rbp-0x168], rax",
    "test    rax, rax",
    "jne     0xa6237",
    "cmp     edx, 0x2",
    "je      0xa6230",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x158",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     rdi, [rel data_12280f]  {\"ce\"}",
    "call    rl_get_termcap",
    "mov     qword [rbp-0x170], rax",
    "test    rax, rax",
    "je      0xa6510",
    "jmp     0xa616c",
    "mov     qword [rbp-0x168], rax",
    "lea     rax, [rel _rl_out_stream]",
    "mov     edi, 0xa",
    "mov     rsi, qword [rax]",
    "call    putc",
    "jmp     0xa6267",
    "call    rl_clear_visible_line",
    "lea     rax, [rel rl_outstream]",
    "mov     rdi, qword [rax]",
    "call    fflush",
    "lea     rax, [rel rl_line_buffer]",
    "lea     r14, [rel data_120cb0]  {\"READLINE_LINE\"}",
    "xor     edx, edx",
    "mov     rdi, r14",
    "mov     rsi, qword [rax]",
    "call    bind_variable",
    "test    rax, rax",
    "je      0xa628b",
    "lea     r12, [rel locale_mb_cur_max]",
    "lea     rax, [rel rl_point]",
    "cmp     dword [r12], 0x1",
    "movsxd  rdi, dword [rax]",
    "jle     0xa62ab",
    "or      dword [rax+0x28], 0x1",
    "lea     r15, [rbp-0x14c]",
    "xor     r8d, r8d",
    "mov     esi, 0xa",
    "mov     ecx, 0xc",
    "mov     rdx, r15",
    "lea     r13, [rel data_120cbe]  {\"READLINE_POINT\"}",
    "call    fmtulong",
    "xor     edx, edx",
    "mov     rdi, r13",
    "mov     rsi, rax",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xa62e4",
    "call    sub_a6030",
    "movsxd  rdi, eax",
    "lea     rax, [rel rl_mark]",
    "cmp     dword [r12], 0x1",
    "movsxd  rdi, dword [rax]",
    "jle     0xa62fd",
    "or      dword [rax+0x28], 0x1",
    "xor     r8d, r8d",
    "mov     rdx, r15",
    "mov     esi, 0xa",
    "mov     ecx, 0xc",
    "call    fmtulong",
    "lea     r12, [rel data_120ccd]  {\"READLINE_MARK\"}",
    "xor     edx, edx",
    "mov     rsi, rax",
    "mov     rdi, r12",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xa632f",
    "call    sub_a6030",
    "movsxd  rdi, eax",
    "cmp     ebx, 0x1",
    "jg      0xa64b8",
    "or      dword [rax+0x28], 0x1",
    "movsxd  rdi, ebx",
    "xor     r8d, r8d",
    "mov     rdx, r15",
    "mov     esi, 0xa",
    "mov     ecx, 0xc",
    "call    fmtulong",
    "xor     edx, edx",
    "mov     rsi, rax",
    "lea     rax, [rel data_120cdb]  {\"READLINE_ARGUMENT\"}",
    "mov     rdi, rax",
    "mov     qword [rbp-0x178], rax",
    "call    bind_int_variable",
    "test    rax, rax",
    "je      0xa6357",
    "lea     rax, [rel rl_explicit_arg]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xa64b8",
    "lea     rax, [rel array_needs_making]",
    "lea     r15, [rbp-0x140]",
    "mov     rdi, r15",
    "mov     dword [rax], 0x1",
    "call    save_parser_state",
    "call    rl_clear_signals",
    "mov     rdi, qword [rbp-0x168]",
    "call    strlen",
    "lea     rbx, [rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0xa657c",
    "or      dword [rax+0x28], 0x1",
    "jmp     0xa6357",
    "lea     rax, [rel data_120cdb]  {\"READLINE_ARGUMENT\"}",
    "mov     qword [rbp-0x178], rax",
    "mov     qword [rbp-0x180], rax",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rsi, qword [rbp-0x168]",
    "mov     rdi, rcx",
    "mov     rdx, rbx",
    "call    __strcpy_chk",
    "mov     edx, 0x4",
    "lea     rsi, [rel data_120ced]  {\"bash_execute_unix_command\"}",
    "mov     rdi, rax",
    "call    parse_and_execute",
    "mov     ebx, eax",
    "call    rl_set_signals",
    "mov     rdi, r15",
    "call    restore_parser_state",
    "mov     rdi, r14",
    "call    find_variable",
    "test    rax, rax",
    "je      0xa6401",
    "mov     rdi, r13",
    "call    find_variable",
    "test    rax, rax",
    "je      0xa6426",
    "mov     r15, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "test    r15, r15",
    "je      0xa6401",
    "mov     rdi, r12",
    "call    find_variable",
    "test    rax, rax",
    "je      0xa644b",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rbp-0x158]",
    "call    legal_number",
    "test    eax, eax",
    "jne     0xa6540",
    "lea     rax, [rel rl_line_buffer]",
    "mov     rdi, r15",
    "mov     rsi, qword [rax]",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xa6530",
    "mov     rdi, r14",
    "call    check_unbind_variable",
    "mov     rdi, r13",
    "call    check_unbind_variable",
    "mov     rdi, r12",
    "call    check_unbind_variable",
    "mov     rdi, qword [rbp-0x178]",
    "call    check_unbind_variable",
    "lea     rax, [rel array_needs_making]",
    "cmp     qword [rbp-0x170], 0x0",
    "mov     dword [rax], 0x1",
    "je      0xa6500",
    "mov     rdi, qword [rax+0x8 {Elf64_Header::ident.abi_version}] {Elf64_Header::ident.pad[0]} {Elf64_Header::ident.pad[1]} {Elf64_Header::ident.pad[2]} {Elf64_Header::ident.pad[3]} {Elf64_Header::ident.pad[4]} {Elf64_Header::ident.pad[5]} {Elf64_Header::ident.pad[6]}",
    "lea     rsi, [rbp-0x158]",
    "call    legal_number",
    "test    eax, eax",
    "jne     0xa6560",
    "lea     rsi, [rel rl_point]",
    "mov     edi, dword [rbp-0x158]",
    "call    sub_9d060",
    "jmp     0xa6426",
    "mov     rdi, r15",
    "call    sub_a0560",
    "jmp     0xa6401",
    "call    rl_forced_update_display",
    "xor     eax, eax",
    "jmp     0xa61a7",
    "cmp     ebx, 0x7c",
    "je      0xa6500",
    "lea     rsi, [rel rl_mark]",
    "mov     edi, dword [rbp-0x158]",
    "call    sub_9d060",
    "jmp     0xa644b",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xa6577",
    "lea     rax, [rel rl_display_prompt]",
    "mov     esi, 0xa",
    "mov     rdi, qword [rax]",
    "call    strrchr",
    "test    rax, rax",
    "je      0xa6500",
    "lea     rdi, [rax+0x1]",
    "call    sub_f9c70",
    "xor     eax, eax",
    "jmp     0xa61a7"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}