{
  "address": "0x8dee0",
  "rules": [
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/811ca4c4f8d549569ea2aaef177bf1ac",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/e07fefb4fc9348cdbcc471f43936d29f",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/19c5b9e7682744d8b574f82a4f55cf68",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/71ff62d8869d418e88d129a8b5fcc11b"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x28",
    "mov     rdi, qword [rdi]",
    "call    find_variable",
    "test    rax, rax",
    "je      0x8e120",
    "mov     rdi, qword [rbx+0x18]",
    "test    rdi, rdi",
    "je      0x8e10f",
    "mov     rdi, rax",
    "call    get_variable_value",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x8e120",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbx+0x8]",
    "mov     dword [rbx+0x10], 0x0",
    "xor     r12d, r12d",
    "mov     r13, rax",
    "test    rax, rax",
    "jne     0x8df4f",
    "mov     r14, qword [rbx+0x18]",
    "test    r14, r14",
    "je      0x8e0d8",
    "mov     rdi, qword [rax {Elf64_Header::ident.signature[0]}] {Elf64_Header::ident.signature[1]} {Elf64_Header::ident.signature[2]} {Elf64_Header::ident.signature[3]} {Elf64_Header::ident.file_class} {Elf64_Header::ident.encoding} {Elf64_Header::ident.version} {Elf64_Header::ident.os}",
    "test    rdi, rdi",
    "je      0x8df76",
    "call    free",
    "mov     qword [rbx+0x18], 0x0",
    "jmp     0x8e10f",
    "mov     rax, qword [rbx+0x8]",
    "mov     dword [rbx+0x10], 0x0",
    "mov     r13, rax",
    "test    rax, rax",
    "jne     0x8df4f",
    "movzx   eax, byte [r14]",
    "cmp     byte [r12 {Elf64_Header::ident.signature[0]}], al",
    "je      0x8e170",
    "mov     rdi, rax",
    "call    free",
    "mov     rdi, qword [rbx+0x18]",
    "mov     qword [rbx+0x8], 0x0",
    "test    rdi, rdi",
    "je      0x8df9c",
    "nop     word [rax+rax]",
    "jmp     0x8dfa5",
    "mov     rsi, r14",
    "mov     rdi, r12",
    "call    strcmp",
    "test    eax, eax",
    "jne     0x8df38",
    "mov     rax, qword [rbx+0x8]",
    "mov     dword [rbx+0x10], 0x0",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x8e198",
    "test    r12, r12",
    "je      0x8e10f",
    "call    free",
    "mov     qword [rbx+0x18], 0x0",
    "call    free",
    "mov     rdi, qword [r13+0x10 {Elf64_Header::type}] {Elf64_Header::machine} {Elf64_Header::version}",
    "add     r13, 0x10 {Elf64_Header::type}",
    "test    rdi, rdi",
    "jne     0x8df60",
    "mov     rax, qword [rbx+0x8]",
    "cmp     byte [r12 {Elf64_Header::ident.signature[0]}], 0x0",
    "je      0x8e10f",
    "jmp     0x8e10f",
    "mov     rdi, r14",
    "call    free",
    "mov     qword [rbx+0x18], 0x0",
    "jmp     0x8dfa5",
    "mov     rdi, r12",
    "call    strlen",
    "lea     r13, [rax+0x1]",
    "mov     rdi, r13",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x8e1d4",
    "mov     rsi, r13",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r13",
    "mov     rsi, r12",
    "mov     rdi, r14",
    "call    __strcpy_chk",
    "mov     qword [rbx+0x18], r14",
    "cmp     byte [r12 {Elf64_Header::ident.signature[0]}], 0x0",
    "je      0x8e188",
    "xor     eax, eax",
    "xor     r14d, r14d",
    "jmp     0x8e0ff",
    "mov     dword [rbp-0x34], 0x0",
    "xor     r15d, r15d",
    "xor     r13d, r13d",
    "xor     r14d, r14d",
    "jmp     0x8e040",
    "mov     rdx, qword [rbx+0x8]",
    "mov     qword [rdx+rax], 0x0",
    "mov     dword [rbx+0x10], r14d",
    "mov     ecx, 0x51",
    "mov     esi, r13d",
    "lea     rdx, [rel data_1217f9]  {\":\"}",
    "mov     rdi, r12",
    "call    skip_to_delim",
    "mov     esi, r13d",
    "mov     rdi, r12",
    "mov     edx, eax",
    "mov     dword [rbp-0x40], eax",
    "call    substring",
    "mov     rcx, rax",
    "movsxd  rax, dword [rbp-0x40]",
    "cmp     byte [r12+rax], 0x3a",
    "mov     r13d, eax",
    "jne     0x8e07c",
    "mov     rdx, qword [rbx+0x8]",
    "test    rcx, rcx",
    "je      0x8e0f8",
    "add     r13d, 0x1",
    "movsxd  rax, r14d",
    "shl     rax, 0x4",
    "add     r14d, 0x1",
    "cmp     dword [rbp-0x34], r14d",
    "jg      0x8e000",
    "add     rdx, r15",
    "mov     rdi, rcx",
    "mov     qword [rdx], rcx",
    "mov     qword [rbp-0x40], rdx",
    "call    strlen",
    "mov     rdx, qword [rbp-0x40]",
    "mov     dword [rdx+0x8], eax",
    "mov     rax, qword [rbx+0x20]",
    "mov     dword [rdx+0xc], 0x0",
    "test    rax, rax",
    "je      0x8e02e",
    "add     dword [rbp-0x34], 0xa",
    "movsxd  rax, dword [rbp-0x34]",
    "mov     qword [rbp-0x40], rcx",
    "shl     rax, 0x4",
    "mov     qword [rbp-0x48], rax",
    "mov     rsi, rax",
    "test    rdx, rdx",
    "je      0x8e158",
    "movsxd  rax, r13d",
    "add     r15, 0x10",
    "cmp     byte [r12+rax], 0x0",
    "je      0x8e0f8",
    "mov     rdi, rdx",
    "call    rax",
    "mov     rdi, qword [rbp-0x48]",
    "call    malloc",
    "mov     rcx, qword [rbp-0x40]",
    "mov     rdx, rax",
    "jmp     0x8e0c2",
    "mov     rdi, rdx",
    "call    realloc",
    "mov     rcx, qword [rbp-0x40]",
    "mov     rdx, rax",
    "test    rdx, rdx",
    "je      0x8e1ad",
    "mov     rsi, qword [rbp-0x48]",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "xor     eax, eax",
    "mov     qword [rbp-0x50], rcx",
    "mov     qword [rbp-0x40], rdx",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rbx+0x8], rdx",
    "jmp     0x8e000"
  ]
}