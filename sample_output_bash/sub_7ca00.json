{
  "address": "0x7ca00",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     dword [rbp-0x38], edi",
    "mov     dword [rbp-0x44], ecx",
    "mov     dword [rbp-0x48], r8d",
    "test    rdx, rdx",
    "je      0x7cbb0",
    "xor     esi, esi",
    "jmp     0x7cb31",
    "lea     rbx, [rel wdcache]",
    "mov     r14, rsi",
    "mov     r13, rdx",
    "xor     r12d, r12d",
    "jmp     0x7ca9b",
    "cmp     dword [rbp-0x44], 0x2a",
    "je      0x7cb90",
    "mov     rax, qword [r13+0x8]",
    "mov     edi, dword [rbp-0x38]",
    "mov     rsi, r14",
    "mov     rdx, qword [rax]",
    "call    sub_7c5c0",
    "mov     edx, dword [rbx+0xc]",
    "mov     rcx, rax",
    "test    edx, edx",
    "jg      0x7ca40",
    "mov     edx, dword [rel data_1619c4]",
    "test    edx, edx",
    "je      0x7cb37",
    "mov     edx, dword [rbp-0x48]",
    "mov     edi, dword [rbp-0x44]",
    "xor     ecx, ecx",
    "mov     qword [rbp-0x38], rsi",
    "call    string_list_pos_params",
    "mov     rdi, qword [rbp-0x38]",
    "mov     rbx, rax",
    "call    dispose_words",
    "add     rsp, 0x28",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "sub     edx, 0x1",
    "mov     rax, qword [rbx]",
    "mov     dword [rbx+0xc], edx",
    "movsxd  rdx, edx",
    "mov     r15, qword [rax+rdx*8]",
    "mov     edi, 0x10",
    "mov     qword [rbp-0x40], rax",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x321fa",
    "lea     rax, [rel ifs_is_null]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "je      0x7cb37",
    "mov     edi, 0x1",
    "call    malloc",
    "mov     rcx, rax",
    "test    rax, rax",
    "je      0x7cbb7",
    "mov     qword [r15], rcx",
    "lea     rcx, [rel wlcache]",
    "mov     eax, dword [rcx+0xc]",
    "test    eax, eax",
    "jle     0x7cae0",
    "mov     esi, 0x10",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rcx, qword [rbp-0x40]",
    "jmp     0x7ca50",
    "or      dword [rbp-0x48], 0x1",
    "jmp     0x7cb37",
    "mov     qword [rbp-0x40], rax",
    "mov     esi, 0x1",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     byte [rcx], 0x0",
    "jmp     0x7ca68",
    "mov     edi, 0x10",
    "call    malloc",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x321dd",
    "mov     rsi, qword [rcx]",
    "sub     eax, 0x1",
    "mov     dword [rcx+0xc], eax",
    "cdqe    ",
    "mov     rsi, qword [rsi+rax*8]",
    "mov     qword [rsi], r12",
    "mov     r13, qword [r13]",
    "mov     qword [rsi+0x8], r15",
    "test    r13, r13",
    "je      0x7cb06",
    "mov     dword [r15+0x8], 0x0",
    "mov     qword [r15], 0x0",
    "test    rcx, rcx",
    "je      0x7cb70",
    "mov     esi, 0x10",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rsi], r12",
    "mov     r13, qword [r13]",
    "mov     qword [rsi+0x8], r15",
    "test    r13, r13",
    "jne     0x7ca98",
    "test    r12, r12",
    "je      0x7cb31",
    "mov     r12, rsi",
    "mov     qword [rsi], 0x0",
    "mov     rdx, rsi",
    "mov     rsi, r12",
    "jmp     0x7cb23",
    "mov     rax, qword [rsi]",
    "mov     qword [rsi], rdx",
    "mov     rdx, rsi",
    "test    rax, rax",
    "jne     0x7cb20",
    "mov     rsi, rax"
  ]
}