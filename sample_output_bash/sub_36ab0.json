{
  "address": "0x36ab0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     r12, [rel current_readline_line]",
    "mov     rdi, qword [r12]",
    "test    rdi, rdi",
    "je      0x36afd",
    "lea     rax, [rel bash_readline_initialized]",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "je      0x36c90",
    "lea     r14, [rel current_readline_line_index]",
    "movsxd  rax, dword [r14]",
    "mov     rdx, rax",
    "add     rax, rdi",
    "cmp     byte [rax], 0x0",
    "jne     0x36c26",
    "call    sub_a65a0",
    "jmp     0x36b0e",
    "lea     rax, [rel job_control]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x36c78",
    "add     edx, 0x1",
    "mov     dword [r14], edx",
    "movzx   eax, byte [rax]",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "nop     ",
    "lea     rax, [rel shell_pgrp]",
    "xor     esi, esi",
    "mov     edi, dword [rax]",
    "call    give_terminal_to",
    "jmp     0x36b1f",
    "test    byte [rel data_1611a4+4], 0x40",
    "je      0x36c58",
    "lea     rsi, [rel sigint_sighandler]",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "mov     rbx, rax",
    "jmp     0x36b33",
    "lea     rbx, [rel initialize_traps]",
    "lea     rax, [rel rl_instream]",
    "mov     rdi, qword [rax]",
    "call    fileno",
    "xor     edx, edx",
    "mov     esi, 0x3",
    "mov     r13d, eax",
    "mov     edi, eax",
    "xor     eax, eax",
    "call    fcntl",
    "test    eax, eax",
    "js      0x36b62",
    "lea     rax, [rel current_readline_prompt]",
    "mov     rdi, qword [rax]",
    "lea     rax, [rel data_122e02]",
    "test    rdi, rdi",
    "cmove   rdi, rax",
    "call    readline",
    "mov     qword [r12], rax",
    "mov     r13, rax",
    "lea     rax, [rel terminating_signal]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "jne     0x36c40",
    "test    ah, 0x8",
    "jne     0x36ca0",
    "mov     edi, dword [rax]",
    "mov     eax, dword [rel data_161100]",
    "test    eax, eax",
    "jne     0x36b97",
    "test    byte [rel data_1611a4+4], 0x40",
    "jne     0x36bba",
    "and     ah, 0xf7",
    "mov     esi, 0x4",
    "mov     edi, r13d",
    "mov     edx, eax",
    "xor     eax, eax",
    "call    fcntl",
    "jmp     0x36b62",
    "call    sub_8e2b0",
    "{ Does not return }",
    "test    r13, r13",
    "je      0x36cc0",
    "cmp     rbx, qword [rel data_157f80]",
    "je      0x36bba",
    "add     rsp, 0x8",
    "mov     eax, 0xffffffff",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "lea     r14, [rel current_readline_line_index]",
    "mov     rdi, r13",
    "mov     dword [r14], 0x0",
    "call    strlen",
    "mov     rdi, r13",
    "lea     r15d, [rax+0x2]",
    "mov     rbx, rax",
    "movsxd  r15, r15d",
    "mov     rsi, r15",
    "call    realloc",
    "test    rax, rax",
    "je      0x36cd4",
    "mov     rsi, rbx",
    "mov     edi, 0x2",
    "call    set_signal_handler",
    "mov     r13, qword [r12]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdx, r15",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "movsxd  rdx, ebx",
    "mov     qword [r12], rax",
    "add     ebx, 0x1",
    "mov     byte [rax+rdx], 0xa",
    "mov     rax, qword [r12]",
    "movsxd  rbx, ebx",
    "mov     byte [rax+rbx], 0x0",
    "movsxd  rax, dword [r14]",
    "mov     rdi, qword [r12]",
    "mov     rdx, rax",
    "add     rax, rdi",
    "cmp     byte [rax], 0x0",
    "je      0x36af0",
    "call    free",
    "mov     qword [r12], 0x0"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}