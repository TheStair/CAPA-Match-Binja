{
  "address": "0xee4f0",
  "rules": [
    "empty recycle bin quietly/31390d7f6c22447cbafb7a06099c11cf",
    "enumerate PE sections/e6d948bde3684bb6957c49d9f114149e/04a0ce22163e41b5b6db2eedde7f1595",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "64-bit execution via heavens gate/d58d4d4d21df4a40a0d1c179ab0e3a6a",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     rbx, rdi",
    "sub     rsp, 0x38",
    "mov     r14d, dword [rel data_16a84c]",
    "mov     r12d, dword [rel data_16a848]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "mov     rdx, qword [rel data_16a840]",
    "lea     r13d, [r14+0x1]",
    "cmp     r13d, r12d",
    "jl      0xee56a",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "movsxd  rcx, r14d",
    "mov     dword [rel data_16a84c], r13d",
    "movzx   r15d, byte [rax]  {_rl_parsing_conditionalized_out}",
    "mov     byte [rdx+rcx], r15b",
    "test    r15b, r15b",
    "jne     0xee64a",
    "test    rdx, rdx",
    "je      0xee920",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xeed9a",
    "mov     rdi, rbx",
    "call    strlen",
    "mov     dword [rbp-0x3c {var_44}], 0x0",
    "mov     rdx, rbx",
    "xor     ecx, ecx  {0x0}",
    "mov     r12, rax",
    "movzx   eax, byte [rbx]",
    "test    al, al",
    "je      0xee5d2",
    "mov     dword [rel data_16a848], 0x14",
    "mov     edi, 0x14",
    "call    malloc",
    "mov     rdx, rax",
    "test    rax, rax",
    "jne     0xee563",
    "add     r12d, 0x14",
    "mov     rdi, rdx",
    "mov     dword [rel data_16a848], r12d",
    "movsxd  r12, r12d",
    "mov     rsi, r12",
    "call    realloc",
    "mov     rdx, rax",
    "test    rax, rax",
    "je      0xeed9f",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "xor     eax, eax  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rax, [rel rl_terminal_name]",
    "mov     r13, qword [rax]  {rl_terminal_name}",
    "test    r13, r13",
    "je      0xee5fd",
    "nop     word [rax+rax]",
    "mov     qword [rel data_16a840], rdx",
    "mov     qword [rbp-0x58 {oldmem_3}], rax",
    "mov     esi, 0x14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "jmp     0xeedad",
    "mov     qword [rbp-0x58 {oldmem_4}], rax",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1229c1]  {\"mode=\"}",
    "mov     rdi, rbx",
    "call    strncasecmp",
    "test    eax, eax",
    "jne     0xee670",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1229bb]  {\"term=\"}",
    "mov     rdi, rbx",
    "call    strncasecmp",
    "test    eax, eax",
    "je      0xee890",
    "lea     rax, [rel rl_terminal_name]",
    "mov     byte [rdx], 0x0",
    "mov     dword [rbp-0x3c {var_44}], ecx",
    "mov     r13, qword [rax]  {rl_terminal_name}",
    "test    r13, r13",
    "jne     0xee5e1",
    "cmp     al, 0x9",
    "je      0xee870",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, 0x7",
    "lea     rsi, [rel data_1222d3[0xd]]  {\"version\"}",
    "mov     rdi, rbx",
    "call    strncasecmp",
    "mov     r8d, eax",
    "test    eax, eax",
    "jne     0xee970",
    "add     rbx, 0x5",
    "lea     rsi, [rel data_11f280]  {\"emacs\"}",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "mov     edx, eax",
    "mov     eax, 0x1",
    "test    edx, edx",
    "jne     0xee958",
    "mov     rdi, r13",
    "call    strlen",
    "lea     r12, [rax+0x1]",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0xeedc8",
    "jmp     0xee5fd",
    "movzx   eax, byte [rdx+0x1]",
    "add     rdx, 0x1",
    "test    al, al",
    "jne     0xee5b0",
    "lea     rax, [rel rl_readline_name]",
    "mov     rdi, rbx",
    "mov     rsi, qword [rax]  {rl_readline_name}",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xee998",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "mov     byte [rax], 0x1  {_rl_parsing_conditionalized_out}",
    "movsxd  rax, dword [rbp-0x3c {var_44}]",
    "test    eax, eax",
    "jle     0xee6b4",
    "lea     rsi, [rel data_120c31]  {\"vi\"}",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "neg     eax",
    "sbb     eax, eax",
    "jmp     0xee637",
    "lea     rdx, [rel rl_editing_mode]",
    "cmp     dword [rdx], eax",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "setne   byte [rax]  {_rl_parsing_conditionalized_out}",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rdx, r12",
    "mov     rsi, r13",
    "mov     rdi, r14",
    "mov     r12, r14",
    "call    __strcpy_chk",
    "mov     esi, 0x2d",
    "mov     rdi, r14",
    "call    strchr",
    "test    rax, rax",
    "je      0xee8d6",
    "add     ecx, 0x1",
    "cmp     al, 0x20",
    "je      0xee870",
    "mov     dword [rbp-0x3c {var_44}], ecx",
    "lea     r14, [rel data_156f58]",
    "xor     r15d, r15d  {0x0}",
    "lea     rsi, [rel data_122981]  {\"bind-tty-special-chars\"}",
    "jmp     0xee9c4",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "mov     byte [rax], 0x0  {_rl_parsing_conditionalized_out}",
    "jmp     0xee64a",
    "movsxd  r12, r12d",
    "mov     dword [rbp-0x3c {var_44}], 0x7",
    "mov     byte [rbx+r12], 0x0",
    "movzx   eax, byte [rbx+0x7]",
    "cmp     al, 0x20",
    "je      0xee6d3",
    "cmp     eax, r12d",
    "jg      0xee6b4",
    "add     rbx, 0x5",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "test    eax, eax",
    "je      0xee901",
    "mov     byte [rax], 0x0",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xee9b0",
    "lea     rcx, [rbx+0x8]",
    "mov     rdx, rcx",
    "nop     word [rax+rax]",
    "lea     r9, [rbx+0x7]",
    "cmp     al, 0x9",
    "jne     0xee6fd",
    "lea     rax, [rbx+rax-0x1]",
    "cmp     byte [rax], 0x0",
    "je      0xeea81",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "mov     rdi, r12",
    "mov     byte [rax], r15b  {_rl_parsing_conditionalized_out}",
    "call    free",
    "jmp     0xee64a",
    "lea     rax, [rel rl_terminal_name]",
    "mov     rdi, rbx",
    "mov     rsi, qword [rax]  {rl_terminal_name}",
    "call    strcasecmp",
    "test    eax, eax",
    "setne   r15b",
    "mov     rsi, qword [r14]",
    "add     r14, 0x18",
    "add     r15d, 0x1",
    "test    rsi, rsi",
    "je      0xeec33",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "movsxd  r15, r15d",
    "lea     rdx, [r15+r15*2]",
    "mov     byte [rax], 0x1  {_rl_parsing_conditionalized_out}",
    "lea     rax, [rel data_156f40]",
    "mov     r14, qword [rax+rdx*8]",
    "movzx   eax, byte [rdx]",
    "mov     r9, rdx",
    "lea     rdx, [rdx+0x1]",
    "cmp     al, 0x20",
    "je      0xee6e0",
    "cmp     al, 0x9",
    "je      0xee6e0",
    "lea     edx, [rax-0x3c]",
    "cmp     dl, 0x2",
    "jbe     0xee70d",
    "mov     byte [rax], 0x20",
    "jmp     0xee6b4",
    "lea     r15, [rel data_155638]",
    "xor     r14d, r14d  {0x0}",
    "lea     rsi, [rel data_122998]  {\"active-region-end-color\"}",
    "jmp     0xeec64",
    "movsxd  rdx, ecx",
    "movsxd  r12, r12d",
    "mov     dword [rbp-0x3c {var_44}], ecx",
    "lea     r8, [rbx+rdx]",
    "mov     byte [rbx+r12], 0x0",
    "movzx   eax, byte [r8]",
    "cmp     al, 0x20",
    "je      0xeea26",
    "test    eax, eax",
    "jg      0xeed15",
    "mov     edx, r9d",
    "sub     edx, ecx",
    "add     edx, 0x8",
    "mov     dword [rbp-0x3c {var_44}], edx",
    "mov     rdi, rbx",
    "lea     rsi, [rbp-0x3c {var_44}]",
    "xor     eax, eax  {0x0}",
    "call    sub_eaee0",
    "mov     edi, eax",
    "test    edi, edi",
    "jle     0xeed2b",
    "cmp     al, 0x21",
    "jne     0xeea89",
    "mov     rdi, rbx",
    "call    strcasecmp",
    "test    eax, eax",
    "jne     0xeec50",
    "lea     rsi, [rbx+rdx+0x1]",
    "mov     rdx, rsi",
    "nop     ",
    "cmp     al, 0x9",
    "jne     0xeea4e",
    "lea     rax, [rbx+rax-0x1]",
    "cmp     byte [rax], 0x0",
    "jne     0xeea08",
    "mov     rsi, r9",
    "lea     rdi, [rel data_134738]  {\"comparison operator expected, fo\u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "movsxd  rax, dword [rbp-0x3c {var_44}]",
    "lea     rsi, [rbx+rax]",
    "mov     r9, rax",
    "movzx   edx, byte [rsi]",
    "test    dl, dl",
    "je      0xeed02",
    "test    al, al",
    "lea     rax, [rel data_122350]",
    "lea     rdi, [rel data_134738]  {\"comparison operator expected, fo\u2026\"}",
    "cmove   r9, rax  {data_122350, \"end-of-line\"}",
    "xor     eax, eax  {0x0}",
    "mov     rsi, r9",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "mov     rsi, qword [r15]",
    "add     r15, 0x18",
    "add     r14d, 0x1",
    "test    rsi, rsi",
    "je      0xeed41",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "movsxd  r14, r14d",
    "lea     rdx, [r14+r14*2]",
    "mov     byte [rax], 0x1  {_rl_parsing_conditionalized_out}",
    "lea     rax, [rel data_155620]",
    "mov     r14, qword [rax+rdx*8]",
    "jmp     0xee9ec",
    "movzx   eax, byte [rdx]",
    "mov     r8, rdx",
    "lea     rdx, [rdx+0x1]",
    "cmp     al, 0x20",
    "je      0xeea30",
    "cmp     al, 0x9",
    "je      0xeea30",
    "cmp     al, 0x3d",
    "je      0xeeb2b",
    "mov     byte [rax], 0x20",
    "jmp     0xeea08",
    "lea     rdi, [rel data_134768]  {\"numeric argument expected, found\u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "lea     rcx, [rbx+rax+0x1]",
    "add     r9d, 0x1",
    "mov     r13d, dword [rbp-0x48 {var_50}]",
    "xor     eax, eax  {0x0}",
    "mov     r11, rcx",
    "sub     r9d, esi",
    "sub     r11, rsi",
    "jmp     0xee76e",
    "lea     rax, [rel _rl_parsing_conditionalized_out]",
    "mov     byte [rax], 0x1  {_rl_parsing_conditionalized_out}",
    "jmp     0xee64a",
    "mov     rdi, r14",
    "call    strlen",
    "mov     rcx, rax",
    "movsxd  rax, dword [rbp-0x3c {var_44}]",
    "cmp     eax, r12d",
    "jg      0xeea08",
    "add     ecx, 0x1",
    "sub     ecx, esi",
    "lea     edx, [rcx+r8]",
    "mov     dword [rbp-0x3c {var_44}], edx",
    "lea     rsi, [rbp-0x3c {var_44}]",
    "mov     rdi, rbx",
    "xor     eax, eax  {0x0}",
    "call    sub_eaee0",
    "mov     r15d, eax",
    "lea     eax, [rax-0x1]",
    "cmp     eax, 0x1",
    "ja      0xeed50",
    "cmp     al, 0x21",
    "je      0xeeb2b",
    "cmp     dl, 0x20",
    "mov     r10d, eax",
    "sete    al",
    "cmp     dl, 0x9",
    "sete    r12b",
    "or      al, r12b",
    "jne     0xee758",
    "mov     rsi, r8",
    "lea     rdi, [rel data_1347b0]  {\"equality comparison operator exp\u2026\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "movsxd  rax, dword [rbp-0x3c {var_44}]",
    "lea     r12, [rbx+rax]",
    "mov     r9, rax",
    "movzx   edx, byte [r12]",
    "test    dl, dl",
    "je      0xeed7c",
    "test    al, al",
    "lea     rax, [rel data_122350]",
    "lea     rdi, [rel data_1347b0]  {\"equality comparison operator exp\u2026\"}",
    "cmove   r8, rax  {data_122350, \"end-of-line\"}",
    "xor     eax, eax  {0x0}",
    "mov     rsi, r8",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "movzx   edx, byte [rcx]",
    "lea     r13d, [r9+rsi]",
    "add     rcx, 0x1",
    "add     rsi, r11",
    "test    dl, dl",
    "je      0xeed02",
    "test    r10b, r10b",
    "je      0xee78c",
    "mov     rsi, r12",
    "lea     rdi, [rel data_1229c7]  {\"argument expected, found `%s'\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "lea     rcx, [rbx+rax+0x1]",
    "lea     esi, [r9+0x1]",
    "mov     r10d, dword [rbp-0x50 {var_58}]",
    "xor     eax, eax  {0x0}",
    "mov     r8, rcx",
    "sub     esi, r12d",
    "sub     r8, r12",
    "jmp     0xeeb96",
    "sub     edx, 0x30",
    "cmp     dl, 0x9",
    "ja      0xeed02",
    "mov     dword [rbp-0x3c {var_44}], r13d",
    "cmp     dl, 0x20",
    "mov     edi, eax",
    "sete    al",
    "cmp     dl, 0x9",
    "sete    dl",
    "or      al, dl",
    "jne     0xeeb80",
    "movsxd  r11, dword [rbp-0x3c {var_44}]",
    "xor     r9d, r9d  {0x0}",
    "movzx   edx, byte [rbx+r11]",
    "lea     ecx, [r11+0x1]",
    "mov     r10, r11",
    "movsxd  rcx, ecx",
    "lea     r12d, [rdx-0x30]",
    "cmp     r12b, 0x9",
    "ja      0xee7ea",
    "movzx   edx, byte [rcx]",
    "lea     r10d, [rsi+r12]",
    "add     rcx, 0x1",
    "add     r12, r8",
    "test    dl, dl",
    "je      0xeed7c",
    "test    dil, dil",
    "je      0xeebb4",
    "cmp     dl, 0x2e",
    "je      0xeec91",
    "nop     dword [rax+rax]",
    "lea     rdx, [rbx+r9]",
    "movzx   ecx, byte [rdx]",
    "test    cl, cl",
    "je      0xeed92",
    "mov     dword [rbp-0x3c {var_44}], r10d",
    "movsxd  r9, r10d",
    "movzx   edx, byte [rbx+r11+0x1]",
    "lea     ecx, [rdx-0x30]",
    "cmp     cl, 0x9",
    "jbe     0xeeca3",
    "movsxd  rsi, dword [rbp-0x3c {var_44}]",
    "mov     rdx, rsi",
    "add     rsi, rbx",
    "movzx   ecx, byte [rsi]",
    "sub     edx, 0x30",
    "lea     r9d, [r9+r9*4]",
    "mov     r11, rcx",
    "movsx   edx, dl",
    "lea     r9d, [rdx+r9*2]",
    "movzx   edx, byte [rbx+rcx]",
    "lea     rcx, [rcx+0x1]",
    "lea     r10d, [rdx-0x30]",
    "cmp     r10b, 0x9",
    "jbe     0xee7c0",
    "mov     dword [rbp-0x3c {var_44}], r11d",
    "mov     r10d, r11d",
    "mov     rbx, rdx",
    "jmp     0xeebf0",
    "lea     rax, [rbx+r9+0x1]",
    "mov     rbx, rdx",
    "mov     rdx, rax",
    "sub     rdx, rbx",
    "nop     dword [rax]",
    "lea     edx, [r10+0x1]",
    "movsxd  rsi, edx",
    "mov     dword [rbp-0x3c {var_44}], edx",
    "add     rsi, rbx",
    "movzx   ecx, byte [rsi]",
    "lea     r11d, [rcx-0x30]",
    "cmp     r11b, 0x9",
    "ja      0xee800",
    "test    dl, dl",
    "jne     0xeed02",
    "cmp     cl, 0x20",
    "mov     r11d, eax",
    "sete    al",
    "cmp     cl, 0x9",
    "sete    r10b",
    "or      al, r10b",
    "jne     0xee818",
    "jmp     0xeeaac",
    "mov     byte [rbx], 0x0",
    "mov     rdi, r14",
    "mov     byte [rbp-0x44 {var_4c_1}], cl",
    "call    rl_variable_value",
    "cmp     r15d, 0x1",
    "movzx   ecx, byte [rbp-0x44 {var_4c_1}]",
    "mov     rdi, rax",
    "je      0xeed66",
    "cmp     cl, 0x9",
    "je      0xeebf0",
    "add     edx, 0x1",
    "mov     r12d, dword [rbp-0x4c {var_54}]",
    "movsxd  rdx, edx",
    "test    cl, cl",
    "jne     0xee82c",
    "lea     edx, [r10+0x2]",
    "movsxd  rdx, edx",
    "nop     dword [rax+rax]",
    "mov     r12d, edx",
    "add     rdx, 0x1",
    "movzx   ecx, byte [rbx+rdx-0x1]",
    "test    cl, cl",
    "je      0xeeaac",
    "test    r11b, r11b",
    "je      0xee84a",
    "lea     eax, [r9+r9*4]",
    "lea     ecx, [r8+rax*2]",
    "cmp     edi, 0x6",
    "ja      0xeead5",
    "mov     rsi, r12",
    "call    strcasecmp",
    "movzx   ecx, byte [rbp-0x44 {var_4c_1}]",
    "test    eax, eax",
    "setne   al",
    "jmp     0xeec23",
    "mov     rsi, r12",
    "mov     byte [rbp-0x44 {var_4c_2}], cl",
    "call    strcasecmp",
    "movzx   ecx, byte [rbp-0x44 {var_4c_2}]",
    "test    eax, eax",
    "sete    al",
    "movzx   ecx, byte [rax]",
    "add     rax, 0x1",
    "add     rbx, rdx",
    "test    cl, cl",
    "jne     0xeebd8",
    "sub     ecx, 0x30",
    "lea     esi, [r8+r8*4]",
    "mov     r10, rdx",
    "movsx   ecx, cl",
    "lea     r8d, [rcx+rsi*2]",
    "movzx   ecx, byte [rbx+rdx]",
    "add     rdx, 0x1",
    "lea     esi, [rcx-0x30]",
    "cmp     sil, 0x9",
    "jbe     0xeecd0",
    "mov     dword [rbp-0x3c {var_44}], r10d",
    "mov     edx, r10d",
    "lea     rsi, [rbx+r10]",
    "jmp     0xee800",
    "cmp     cl, 0x23",
    "je      0xeeaac",
    "mov     dword [rbp-0x3c {var_44}], r12d",
    "{Case 0x0}",
    "movzx   eax, byte [rbp-0x44 {var_4c}]",
    "lea     rdi, [rel _rl_parsing_conditionalized_out]",
    "xor     eax, 0x1",
    "mov     byte [rdi], al  {_rl_parsing_conditionalized_out}",
    "jmp     0xee64a",
    "lea     rdx, [rel jump_table_138af4]",
    "movsxd  rax, dword [rdx+rdi*4]",
    "add     rax, rdx",
    "jmp     rax",
    "lea     rdi, [rel _rl_parsing_conditionalized_out]",
    "mov     byte [rdi], al  {_rl_parsing_conditionalized_out}",
    "mov     byte [rbx], cl",
    "jmp     0xee64a",
    "cmp     cl, 0x20",
    "je      0xeebf0",
    "lea     rdi, [rel data_134790]  {\"trailing garbage on line: `%s'\"}",
    "xor     eax, eax  {0x0}",
    "call    sub_eb6a0",
    "jmp     0xee64a",
    "{Case 0x6}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x51",
    "setg    al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "{Case 0x5}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x52",
    "setg    al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "jmp     0xeead5",
    "{Case 0x4}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x52",
    "setle   al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "jmp     0xeead5",
    "{Case 0x1}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x52",
    "sete    al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "jmp     0xeead5",
    "{Case 0x3}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x51",
    "setle   al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "jmp     0xeead5",
    "{Case 0x2}",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x52",
    "setne   al",
    "mov     dword [rbp-0x44 {var_4c}], eax",
    "jmp     0xeead5"
  ]
}