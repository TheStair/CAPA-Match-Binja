{
  "address": "0xd0cd0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "write file on Windows/dbc9cc37967145a499adfa89f5005055",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp {__saved_rbp}",
    "xor     eax, eax  {0x0}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "lea     r14, [rel data_121bc8]",
    "push    r13 {__saved_r13}",
    "mov     r13, rdi",
    "mov     edi, 0x2",
    "push    r12 {__saved_r12}",
    "mov     r12, rsi",
    "lea     rsi, [rel data_121bbe]  {\"complete \"}",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rel data_1551c0]",
    "sub     rsp, 0x8",
    "call    __printf_chk",
    "mov     r15, qword [r12+0x10]",
    "lea     rdx, [rel data_121bb2]  {\"bashdefault\"}",
    "jmp     0xd0d2d",
    "mov     rax, r15",
    "and     rax, qword [rbx+0x8]",
    "je      0xd0d20",
    "mov     rdx, qword [rbx+0x10]",
    "add     rbx, 0x10",
    "test    rdx, rdx",
    "je      0xd0d51",
    "mov     rsi, r14  {data_121bc8, \"-o %s \"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "add     rbx, 0x10",
    "call    __printf_chk",
    "mov     rdx, qword [rbx]",
    "test    rdx, rdx",
    "jne     0xd0d2d",
    "mov     r15, qword [r12+0x8]",
    "lea     rbx, [rel data_155260]",
    "lea     r14, [rel data_121bcf]",
    "jmp     0xd0d7a",
    "mov     edx, dword [rbx+0x10]",
    "test    edx, edx",
    "je      0xd0d70",
    "add     rbx, 0x18",
    "cmp     qword [rbx], 0x0",
    "je      0xd0da8",
    "mov     rax, r15",
    "and     rax, qword [rbx+0x8]",
    "je      0xd0d70",
    "lea     rdx, [rel data_11fa38]  {\"alias\"}",
    "lea     rbx, [rel data_155260]",
    "lea     r14, [rel data_121bd4]",
    "jmp     0xd0dcd",
    "xor     eax, eax  {0x0}",
    "mov     rsi, r14  {data_121bcf, \"-%c \"}",
    "mov     edi, 0x2",
    "add     rbx, 0x18",
    "call    __printf_chk",
    "cmp     qword [rbx], 0x0",
    "jne     0xd0d7a",
    "mov     eax, dword [rbx+0x10]",
    "test    eax, eax",
    "jne     0xd0dc0",
    "nop     dword [rax+rax]",
    "mov     rdx, qword [rbx+0x18]",
    "add     rbx, 0x18",
    "test    rdx, rdx",
    "je      0xd0e00",
    "mov     rax, r15",
    "and     rax, qword [rbx+0x8]",
    "je      0xd0dc0",
    "mov     r14, qword [r12+0x18]",
    "test    r14, r14",
    "je      0xd0e3f",
    "mov     rsi, r14  {data_121bd4, \"-A %s \"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "add     rbx, 0x18",
    "call    __printf_chk",
    "mov     rdx, qword [rbx]",
    "test    rdx, rdx",
    "jne     0xd0dcd",
    "mov     r14, qword [r12+0x20]",
    "test    r14, r14",
    "je      0xd0e7e",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121bdb]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0e3f",
    "nop     dword [rax+rax]",
    "mov     r14, qword [r12+0x28]",
    "test    r14, r14",
    "je      0xd0ebd",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121be5]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0e7e",
    "mov     rdi, rbx",
    "call    free",
    "mov     r14, qword [r12+0x30]",
    "test    r14, r14",
    "je      0xd0efc",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121be8]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0ebd",
    "mov     rdi, rbx",
    "call    free",
    "mov     r14, qword [r12+0x50]",
    "test    r14, r14",
    "je      0xd0f3b",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121760]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0efc",
    "mov     rdi, rbx",
    "call    free",
    "mov     r14, qword [r12+0x40]",
    "test    r14, r14",
    "je      0xd0f7a",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121beb]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0f3b",
    "mov     rdi, rbx",
    "call    free",
    "mov     rbx, qword [r12+0x38]",
    "mov     rdi, rbx",
    "call    sh_contains_shell_metas",
    "test    rbx, rbx",
    "je      0xd0fab",
    "mov     rdi, r14",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121bee]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     rbx, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     r14, rbx",
    "je      0xd0f7a",
    "mov     rdi, rbx",
    "call    free",
    "mov     rdi, r13",
    "call    sub_d0ba0",
    "mov     edi, 0xa",
    "call    putchar",
    "add     rsp, 0x8",
    "xor     eax, eax  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "test    eax, eax",
    "jne     0xd0fd0",
    "mov     rdi, rbx",
    "call    free",
    "mov     rdi, rbx",
    "call    sh_single_quote",
    "lea     rdx, [rel data_121bf1]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "mov     r12, rax",
    "mov     rcx, rax",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "cmp     rbx, r12",
    "je      0xd0fab",
    "mov     rcx, rbx",
    "lea     rdx, [rel data_121bf1]",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_121bde]  {\"%s %s \"}",
    "call    __printf_chk",
    "mov     rdi, r12",
    "call    free",
    "jmp     0xd0fab"
  ],
  "high level IL": [
    "char const (** const rbx)[0xc] = &data_1551c0",
    "__printf_chk(2, \"complete \")",
    "int64_t r15 = *(arg2 + 0x10)",
    "char const (* rdx)[0xc] = \"bashdefault\"",
    "while (true)",
    "if ((r15 & rbx[1]) == 0)",
    "rdx = rbx[2]",
    "rbx = &rbx[2]",
    "if (rdx == 0)",
    "break",
    "rbx = &rbx[2]",
    "__printf_chk(2, \"-o %s \", rdx)",
    "rdx = *rbx",
    "if (rdx == 0)",
    "break",
    "int64_t r15_1 = *(arg2 + 8)",
    "char const (** const rbx_1)[0x6] = &data_155260",
    "while (true)",
    "int32_t rdx_1 = rbx_1[2].d",
    "if (rdx_1 != 0 && (r15_1 & rbx_1[1]) != 0)",
    "rbx_1 = &rbx_1[3]",
    "__printf_chk(2, \"-%c \", rdx_1)",
    "if (*rbx_1 == 0)",
    "break",
    "continue",
    "rbx_1 = &rbx_1[3]",
    "if (*rbx_1 == 0)",
    "break",
    "char const (** const rbx_2)[0x6] = &data_155260",
    "while (true)",
    "if (rbx_2[2].d == 0 && (r15_1 & rbx_2[1]) != 0)",
    "rbx_2 = &rbx_2[3]",
    "__printf_chk(2, \"-A %s \")",
    "if (*rbx_2 == 0)",
    "break",
    "continue",
    "int64_t rdx_2 = rbx_2[3]",
    "rbx_2 = &rbx_2[3]",
    "if (rdx_2 == 0)",
    "break",
    "char* r14 = *(arg2 + 0x18)",
    "if (r14 != 0)",
    "char* rax_11 = sh_single_quote(r14)",
    "__printf_chk(2, \"%s %s \", &data_121bdb, rax_11)",
    "if (r14 != rax_11)",
    "free(rax_11)",
    "char* r14_1 = *(arg2 + 0x20)",
    "if (r14_1 != 0)",
    "char* rax_13 = sh_single_quote(r14_1)",
    "__printf_chk(2, \"%s %s \", &data_121be5, rax_13)",
    "if (r14_1 != rax_13)",
    "free(rax_13)",
    "char* r14_2 = *(arg2 + 0x28)",
    "if (r14_2 != 0)",
    "char* rax_15 = sh_single_quote(r14_2)",
    "__printf_chk(2, \"%s %s \", &data_121be8, rax_15)",
    "if (r14_2 != rax_15)",
    "free(rax_15)",
    "char* r14_3 = *(arg2 + 0x30)",
    "if (r14_3 != 0)",
    "char* rax_17 = sh_single_quote(r14_3)",
    "__printf_chk(2, \"%s %s \", &data_121760, rax_17)",
    "if (r14_3 != rax_17)",
    "free(rax_17)",
    "char* r14_4 = *(arg2 + 0x50)",
    "if (r14_4 != 0)",
    "char* rax_19 = sh_single_quote(r14_4)",
    "__printf_chk(2, \"%s %s \", &data_121beb, rax_19)",
    "if (r14_4 != rax_19)",
    "free(rax_19)",
    "char* r14_5 = *(arg2 + 0x40)",
    "if (r14_5 != 0)",
    "char* rax_21 = sh_single_quote(r14_5)",
    "__printf_chk(2, \"%s %s \", &data_121bee, rax_21)",
    "if (r14_5 != rax_21)",
    "free(rax_21)",
    "char* rbx_9 = *(arg2 + 0x38)",
    "int32_t rax_23 = sh_contains_shell_metas(rbx_9)",
    "if (rbx_9 != 0)",
    "if (rax_23 != 0)",
    "char* rax_25 = sh_single_quote(rbx_9)",
    "__printf_chk(2, \"%s %s \", &data_121bf1, rax_25)",
    "if (rbx_9 != rax_25)",
    "free(rax_25)",
    "__printf_chk(2, \"%s %s \", &data_121bf1, rbx_9)",
    "sub_d0ba0(arg1)",
    "putchar(0xa)",
    "return 0"
  ]
}