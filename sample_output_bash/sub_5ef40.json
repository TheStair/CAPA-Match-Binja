{
  "address": "0x5ef40",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x8",
    "lea     rcx, [rel posixly_correct]",
    "mov     eax, dword [rdi+0x28]",
    "mov     ecx, dword [rcx]",
    "mov     edx, eax",
    "and     edx, 0x20",
    "test    ecx, ecx",
    "je      0x5ef6e",
    "test    edx, edx",
    "je      0x5f040",
    "and     esi, 0x1",
    "jne     0x5f068",
    "test    eax, 0x100000",
    "jne     0x5ef8d",
    "mov     rdi, qword [rbx]",
    "cmp     byte [rdi], 0x2d",
    "je      0x5f100",
    "mov     rdi, qword [rdi]",
    "test    edx, edx",
    "je      0x5f078",
    "not     eax",
    "test    eax, 0x300000",
    "jne     0x5f04b",
    "mov     rdi, qword [rbx]",
    "xor     edx, edx",
    "test    eax, 0x100000",
    "je      0x5f04e",
    "test    eax, 0x100000",
    "je      0x5f04e",
    "cmp     byte [rdi], 0x2d",
    "je      0x5f168",
    "lea     r13, [rel shell_variables]",
    "mov     r12, qword [r13]",
    "mov     eax, dword [r12+0xc]",
    "mov     rdx, qword [r12+0x20]",
    "test    al, 0x4",
    "jne     0x5f0c0",
    "test    eax, 0x100000",
    "je      0x5f04e",
    "cmp     byte [rdi+0x1], 0x0",
    "jne     0x5f138",
    "call    stupidly_hack_special_variables",
    "mov     rsi, qword [rbx+0x8]",
    "mov     edx, 0x220",
    "call    bind_variable",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x5f053",
    "mov     edx, 0x1",
    "jmp     0x5f102",
    "test    rdx, rdx",
    "jne     0x5efc3",
    "and     eax, 0x1c",
    "cmp     eax, 0x10",
    "je      0x5f0c0",
    "test    edx, edx",
    "je      0x5ef8d",
    "mov     rdi, qword [rbx+0x8]",
    "call    set_current_options",
    "call    set_shellopts",
    "jmp     0x5f053",
    "add     rsp, 0x8",
    "mov     rdi, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "jmp     dispose_variable",
    "mov     edx, dword [r12+0x2c]",
    "mov     eax, dword [rax+0x28]",
    "or      eax, dword [rbx+0x28]",
    "mov     dword [r12+0x28], eax",
    "test    edx, edx",
    "jne     0x5f008",
    "cmp     byte [rdi], 0x2d",
    "jne     0x5f138",
    "mov     rsi, qword [rbx+0x8]",
    "mov     rdi, qword [rbx]",
    "xor     r8d, r8d",
    "xor     ecx, ecx",
    "call    sub_55a00",
    "mov     r12, rax",
    "mov     rax, qword [r13]",
    "test    r12, r12",
    "je      0x5f120",
    "mov     edi, 0x400",
    "call    hash_create",
    "mov     qword [r12+0x20], rax",
    "mov     rax, qword [r13]",
    "mov     rdx, qword [rax+0x20]",
    "jmp     0x5efc3",
    "jmp     0x5f07f",
    "mov     eax, dword [rbx+0x28]",
    "test    al, 0x44",
    "je      0x5f053",
    "and     eax, 0xffcfffff",
    "mov     dword [r12+0x28], eax",
    "jmp     0x5f008",
    "lea     rdx, [rel global_variables]",
    "cmp     rax, qword [rdx]",
    "je      0x5f170",
    "mov     edx, dword [rax+0x8]",
    "lea     rcx, [rel global_variables]",
    "mov     dword [r12+0x2c], edx",
    "mov     edx, dword [rbx+0x28]",
    "cmp     rax, qword [rcx]",
    "je      0x5f0e8",
    "mov     rdi, qword [r12+0x8]",
    "test    rdi, rdi",
    "je      0x5f021",
    "and     dword [rbx+0x28], 0xffcfffff",
    "jmp     0x5f053",
    "or      dword [rax+0xc], 0x2",
    "jmp     0x5f053",
    "and     edx, 0xffcfffff",
    "mov     dword [rbx+0x28], edx",
    "jmp     0x5f003",
    "or      dword [rax+0xc], 0x2",
    "mov     rdi, qword [rbx+0x8]",
    "test    al, 0x4",
    "je      0x5f150",
    "call    free",
    "mov     eax, dword [rbx+0x28]",
    "or      dword [r12+0x28], edx",
    "xor     esi, esi",
    "call    hash_copy",
    "mov     qword [r12+0x8], rax",
    "jmp     0x5f053",
    "call    array_copy",
    "mov     qword [r12+0x8], rax",
    "jmp     0x5f053"
  ]
}