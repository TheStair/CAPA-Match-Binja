{
  "address": "0xfc610",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x128",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "lea     rax, [rel rl_input_available_hook]",
    "mov     rbx, qword [rax]",
    "test    rbx, rbx",
    "je      0xfc670",
    "lea     rax, [rel rl_instream]",
    "lea     r13, [rbp-0xc0]",
    "lea     r14, [rbp-0x140]",
    "mov     rdi, qword [rax]",
    "call    fileno",
    "mov     ecx, 0x10",
    "mov     rdi, r13",
    "movsxd  r15, eax",
    "mov     rax, rbx",
    "mov     ebx, 0x1",
    "rep stosq qword [rdi]",
    "mov     ecx, 0x10",
    "mov     rdi, r14",
    "rep stosq qword [rdi]",
    "mov     rdi, r15",
    "call    __fdelt_chk",
    "mov     ecx, r15d",
    "mov     rdi, r15",
    "shl     rbx, cl",
    "or      qword [rbp+rax*8-0xc0], rbx",
    "call    __fdelt_chk",
    "xor     r9d, r9d",
    "lea     edi, [r15+0x1]",
    "mov     rsi, r13",
    "or      qword [rbp+rax*8-0x140], rbx",
    "movsxd  rax, dword [rel data_160314]",
    "lea     r8, [rbp-0x150]",
    "mov     rdx, rax",
    "imul    rax, rax, 0x431bde83",
    "mov     ecx, edx",
    "sar     ecx, 0x1f",
    "sar     rax, 0x32",
    "sub     eax, ecx",
    "movsxd  rcx, eax",
    "imul    eax, eax, 0xf4240",
    "mov     qword [rbp-0x150], rcx",
    "mov     rcx, r14",
    "sub     edx, eax",
    "movsxd  rdx, edx",
    "mov     qword [rbp-0x148], rdx",
    "xor     edx, edx",
    "call    _rl_timeout_select",
    "test    eax, eax",
    "setg    al",
    "movzx   eax, al",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xfc750",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xfc750",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x128",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x128",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "\u2753jmp     rax"
  ]
}