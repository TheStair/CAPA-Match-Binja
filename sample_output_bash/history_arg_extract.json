{
  "address": "0x10cfc0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "mov     r13d, esi",
    "mov     esi, 0xffffffff",
    "push    r12",
    "push    rbx",
    "mov     ebx, edi",
    "mov     rdi, rdx",
    "xor     edx, edx",
    "sub     rsp, 0x28",
    "call    sub_10c670",
    "test    rax, rax",
    "je      0x10d1c8",
    "mov     qword [rbp-0x38], 0x0",
    "jmp     0x10d08e",
    "cmp     qword [rax], 0x0",
    "mov     r12, rax",
    "je      0x10d1c0",
    "mov     rax, qword [rbp-0x38]",
    "add     rsp, 0x28",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "xor     r8d, r8d",
    "jmp     0x10d01a",
    "mov     eax, 0x1",
    "nop     dword [rax]",
    "lea     eax, [r8+r13-0x1]",
    "test    r13d, r13d",
    "cmovs   r13d, eax",
    "lea     eax, [r8+rbx-0x1]",
    "test    ebx, ebx",
    "cmovs   ebx, eax",
    "cmp     r13d, 0x24",
    "je      0x10d0d0",
    "mov     rdx, rax",
    "add     rax, 0x1",
    "cmp     qword [r12+rax*8-0x8], 0x0",
    "jne     0x10d008",
    "mov     r8d, edx",
    "lea     r13d, [r8-0x1]",
    "mov     r15d, r8d",
    "cmp     ebx, 0x24",
    "je      0x10d0a8",
    "lea     r15d, [r13+0x1]",
    "cmp     r8d, r15d",
    "setl    al",
    "cmp     ebx, 0x24",
    "je      0x10d0c8",
    "mov     ebx, r13d",
    "xor     eax, eax",
    "jmp     0x10d049",
    "lea     ebx, [r8-0x1]",
    "jmp     0x10d052",
    "cmp     ebx, r8d",
    "setge   sil",
    "or      eax, esi",
    "mov     qword [rbp-0x38], 0x0",
    "jmp     0x10d05e",
    "cmp     r15d, ebx",
    "jge     0x10d0e8",
    "mov     qword [rbp-0x38], 0x0",
    "test    al, al",
    "je      0x10d0ab",
    "mov     eax, r15d",
    "or      eax, ebx",
    "js      0x10d0b7",
    "test    r8d, r8d",
    "je      0x10d086",
    "jle     0x10d1d5",
    "mov     rdi, r12",
    "call    free",
    "movsxd  rdx, r8d",
    "mov     rbx, r12",
    "lea     r14, [r12+rdx*8]",
    "nop     dword [rax]",
    "mov     edi, 0x1",
    "mov     dword [rbp-0x3c], r8d",
    "call    malloc",
    "mov     r8d, dword [rbp-0x3c]",
    "test    rax, rax",
    "mov     qword [rbp-0x38], rax",
    "je      0x10d1fc",
    "movsxd  rax, ebx",
    "mov     dword [rbp-0x38], 0x0",
    "mov     qword [rbp-0x48], rax",
    "mov     r14, rax",
    "nop     ",
    "add     rbx, 0x8",
    "cmp     rbx, r14",
    "jne     0x10d070",
    "call    free",
    "mov     r14d, 0x1",
    "mov     rax, qword [rbp-0x38]",
    "mov     byte [rax], 0x0",
    "jmp     0x10d05e",
    "mov     rdi, qword [r12+r14*8]",
    "mov     dword [rbp-0x3c], r8d",
    "add     r14, 0x1",
    "call    strlen",
    "mov     ecx, dword [rbp-0x38]",
    "lea     esi, [r14-0x1]",
    "mov     r8d, dword [rbp-0x3c]",
    "add     ecx, eax",
    "cmp     r13d, esi",
    "mov     eax, ecx",
    "lea     ecx, [rcx+0x1]",
    "mov     dword [rbp-0x38], ecx",
    "jg      0x10d100",
    "add     eax, 0x2",
    "movsxd  r14, eax",
    "mov     rdi, r14",
    "call    malloc",
    "mov     r8d, dword [rbp-0x3c]",
    "test    rax, rax",
    "mov     qword [rbp-0x38], rax",
    "je      0x10d202",
    "mov     rdi, qword [rbx]",
    "test    rdi, rdi",
    "je      0x10d07d",
    "xor     eax, eax",
    "mov     rsi, r14",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "mov     dword [rbp-0x38], r8d",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     rax, qword [rbp-0x38]",
    "mov     byte [rax], 0x0",
    "mov     r15, qword [rbp-0x48]",
    "xor     ebx, ebx",
    "nop     word [rax+rax]",
    "add     r15, 0x1",
    "lea     eax, [r15-0x1]",
    "cmp     r13d, eax",
    "jg      0x10d160",
    "mov     rcx, qword [rbp-0x38]",
    "movzx   esi, word [rel data_136ab0[4]]  {\" \"}",
    "movsxd  rax, ebx",
    "add     ebx, 0x1",
    "mov     word [rcx+rax], si",
    "movsxd  rdi, ebx",
    "mov     rdx, r14",
    "mov     rax, qword [rbp-0x38]",
    "mov     rsi, qword [r12+r15*8]",
    "cmp     rdi, r14",
    "mov     dword [rbp-0x3c], r8d",
    "cmovae  rdx, rdi",
    "sub     rdx, rdi",
    "add     rdi, rax",
    "call    __strcpy_chk",
    "mov     rdi, qword [r12+r15*8]",
    "call    strlen",
    "mov     r8d, dword [rbp-0x3c]",
    "add     ebx, eax",
    "cmp     r13d, r15d",
    "jle     0x10d1ad",
    "jmp     0x10d05e"
  ]
}