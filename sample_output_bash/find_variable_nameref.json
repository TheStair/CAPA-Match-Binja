{
  "address": "0x52320",
  "rules": [
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "mov     r14d, 0x9",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "jmp     0x5238a",
    "test    rbx, rbx",
    "je      0x5239b",
    "xor     ebx, ebx",
    "test    byte [rbx+0x29], 0x8",
    "je      0x5239d",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "sub     r14d, 0x1",
    "jne     0x52340",
    "mov     rdi, qword [rbx+0x8]",
    "test    rdi, rdi",
    "je      0x5239b",
    "cmp     byte [rdi], 0x0",
    "je      0x5239b",
    "lea     rax, [rel expanding_redir]",
    "xor     esi, esi",
    "mov     ecx, dword [rax]",
    "test    ecx, ecx",
    "jne     0x52375",
    "call    sub_502c0",
    "mov     r12, rax",
    "cmp     r13, rax",
    "je      0x523b0",
    "lea     rax, [rel assigning_in_environment]",
    "lea     rdx, [rel executing_builtin]",
    "xor     esi, esi",
    "mov     eax, dword [rax]",
    "or      eax, dword [rdx]",
    "setne   sil",
    "mov     edx, 0x5",
    "mov     rbx, qword [r13]",
    "lea     rsi, [rel data_11fe5f]  {\"%s: circular name reference\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "xor     eax, eax",
    "call    internal_warning",
    "lea     rax, [rel variable_context]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0x5239b",
    "cmp     rbx, rax",
    "je      0x523b0",
    "mov     eax, dword [r12+0x2c]",
    "test    eax, eax",
    "je      0x5239b",
    "mov     rbx, rax",
    "mov     rdi, qword [r12]",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "jmp     find_global_variable_noref"
  ]
}