{
  "address": "0xdd020",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x38",
    "mov     dword [rbp-0x48], edi",
    "mov     dword [rbp-0x54], ecx",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rsi, rsi",
    "je      0xdd1ba",
    "mov     rax, 0xffffffffffffffff",
    "jmp     0xdd183",
    "mov     rbx, rdx",
    "test    rdx, rdx",
    "je      0xdd1ba",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xdd1ef",
    "mov     r15, qword [rsi]",
    "mov     r12, rsi",
    "mov     r14d, r8d",
    "test    r15, r15",
    "je      0xdd1b0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "cmp     qword [rdx], 0x0",
    "je      0xdd071",
    "lea     rax, [rbp-0x39]",
    "xor     r13d, r13d",
    "mov     qword [rbp-0x50], rax",
    "jmp     0xdd10d",
    "test    r14d, r14d",
    "jne     0xdd088",
    "mov     rsi, qword [rbp-0x50]",
    "mov     edi, dword [rbp-0x48]",
    "mov     edx, 0x1",
    "call    zread",
    "test    eax, eax",
    "jle     0xdd12a",
    "mov     rsi, qword [rbp-0x50]",
    "mov     edi, dword [rbp-0x48]",
    "call    zreadc",
    "test    eax, eax",
    "jg      0xdd0a1",
    "test    r15, r15",
    "je      0xdd139",
    "mov     rax, qword [rbx]",
    "lea     rdx, [r13+0x2]",
    "cmp     rdx, rax",
    "jb      0xdd0f3",
    "sub     r13, 0x1",
    "jmp     0xdd180",
    "test    r13, r13",
    "je      0xdd139",
    "movsx   eax, byte [rbp-0x39]",
    "mov     ecx, dword [rbp-0x54]",
    "lea     rdx, [r13+0x1]",
    "mov     byte [r15+r13], al",
    "cmp     eax, ecx",
    "je      0xdd1a8",
    "test    rax, rax",
    "je      0xdd140",
    "mov     rax, r13",
    "mov     byte [r15+r13], 0x0",
    "mov     byte [r15+r13+0x1], 0x0",
    "jmp     0xdd180",
    "mov     r13, rdx",
    "mov     rdi, qword [r12]",
    "mov     r9d, 0x10",
    "test    rdi, rdi",
    "jne     0xdd0d0",
    "lea     r9, [rax+rax]",
    "cmp     rax, r9",
    "jae     0xdd170",
    "mov     rsi, r9",
    "mov     qword [rbp-0x60], r9",
    "call    realloc",
    "mov     r9, qword [rbp-0x60]",
    "mov     r15, rax",
    "mov     rdi, r9",
    "mov     qword [rbp-0x60], r9",
    "call    malloc",
    "mov     r9, qword [rbp-0x60]",
    "mov     r15, rax",
    "jmp     0xdd0e3",
    "mov     rdx, qword [r12]",
    "mov     byte [rdx+rax-0x1], 0x0",
    "mov     rcx, qword [rbx]",
    "lea     r13, [rcx-0x3]",
    "mov     rdi, qword [r12]",
    "test    rdi, rdi",
    "je      0xdd153",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_11f0f3]  {\"%s: cannot allocate %lu bytes\"}",
    "xor     edi, edi",
    "mov     qword [rbp-0x48], r9",
    "call    dcgettext",
    "mov     rdx, qword [rbp-0x48]",
    "lea     rsi, [rel data_11f045]  {\"xrealloc\"}",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    fatal_error",
    "{ Does not return }",
    "mov     qword [r12], r15",
    "mov     qword [rbx], r9",
    "test    r15, r15",
    "je      0xdd1c3"
  ]
}