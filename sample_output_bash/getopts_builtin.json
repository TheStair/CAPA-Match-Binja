{
  "address": "0xc6bb0",
  "rules": [
    "PEB access/fd0dc33357ac4dfab7ffc937f75726c6",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "check OS version/cc7cda0bb6bc4f05b55778302fc52afe",
    "check Internet connectivity via WinINet/43caef4d101b49198d8cca771ce14a21",
    "check OS version/db23a9b0019e461d9805d8493bc39112",
    "contain loop",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "check OS version/1297d641bc10439a81c4e39d3161d5ae"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x48",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xc6c24",
    "call    builtin_usage",
    "lea     rbx, [rel loptend]",
    "lea     rax, [rel lcurrent]",
    "lea     rsi, [rel data_122e02]",
    "mov     qword [rel data_168d30], 0x0",
    "mov     dword [rel data_168d28], 0x1",
    "mov     qword [rbx], 0x0",
    "mov     qword [rax], 0x0",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xc6c58",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x48",
    "mov     eax, r12d",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "je      0xc7020",
    "cmp     eax, 0xffffff9d",
    "je      0xc6f60",
    "mov     edi, 0x10",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xc70f0",
    "mov     rdx, rbx",
    "xor     eax, eax",
    "nop     dword [rax]",
    "call    builtin_help",
    "jmp     0xc6c29",
    "mov     r12d, 0x10",
    "mov     qword [r15], 0x0",
    "lea     rax, [rel this_command_name]",
    "mov     qword [r15+0x8], 0x0",
    "mov     rax, qword [rax]",
    "mov     qword [r15], rax",
    "mov     rdx, qword [rdx]",
    "mov     ecx, eax",
    "add     eax, 0x1",
    "test    rdx, rdx",
    "jne     0xc6c70",
    "lea     r12d, [rcx+0x3]",
    "movsxd  r12, r12d",
    "shl     r12, 0x3",
    "mov     rdi, r12",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xc70f6",
    "mov     r12d, 0x102",
    "mov     rdi, r15",
    "call    free",
    "jmp     0xc6c2f",
    "xor     eax, eax",
    "mov     rsi, r12",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     r15d, r15d",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [rax], 0x0",
    "lea     rdx, [r15+0x8]",
    "mov     eax, 0x1",
    "nop     dword [rax]",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xc70eb",
    "mov     rcx, qword [rbx+0x8]",
    "mov     rbx, qword [rbx]",
    "add     rdx, 0x8",
    "mov     rcx, qword [rcx]",
    "mov     qword [rdx-0x8], rcx",
    "mov     ecx, eax",
    "add     eax, 0x1",
    "test    rbx, rbx",
    "jne     0xc6cb0",
    "movsxd  rdx, eax",
    "mov     qword [r15+rdx*8], 0x0",
    "lea     rdx, [rel this_command_name]",
    "mov     rdx, qword [rdx]",
    "mov     qword [r15], rdx",
    "cmp     eax, 0x2",
    "je      0xc7052",
    "call    builtin_usage",
    "mov     r12d, 0x102",
    "jmp     0xc6efd",
    "mov     rdx, qword [r15+0x8]",
    "mov     r12, qword [r15+0x10]",
    "lea     edi, [rcx-0x1]",
    "movzx   ebx, byte [rdx]",
    "cmp     bl, 0x3a",
    "jne     0xc6d14",
    "cmp     edi, 0x1",
    "jne     0xc6e20",
    "lea     rax, [rel sh_opterr]",
    "add     rdx, 0x1",
    "mov     r14d, dword [rax]",
    "mov     dword [rax], 0x0",
    "cmp     qword [rel data_162ba8], 0x0",
    "lea     rsi, [r15+0x10]",
    "je      0xc6e47",
    "lea     rax, [rel rest_of_args]",
    "mov     rsi, qword [rax]",
    "test    rsi, rsi",
    "je      0xc6fc0",
    "lea     rax, [rel dollar_vars]",
    "mov     rax, qword [rax]",
    "mov     qword [r15+0x10], rax",
    "call    sh_getopt",
    "mov     qword [r15+0x10], r12",
    "mov     r13d, eax",
    "movsxd  rcx, dword [rel data_162bb0]",
    "movsxd  rax, dword [rel data_162ba0]",
    "add     rax, qword [rsi+rcx*8]",
    "mov     qword [rel data_162ba8], rax",
    "lea     r9, [rel dollar_vars]",
    "xor     edi, edi",
    "nop     dword [rax]",
    "lea     rax, [rel posparam_count]",
    "mov     qword [rbp-0x70], rsi",
    "mov     qword [rbp-0x68], rdx",
    "mov     r13d, dword [rax]",
    "add     r13d, 0x2",
    "movsxd  r13, r13d",
    "shl     r13, 0x3",
    "mov     rdi, r13",
    "call    malloc",
    "mov     rdx, qword [rbp-0x68]",
    "mov     rsi, qword [rbp-0x70]",
    "test    rax, rax",
    "mov     rcx, rax",
    "je      0xc7122",
    "lea     rax, [rel sh_optind]",
    "mov     edx, dword [rax]",
    "cmp     edx, 0x9",
    "jg      0xc6f10",
    "lea     rax, [rel sh_opterr]",
    "mov     dword [rax], r14d",
    "cmp     qword [rel data_162ba8], 0x0",
    "je      0xc7009",
    "add     rdi, 0x1",
    "cmp     rdi, 0xa",
    "jne     0xc6fd0",
    "mov     qword [rbp-0x70], rax",
    "mov     rsi, r13",
    "xor     eax, eax",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "call    sub_a7f00",
    "{ Does not return }",
    "lea     r9, [rel dollar_vars]",
    "xor     eax, eax",
    "nop     word [rax+rax]",
    "mov     byte [rbp-0x41], 0x0",
    "mov     ecx, 0xe",
    "lea     rsi, [rbp-0x50]",
    "nop     dword [rax]",
    "add     edx, 0x30",
    "mov     byte [rbp-0x41], 0x0",
    "mov     eax, 0xe",
    "lea     rsi, [rbp-0x50]",
    "mov     byte [rbp-0x42], dl",
    "mov     rsi, r9",
    "call    sh_getopt",
    "mov     r13d, eax",
    "jmp     0xc6e61",
    "movsxd  rcx, dword [rel data_162bb0]",
    "movsxd  rax, dword [rel data_162ba0]",
    "add     rax, qword [r9+rcx*8]",
    "mov     qword [rel data_162ba8], rax",
    "cmp     qword [r9+rdi*8], 0x0",
    "je      0xc6fe6",
    "mov     edi, 0xa",
    "mov     edi, eax",
    "jmp     0xc6da6",
    "mov     qword [rcx+rax*8], rdi",
    "add     rax, 0x1",
    "cmp     rax, 0xa",
    "jne     0xc6d78",
    "movsxd  rax, edx",
    "mov     edi, edx",
    "imul    rax, rax, 0x66666667",
    "sar     edi, 0x1f",
    "sar     rax, 0x22",
    "sub     eax, edi",
    "lea     edi, [rax+rax*4]",
    "add     edi, edi",
    "sub     edx, edi",
    "add     edx, 0x30",
    "mov     byte [rsi+rcx], dl",
    "mov     edx, eax",
    "mov     rax, rcx",
    "sub     rcx, 0x1",
    "test    edx, edx",
    "jne     0xc6f20",
    "cdqe    ",
    "jmp     0xc6e95",
    "lea     rax, [rel sh_optarg]",
    "mov     rsi, qword [rax]",
    "test    rsi, rsi",
    "je      0xc7068",
    "cmp     r13d, 0xffffffff",
    "je      0xc70c5",
    "cmp     bl, 0x3a",
    "jne     0xc6e70",
    "test    rsi, rsi",
    "je      0xc6dd5",
    "mov     rdi, qword [r9+rax*8]",
    "lea     r8, [rax*8]",
    "test    rdi, rdi",
    "je      0xc70aa",
    "mov     r8d, 0x50",
    "mov     edi, 0xa",
    "add     rsi, rax",
    "xor     edx, edx",
    "lea     rdi, [rel data_11fe98]  {\"OPTIND\"}",
    "call    bind_variable",
    "cmp     r13d, 0x3f",
    "je      0xc6f70",
    "mov     rdi, r12",
    "lea     rsi, [rel data_11f07e[7]]  {\"?\"}",
    "call    sub_bf3e0",
    "mov     r12d, eax",
    "cmp     bl, 0x3a",
    "jne     0xc6fa7",
    "cmp     byte [rsi], 0x0",
    "jne     0xc6ed8",
    "lea     rdi, [rel data_1219d5]  {\"OPTARG\"}",
    "call    unbind_variable_noref",
    "mov     rdi, r12",
    "lea     rsi, [rel data_11f07e[7]]  {\"?\"}",
    "mov     r12d, 0x1",
    "call    sub_bf3e0",
    "jmp     0xc6efd",
    "cmp     r13d, 0xfffffffe",
    "je      0xc7068",
    "cmp     qword [rel data_162ba8], 0x0",
    "mov     qword [rcx+r8], 0x0",
    "je      0xc6e00",
    "lea     eax, [rdi+0x1]",
    "cdqe    ",
    "lea     rdi, [rel data_1219d5]  {\"OPTARG\"}",
    "call    unbind_variable_noref",
    "jmp     0xc6efd",
    "lea     rax, [rel sh_optopt]",
    "lea     rsi, [rbp-0x52]",
    "xor     edx, edx",
    "lea     rdi, [rel data_1219d5]  {\"OPTARG\"}",
    "mov     byte [rbp-0x51], 0x0",
    "mov     eax, dword [rax]",
    "mov     byte [rbp-0x52], al",
    "call    bind_variable",
    "jmp     0xc6efd",
    "xor     edx, edx",
    "lea     rdi, [rel data_1219d5]  {\"OPTARG\"}",
    "call    bind_variable",
    "mov     rdi, r12",
    "lea     rsi, [rbp-0x52]",
    "mov     byte [rbp-0x52], r13b",
    "mov     byte [rbp-0x51], 0x0",
    "call    sub_bf3e0",
    "mov     r12d, eax",
    "cmp     bl, 0x3a",
    "je      0xc70b1",
    "cmp     r13d, 0xfffffffd",
    "je      0xc6f8c",
    "mov     rsi, rcx",
    "mov     qword [rbp-0x68], rcx",
    "call    sh_getopt",
    "mov     rdi, qword [rbp-0x68]",
    "mov     r13d, eax",
    "call    free",
    "jmp     0xc6e61",
    "movsxd  rsi, dword [rel data_162bb0]",
    "movsxd  rax, dword [rel data_162ba0]",
    "add     rax, qword [rcx+rsi*8]",
    "mov     qword [rel data_162ba8], rax",
    "mov     rdi, qword [rsi+0x8]",
    "mov     rsi, qword [rsi]",
    "mov     r8, rax",
    "mov     rdi, qword [rdi]",
    "mov     qword [rcx+rax*8-0x8], rdi",
    "add     rax, 0x1",
    "test    rsi, rsi",
    "jne     0xc6db0",
    "mov     edi, r8d",
    "movsxd  r8, r8d",
    "shl     r8, 0x3",
    "mov     rdi, r12",
    "lea     rsi, [rel data_1217f9]  {\":\"}",
    "call    sub_bf3e0",
    "mov     r12d, eax",
    "jmp     0xc7083",
    "mov     rdi, r12",
    "lea     rsi, [rel data_11f07e[7]]  {\"?\"}",
    "call    sub_bf3e0",
    "mov     r12d, eax",
    "lea     rax, [rel sh_optarg]",
    "mov     rsi, qword [rax]"
  ]
}