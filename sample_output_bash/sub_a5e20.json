{
  "address": "0xa5e20",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "connect to WMI namespace via WbemLocator/a82a9565904b4f24bb74c2688f836d4e",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "lea     rax, [rel sigterm_received]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xa5f80",
    "xor     eax, eax",
    "retn    ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x8",
    "lea     rbx, [rel terminating_signal]",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "je      0xa5f30",
    "lea     rax, [rel interrupt_state]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xa5fa8",
    "mov     r13d, dword [rbx]",
    "lea     r12, [rel rl_readline_state]",
    "lea     r12, [rel rl_readline_state]",
    "mov     r13d, 0x2",
    "jmp     0xa5e5d",
    "lea     rax, [rel read_timeout]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0xa5fe0",
    "call    _rl_clean_up_for_exit",
    "lea     rax, [rel rl_deprep_term_function]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0xa5ea6",
    "lea     rax, [rel interrupt_state]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xa5e90",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "jne     0xa5e90",
    "lea     r12, [rel rl_readline_state]",
    "test    qword [r12], 0x4000000",
    "jne     0xa5f73",
    "mov     edi, dword [rax+0x18]",
    "lea     r12, [rel rl_readline_state]",
    "test    edi, edi",
    "jne     0xa5f73",
    "lea     rax, [rel rl_pending_input]",
    "and     qword [r12], 0xfffffffffffdffff",
    "mov     dword [rax], 0x0",
    "call    rl_clear_signals",
    "call    rax",
    "lea     rax, [rel read_timeout]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0xa5ec0",
    "mov     r13d, 0xe",
    "jmp     0xa5e5d",
    "lea     rax, [rel pending_traps]",
    "mov     r13d, 0x1",
    "nop     word [rax+rax]",
    "test    qword [r12], 0x4000000",
    "je      0xa5ff5",
    "call    check_read_timeout",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "jne     0xa5f90",
    "lea     rax, [rel this_shell_builtin]",
    "lea     rdx, [rel read_builtin]",
    "cmp     qword [rax], rdx",
    "jne     0xa5f00",
    "lea     rax, [rel rl_signal_event_hook]",
    "and     qword [r12], 0xfffffffffbffffff",
    "mov     qword [rax], 0x0",
    "lea     rax, [rel posixly_correct]",
    "mov     edx, dword [rax]",
    "test    edx, edx",
    "je      0xa5f00",
    "mov     ecx, dword [rax+0x18]",
    "test    ecx, ecx",
    "je      0xa5ec0",
    "add     r13, 0x1",
    "cmp     r13, 0x41",
    "jne     0xa6008",
    "mov     dword [rax+0x18], 0x1",
    "mov     eax, dword [rel data_161100]",
    "mov     edi, dword [rbx]",
    "test    eax, eax",
    "jne     0xa5f0f",
    "lea     rax, [rel interrupt_state]",
    "mov     eax, dword [rax]",
    "test    eax, eax",
    "jne     0xa5f88",
    "cmp     r13d, 0x2",
    "je      0xa5fc0",
    "nop     word [rax+rax]",
    "mov     esi, dword [rax+r13*4]",
    "test    esi, esi",
    "jne     0xa5e5d",
    "mov     r13d, 0xffffffff",
    "jmp     0xa5e5d",
    "call    sub_8e2b0",
    "{ Does not return }",
    "call    throw_to_top_level",
    "jmp     0xa5f1c",
    "call    run_pending_traps",
    "add     rsp, 0x8",
    "xor     eax, eax",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    ",
    "lea     rax, [rel last_command_exit_value]",
    "mov     dword [rax], 0x82",
    "call    throw_to_top_level",
    "jmp     0xa5f00"
  ]
}