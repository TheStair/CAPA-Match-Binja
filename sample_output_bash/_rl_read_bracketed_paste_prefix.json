{
  "address": "0x103140",
  "rules": [
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "cmp     edi, 0x1b",
    "jne     0x1031fc",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x10324f",
    "mov     ebx, 0x1",
    "mov     byte [rbp-0x3f], 0x1b",
    "lea     r14, [rel data_1220d1[1]]",
    "lea     r13d, [rbx-0x1]",
    "cmp     rbx, 0x6",
    "je      0x1031f7",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x18",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, 0x1",
    "lea     rax, [rel rl_readline_state]",
    "test    qword [rax], 0x20800",
    "jne     0x103223",
    "cmp     r13d, 0x5",
    "je      0x1031f7",
    "mov     eax, dword [rel data_16a508]",
    "cmp     dword [rel data_16a50c], eax",
    "jne     0x103223",
    "movsxd  r13, r13d",
    "lea     rbx, [rbp-0x3f]",
    "mov     r15d, dword [rel data_160314]",
    "mov     dword [rel data_160314], 0x0",
    "call    _rl_input_available",
    "test    r15d, r15d",
    "js      0x1031cb",
    "movsx   edi, byte [rbx+r13]",
    "sub     r13, 0x1",
    "call    _rl_unget_char",
    "cmp     r13d, 0xffffffff",
    "jne     0x103230",
    "xor     eax, eax",
    "test    r12d, r12d",
    "cmovle  eax, r12d",
    "jmp     0x1031fc",
    "test    eax, eax",
    "je      0x103223",
    "mov     dword [rel data_160314], r15d",
    "call    rl_read_key",
    "mov     r12d, eax",
    "test    eax, eax",
    "js      0x103229",
    "mov     byte [rbp+rbx-0x3f], al",
    "lea     rax, [rbx+0x1]",
    "cmp     r12b, byte [r14+rbx+0x1]",
    "jne     0x103220",
    "mov     r13d, ebx",
    "mov     rbx, rax",
    "lea     r13d, [rbx-0x1]",
    "cmp     rbx, 0x6",
    "jne     0x103187"
  ]
}