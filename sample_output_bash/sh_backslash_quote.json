{
  "address": "0xd7960",
  "rules": [
    "hash data using aphash/8f862f7edc7641079bc7234f31736b95",
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "hash data using aphash/ef28217586414e46ab1e9ea5fafa8c30",
    "hash data with CRC32/6874091fc240423886717926d876159d",
    "encrypt data using XTEA/10ee0a8316f84c4781969a6e3e0ea247/37fcdffa79f84274a0a7280c1c8f403a",
    "check for kernel debugger via shared user data structure/300b95c5a43549898dd5e28afc704e20",
    "encrypt data using TEA/d92840dc497d469aaa95c1543453a00c/2595307ea71d425c8c0b4e2392af2cf7",
    "decrypt data using TEA/066cb8df2a774080be2d27329c2aadaf/ba22e5cbb4214cdaa9e658605c2a045c",
    "check for kernel debugger via shared user data structure/47a8170337e74f7ca5a6c64253eb43bf",
    "check for time delay via GetTickCount/52f86f6d7253482ca8f0e5163432b494",
    "contain loop",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/03953aa079f14ec384dfb3745989fa21"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rsi",
    "push    r13",
    "mov     r13d, edx",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "sub     rsp, 0x48",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "mov     qword [rbp-0x40], 0x0",
    "call    strlen",
    "lea     rbx, [r12+rax]",
    "mov     qword [rbp-0x48], rbx",
    "lea     rbx, [rax+rax+0x1]",
    "mov     rdi, rbx",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0xd7c28",
    "mov     rsi, rbx",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "test    r14, r14",
    "lea     rax, [rel data_138860]",
    "cmove   r14, rax",
    "call    __ctype_get_mb_cur_max",
    "mov     r9d, eax",
    "movsx   eax, byte [r12]",
    "mov     ecx, eax",
    "test    eax, eax",
    "je      0xd7c20",
    "mov     rbx, r15",
    "jmp     0xd7ab0",
    "mov     r10d, r13d",
    "mov     rsi, r12",
    "mov     rbx, r15",
    "and     r10d, 0x2",
    "jmp     0xd7a6a",
    "mov     byte [rbx], 0x0",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd7c3e",
    "lea     rdx, [rsi+0x1]",
    "cmp     eax, 0x7f",
    "jbe     0xd79f0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x48",
    "mov     rax, r15",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "movsx   rdi, cl",
    "cmp     byte [r14+rdi], 0x1",
    "je      0xd7b20",
    "lea     rdi, [rel locale_utf8locale]",
    "mov     r8d, dword [rdi]",
    "test    r8d, r8d",
    "je      0xd7a0c",
    "mov     byte [rbx], 0x5c",
    "mov     rax, rsi",
    "add     rbx, 0x2",
    "mov     rsi, rdx",
    "mov     byte [rbx-0x1], cl",
    "jmp     0xd7a60",
    "lea     rdi, [rel locale_utf8locale]",
    "mov     edi, dword [rdi]",
    "test    edi, edi",
    "jne     0xd7a31",
    "cmp     r9d, 0x1",
    "jle     0xd7a31",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jg      0xd7ba0",
    "movsx   eax, byte [rax+0x1]",
    "mov     ecx, eax",
    "test    eax, eax",
    "je      0xd7ab0",
    "movzx   edi, cl",
    "cmp     byte [r14+rdi], 0x1",
    "je      0xd7a4d",
    "mov     edi, ecx",
    "lea     r8, [rel is_basic_table]",
    "shr     dil, 0x5",
    "and     edi, 0x7",
    "mov     edi, dword [r8+rdi*4]",
    "shr     edi, cl",
    "and     edi, 0x1",
    "je      0xd7b38",
    "mov     eax, ecx",
    "lea     rdx, [rel is_basic_table]",
    "shr     al, 0x5",
    "and     eax, 0x7",
    "mov     eax, dword [rdx+rax*4]",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0xd7b48",
    "mov     rax, rsi",
    "mov     byte [rbx], cl",
    "mov     rsi, rdx",
    "add     rbx, 0x1",
    "movsx   eax, byte [rax+0x1]",
    "mov     ecx, eax",
    "test    eax, eax",
    "jne     0xd7a6a",
    "mov     byte [rbx], 0x5c",
    "lea     rax, [rbx+0x1]",
    "cmp     eax, 0x23",
    "jne     0xd7ae0",
    "lea     rax, [rel locale_mb_cur_max]",
    "cmp     dword [rax], 0x1",
    "jle     0xd7a96",
    "mov     rdx, qword [rbp-0x48]",
    "mov     rax, qword [rbp-0x40]",
    "xor     edi, edi",
    "lea     rcx, [rbp-0x40]",
    "mov     dword [rbp-0x5c], r10d",
    "sub     rdx, rsi",
    "mov     dword [rbp-0x58], r9d",
    "mov     qword [rbp-0x50], rsi",
    "mov     qword [rbp-0x68], rax",
    "call    mbrtowc",
    "mov     edx, 0x1",
    "mov     rsi, qword [rbp-0x50]",
    "mov     r9d, dword [rbp-0x58]",
    "test    rax, rax",
    "mov     r10d, dword [rbp-0x5c]",
    "cmovne  rdx, rax",
    "cmp     rax, 0xfffffffffffffffd",
    "jbe     0xd7bbd",
    "mov     edx, 0x1",
    "nop     dword [rax]",
    "cmp     eax, 0x7e",
    "jne     0xd7aef",
    "cmp     r12, rsi",
    "jne     0xd7ae0",
    "mov     rdi, rbx",
    "mov     dword [rbp-0x68], r10d",
    "mov     dword [rbp-0x5c], r9d",
    "mov     qword [rbp-0x58], rdx",
    "mov     qword [rbp-0x50], rsi",
    "call    memcpy",
    "mov     rdx, qword [rbp-0x58]",
    "mov     rsi, qword [rbp-0x50]",
    "mov     r9d, dword [rbp-0x5c]",
    "mov     r10d, dword [rbp-0x68]",
    "lea     rax, [rsi+rdx-0x1]",
    "add     rbx, rdx",
    "add     rsi, rdx",
    "jmp     0xd7a60",
    "mov     rax, qword [rbp-0x68]",
    "mov     qword [rbp-0x40], rax",
    "jmp     0xd7bb8",
    "mov     rax, rbx",
    "test    r10d, r10d",
    "je      0xd7a54",
    "test    r13b, 0x1",
    "jne     0xd7bf8",
    "mov     byte [rax], cl",
    "lea     rbx, [rax+0x1]",
    "mov     rax, rsi",
    "mov     rsi, rdx",
    "lea     r8, [rel sh_syntaxtab]",
    "movzx   edi, cl",
    "test    byte [r8+rdi*4+0x1], 0x20",
    "jne     0xd7a4d",
    "cmp     r12, rsi",
    "je      0xd7a4d",
    "jmp     0xd7a54",
    "movzx   eax, byte [rsi-0x1]",
    "cmp     al, 0x3a",
    "je      0xd7a4d",
    "cmp     al, 0x3d",
    "jne     0xd7aef",
    "jmp     0xd7a4d"
  ]
}