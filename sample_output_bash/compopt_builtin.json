{
  "address": "0xd1750",
  "rules": [
    "decrypt data using TEA/ab7f9f2b007f48f680d6bcb7da99c5f3/228e05560ef647b99ab605fac0daf580",
    "populate SysWhispers2 syscall list/074b321f7b7941958bfc8de4f583b5b2",
    "encrypt data using TEA/125a16c5ca784de5b4ec344bb7f45260/b9272fb9d4744824873ec7d3c8013c6c",
    "hash data using aphash/e04b32e4de024de7af9a97876e98ac22",
    "encrypt data using XXTEA/55da17cb2d2b4f30ac54eab7c66fa3d3/053ec9add6b744e4993f7dc6e62f924f",
    "contain loop",
    "hash data with CRC32/b31bffa9a15b460bbcbd04d2822872fb",
    "encrypt data using XTEA/5c1c4c90f3124e8b8e496a40b647bc29/214603c8f1d64a2ea9add8dd99e7e802",
    "check for kernel debugger via shared user data structure/6be60e61779449d185f0bab196679834",
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "lea     r13, [rbp-0x40 {var_48}]",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x38",
    "mov     qword [rbp-0x48 {var_50}], rdi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "lea     rax, [rel loptend]",
    "mov     dword [rbp-0x40 {var_48}], 0x0",
    "mov     dword [rbp-0x3c {var_44}], 0x0",
    "mov     qword [rax], 0x0  {loptend}",
    "lea     rax, [rel lcurrent]",
    "mov     qword [rel data_168d30], 0x0",
    "mov     qword [rax], 0x0  {lcurrent}",
    "mov     dword [rel data_168d28], 0x1",
    "mov     dword [rbp-0x5c {var_64}], 0x0",
    "mov     dword [rbp-0x58 {var_60}], 0x0",
    "mov     dword [rbp-0x54 {var_5c}], 0x0",
    "lea     rax, [rel loptend]",
    "mov     ecx, dword [rbp-0x54 {var_5c}]",
    "lea     rdi, [rel data_12104a]  {\"_DefaultCmD_\"}",
    "mov     rbx, qword [rax]  {loptend}",
    "test    ecx, ecx",
    "jne     0xd19da",
    "lea     rdx, [rel list_opttype]",
    "mov     r15, r13 {var_48}",
    "cmp     dword [rdx], 0x2d",
    "jne     0xd17fc  {list_opttype}",
    "call    make_bare_word",
    "xor     esi, esi  {0x0}",
    "mov     rdi, rax",
    "call    make_word_list",
    "mov     r13, rax",
    "mov     rax, rbx",
    "or      rax, r13",
    "jne     0xd1a9e",
    "mov     edx, dword [rbp-0x58 {var_60}]",
    "lea     rdi, [rel data_120c68]  {\"_EmptycmD_\"}",
    "test    edx, edx",
    "jne     0xd19da",
    "cmp     eax, 0x45",
    "je      0xd1900",
    "lea     r15, [rbp-0x3c {var_44}]",
    "mov     r12, r13",
    "test    r13, r13",
    "jne     0xd1958",
    "lea     rax, [rel rl_readline_state]",
    "mov     rax, qword [rax]  {rl_readline_state}",
    "test    ah, 0x40",
    "je      0xd1b00",
    "mov     eax, dword [rbp-0x5c {var_64}]",
    "test    eax, eax",
    "jne     0xd19d3",
    "mov     dword [rbp-0x58 {var_60}], 0x1",
    "jmp     0xd17d0",
    "jg      0xd1828",
    "lea     rbx, [rel prog_completes]",
    "xor     r14d, r14d  {0x0}",
    "jmp     0xd1985",
    "test    rbx, rbx",
    "jne     0xd1952",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1344b8]  {\"not currently executing completi\u2026\"}",
    "xor     edi, edi  {0x0}",
    "mov     r14d, 0x1",
    "call    dcgettext",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xd18b3",
    "lea     rax, [rel pcomp_curcs]",
    "mov     rsi, qword [rax]  {pcomp_curcs}",
    "test    rsi, rsi",
    "je      0xd1b00",
    "lea     rdi, [rel data_120c4f]  {\"_InitialWorD_\"}",
    "test    rbx, rbx",
    "je      0xd19f8",
    "mov     rdi, qword [rbp-0x48 {var_50}]",
    "lea     rsi, [rel data_121bf4]  {\"+o:DEI\"}",
    "call    internal_getopt",
    "cmp     eax, 0xffffffff",
    "je      0xd1910",
    "cmp     eax, 0x49",
    "je      0xd18f0",
    "cmp     eax, 0xffffff9d",
    "je      0xd18e0",
    "mov     rax, qword [r13+0x8]",
    "mov     rsi, qword [rbx]  {prog_completes}",
    "mov     r15, qword [rax]",
    "test    rsi, rsi",
    "je      0xd1ad5",
    "mov     r13, rbx",
    "xor     r12d, r12d  {0x0}",
    "jmp     0xd1a96",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd1bdd",
    "mov     edx, dword [rbp-0x3c {var_44}]",
    "mov     eax, dword [rbp-0x40 {var_48}]",
    "test    edx, edx",
    "jne     0xd1b56",
    "mov     dword [rbp-0x5c {var_64}], 0x1",
    "jmp     0xd17d0",
    "cmp     eax, 0x6f",
    "jne     0xd18a8",
    "call    builtin_help",
    "jmp     0xd18ad",
    "cmp     eax, 0x44",
    "jne     0xd18a8",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_134498]  {\"%s: no completion specification\"}",
    "xor     edi, edi  {0x0}",
    "mov     r14d, 0x1",
    "call    dcgettext",
    "mov     rsi, r15",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xd1978",
    "xor     edx, edx  {0x0}",
    "mov     rdi, r15",
    "call    hash_search",
    "test    rax, rax",
    "je      0xd1ace",
    "xor     r14d, r14d  {0x0}",
    "jmp     0xd18b3",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x38",
    "mov     eax, r14d",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     edi, eax",
    "movsxd  rcx, edx",
    "or      rcx, qword [rsi+0x10]",
    "not     edi",
    "movsxd  rdi, edi",
    "and     rcx, rdi",
    "mov     qword [rsi+0x10], rcx",
    "test    dl, 0x4",
    "je      0xd1b7d",
    "test    eax, eax",
    "je      0xd1baa",
    "call    builtin_usage",
    "lea     rax, [rel list_optarg]",
    "lea     r12, [rel data_1551d0]",
    "xor     ebx, ebx  {0x0}",
    "lea     rsi, [rel data_121bb2]  {\"bashdefault\"}",
    "mov     rax, qword [rax]  {list_optarg}",
    "mov     qword [rbp-0x50 {var_58_1}], rax",
    "movzx   r14d, byte [rax]",
    "mov     eax, 0x62",
    "jmp     0xd1877",
    "mov     r14d, 0x102",
    "mov     dword [rbp-0x54 {var_5c}], 0x1",
    "jmp     0xd17d0",
    "mov     r13, qword [r13]",
    "test    r13, r13",
    "je      0xd1ab8",
    "mov     rax, qword [r13+0x8]",
    "mov     r15, qword [rax]",
    "mov     rsi, qword [rax+0x10]",
    "test    rsi, rsi",
    "je      0xd1ace",
    "test    dl, 0x20",
    "je      0xd1b8f",
    "lea     rcx, [rel rl_filename_completion_desired]",
    "mov     dword [rcx], 0x1  {rl_filename_completion_desired}",
    "lea     rax, [rel pcomp_curcmd]",
    "mov     rdi, qword [rax]  {pcomp_curcmd}",
    "call    sub_111120",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xd1bdd",
    "mov     ecx, eax",
    "not     ecx",
    "movsxd  rcx, ecx",
    "and     qword [rsi+0x10], rcx",
    "cmp     r14b, al",
    "jne     0xd1860",
    "test    r12, r12",
    "je      0xd18b3",
    "movsxd  rax, dword [rbp-0x3c {var_44}]",
    "mov     edx, dword [rbp-0x40 {var_48}]",
    "mov     ecx, eax",
    "or      ecx, edx",
    "jne     0xd1968",
    "test    dl, 0x10",
    "je      0xd1a3f",
    "lea     rcx, [rel rl_completion_suppress_append]",
    "mov     dword [rcx], 0x1  {rl_completion_suppress_append}",
    "add     rsp, 0x38",
    "xor     edi, edi  {0x0}",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "jmp     sh_chkwrite",
    "test    al, 0x4",
    "je      0xd1a62",
    "lea     rdx, [rel rl_sort_completion_matches]",
    "mov     dword [rdx], 0x0  {rl_sort_completion_matches}",
    "mov     rsi, qword [r12]",
    "add     r12, 0x10",
    "add     ebx, 0x1",
    "test    rsi, rsi",
    "je      0xd1b30",
    "mov     rdi, qword [rbp-0x50 {var_58_1}]",
    "call    strcmp",
    "test    eax, eax",
    "jne     0xd1860",
    "mov     rdi, r12",
    "call    dispose_words",
    "jmp     0xd18b3",
    "not     edx",
    "or      rax, qword [rsi+0x10]",
    "movsxd  rdx, edx",
    "and     rax, rdx",
    "mov     qword [rsi+0x10], rax",
    "mov     rax, qword [r13+0x8]",
    "mov     rdi, qword [rax]",
    "call    sub_111120",
    "jmp     0xd1978",
    "and     dh, 0x1",
    "je      0xd1a51",
    "lea     rcx, [rel rl_filename_quoting_desired]",
    "mov     dword [rcx], 0x0  {rl_filename_quoting_desired}",
    "jmp     0xd1a3f",
    "test    al, 0x20",
    "je      0xd1a73",
    "lea     rdx, [rel rl_filename_completion_desired]",
    "mov     dword [rdx], 0x0  {rl_filename_completion_desired}",
    "xor     edi, edi  {0x0}",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1210b0]  {\"%s: invalid option name\"}",
    "call    dcgettext",
    "mov     rsi, qword [rbp-0x50 {var_58_1}]",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "call    builtin_error",
    "jmp     0xd18ad",
    "movzx   eax, byte [rsi]",
    "movsxd  rcx, ebx",
    "lea     rax, [rel data_1551c0]",
    "shl     rcx, 0x4",
    "mov     rax, qword [rax+rcx+0x8]",
    "or      dword [r15], eax",
    "jmp     0xd17d0",
    "test    al, 0x10",
    "je      0xd1a84",
    "lea     rdx, [rel rl_completion_suppress_append]",
    "mov     dword [rdx], 0x0  {rl_completion_suppress_append}",
    "test    ah, 0x1",
    "je      0xd1a96",
    "lea     rdx, [rel rl_filename_quoting_desired]",
    "mov     dword [rdx], 0x1  {rl_filename_quoting_desired}",
    "lea     rax, [rel rl_sort_completion_matches]",
    "mov     dword [rax], 0x1  {rl_sort_completion_matches}"
  ],
  "high level IL": [
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "int32_t var_48 = 0",
    "int32_t var_44 = 0",
    "__builtin_memset(&data_168d30, 0, 0x18)",
    "data_168d28 = 1",
    "int32_t var_64 = 0",
    "int32_t var_60 = 0",
    "int32_t var_5c = 0",
    "while (true)",
    "label_d17db:",
    "int32_t rax_1 = internal_getopt(arg1, \"+o:DEI\")",
    "int32_t r14_2",
    "if (rax_1 == 0xffffffff)",
    "char const* const rdi_2 = \"_DefaultCmD_\"",
    "uint64_t loptend_1 = loptend",
    "if (var_5c != 0)",
    "goto label_d19e9",
    "rdi_2 = \"_EmptycmD_\"",
    "if (var_60 != 0)",
    "goto label_d19e9",
    "uint64_t i_1",
    "uint64_t i",
    "if (var_64 != 0)",
    "rdi_2 = \"_InitialWorD_\"",
    "label_d19e9:",
    "i = make_word_list(make_bare_word(rdi_2), 0)",
    "if ((loptend_1 | i) != 0)",
    "i_1 = i",
    "if (i != 0)",
    "goto label_d195f",
    "if (loptend_1 != 0)",
    "goto label_d1952",
    "r14_2 = 0",
    "label_d1a05:",
    "uint64_t pcomp_curcs_1",
    "if (((rl_readline_state).w:1.b & 0x40) != 0)",
    "pcomp_curcs_1 = pcomp_curcs",
    "if (((rl_readline_state).w:1.b & 0x40) == 0 || pcomp_curcs_1 == 0)",
    "r14_2 = 1",
    "builtin_error(dcgettext(nullptr, \"not currently executing completi\u2026\", 5), 0)",
    "int32_t rdx_5 = var_44",
    "int32_t rax_20 = var_48",
    "if (rdx_5 != 0)",
    "*(pcomp_curcs_1 + 0x10) = (sx.q(rdx_5) | *(pcomp_curcs_1 + 0x10)) & sx.q(not.d(rax_20))",
    "if ((rdx_5.b & 4) != 0)",
    "rl_filename_completion_desired = 1",
    "if ((rdx_5.b & 0x20) != 0)",
    "rl_completion_suppress_append = 1",
    "if ((rdx_5.b & 0x10) != 0)",
    "rl_filename_quoting_desired = 0",
    "if (rax_20 == 0)",
    "sub_111120(pcomp_curcmd, pcomp_curcs_1)",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return sh_chkwrite(0) __tailcall",
    "break",
    "*(pcomp_curcs_1 + 0x10) &= sx.q(not.d(rax_20))",
    "rdx_5:1.b &= 1",
    "if (rdx_5:1.b != 0)",
    "rl_sort_completion_matches = 0",
    "if ((rax_20.b & 4) != 0)",
    "rl_filename_completion_desired = 0",
    "if ((rax_20.b & 0x20) != 0)",
    "rl_completion_suppress_append = 0",
    "if ((rax_20.b & 0x10) != 0)",
    "rl_filename_quoting_desired = 1",
    "if ((rax_20:1.b & 1) != 0)",
    "rl_sort_completion_matches = 1",
    "r14_2 = 0",
    "if (loptend_1 == 0)",
    "goto label_d1a05",
    "label_d1952:",
    "i = loptend_1",
    "i_1 = 0",
    "label_d195f:",
    "r14_2 = 0",
    "uint64_t prog_completes_1 = prog_completes",
    "if (prog_completes_1 == 0)",
    "r14_2 = 1",
    "builtin_error(dcgettext(nullptr, \"%s: no completion specification\", 5), 0)",
    "void** rax_12 = hash_search(**(i + 8), prog_completes_1, 0)",
    "void* rsi_2",
    "if (rax_12 != 0)",
    "rsi_2 = rax_12[2]",
    "if (rax_12 == 0 || rsi_2 == 0)",
    "**(i + 8)",
    "r14_2 = 1",
    "builtin_error(dcgettext(nullptr, \"%s: no completion specification\", 5), 0)",
    "int64_t rax_13 = sx.q(var_44)",
    "int32_t rdx_4 = var_48",
    "if ((rax_13.d | rdx_4) != 0)",
    "*(rsi_2 + 0x10) = (rax_13 | *(rsi_2 + 0x10)) & sx.q(not.d(rdx_4))",
    "sub_111120(**(i + 8), rsi_2)",
    "i = *i",
    "do while (i != 0)",
    "if (i_1 != 0)",
    "dispose_words(i_1)",
    "int32_t* r15_1 = &var_48",
    "if (list_opttype == 0x2d)",
    "r15_1 = &var_44",
    "if (rax_1 == 0x45)",
    "var_60 = 1",
    "continue",
    "if (rax_1 s> 0x45)",
    "if (rax_1 == 0x49)",
    "var_64 = 1",
    "continue",
    "if (rax_1 != 0x6f)",
    "builtin_usage()",
    "char const (** const r12_1)[0x8] = &data_1551d0",
    "int32_t rbx_1 = 0",
    "char const (* rsi_1)[0x8] = \"bashdefault\"",
    "uint64_t list_optarg_1 = list_optarg",
    "char r14_1 = *list_optarg_1",
    "char const rax_2 = 0x62",
    "while (true)",
    "if (r14_1 == rax_2 && strcmp(list_optarg_1, rsi_1) == 0)",
    "*r15_1 |= (*((sx.q(rbx_1) << 4) + 0x1551c8)).d",
    "goto label_d17db",
    "rsi_1 = *r12_1",
    "r12_1 = &r12_1[2]",
    "rbx_1 += 1",
    "if (rsi_1 == 0)",
    "builtin_error(dcgettext(nullptr, \"%s: invalid option name\", 5), 0)",
    "break",
    "rax_2 = *rsi_1",
    "if (rax_1 == 0xffffff9d)",
    "builtin_help()",
    "if (rax_1 == 0x44)",
    "var_5c = 1",
    "continue",
    "builtin_usage()",
    "r14_2 = 0x102",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return zx.q(r14_2)",
    "break",
    "__stack_chk_fail()",
    "noreturn"
  ]
}