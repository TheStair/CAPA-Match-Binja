{
  "address": "0xb0be0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rax",
    "xor     eax, eax",
    "test    rdi, rdi",
    "je      0xb0c50",
    "lea     rax, [rel this_shell_builtin]",
    "lea     rcx, [rel return_builtin]",
    "cmp     qword [rax], rcx",
    "je      0xb0ca0",
    "mov     rax, qword [rdi+0x8]",
    "mov     rbx, rdi",
    "mov     rdi, qword [rax]",
    "cmp     byte [rdi], 0x2d",
    "je      0xb0c70",
    "lea     rax, [rel running_trap]",
    "mov     eax, dword [rax]",
    "cmp     eax, 0x42",
    "je      0xb0c63",
    "lea     rax, [rel last_command_exit_value]",
    "mov     eax, dword [rax]",
    "jmp     0xb0c2f",
    "cmp     byte [rdi+0x1], 0x2d",
    "jne     0xb0c10",
    "lea     rsi, [rbp-0x20]",
    "call    legal_number",
    "test    eax, eax",
    "je      0xb0cc0",
    "test    eax, eax",
    "jle     0xb0c63",
    "mov     rdx, qword [rbp-0x18]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xb0cf6",
    "cmp     byte [rdi+0x2], 0x0",
    "jne     0xb0c10",
    "mov     rax, qword [rbx+0x8]",
    "mov     rbx, qword [rax]",
    "test    rbx, rbx",
    "je      0xb0c90",
    "cmp     qword [rbx], 0x0",
    "jne     0xb0cfb",
    "lea     rax, [rel trap_saved_exit_value]",
    "mov     eax, dword [rax]",
    "jmp     0xb0c2f",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rbx, qword [rbp-0x8]",
    "leave   ",
    "retn    ",
    "mov     rbx, qword [rbx]",
    "test    rbx, rbx",
    "je      0xb0c50",
    "lea     rbx, [rel data_12126b]",
    "jmp     0xb0ccc",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_121092]  {\"%s: numeric argument required\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "xor     eax, eax",
    "call    builtin_error",
    "mov     eax, 0x2",
    "jmp     0xb0c2f",
    "call    sub_b07f0",
    "{ Does not return }",
    "movzx   eax, byte [rbp-0x20]",
    "mov     rax, qword [rbx+0x8]",
    "mov     rdi, qword [rax]",
    "test    rdi, rdi",
    "jne     0xb0c10"
  ]
}