{
  "address": "0xdc390",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "encrypt data using HC-128/26adaa3641374fccbeddc33b759c970e",
    "hash data using aphash/1c6766435cde44639c26b9e1f0d91a11",
    "encrypt data using XXTEA/41ded627096c472a8da56bad13f19605/9f5ed5341ae94a0d943f2c8a6a459760",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r14",
    "push    r13",
    "mov     r13d, esi",
    "push    r12",
    "mov     r12, rdi",
    "mov     edi, 0x1001",
    "push    rbx",
    "sub     rsp, 0x10",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0xdc4d6",
    "mov     esi, 0x1001",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edi, r13d",
    "call    sub_dbf50",
    "mov     r14, rax",
    "test    r12, r12",
    "je      0xdc4b0",
    "lea     r12, [rel data_122021]  {\"shtmp\"}",
    "jmp     0xdc3e9",
    "and     r13d, 0x8",
    "je      0xdc3e9",
    "mov     r9, r12",
    "mov     r8, r14",
    "lea     rcx, [rel data_122027]  {\"%s/%s.XXXXXX\"}",
    "mov     rdi, rbx",
    "mov     edx, 0x1001",
    "mov     esi, 0x2",
    "xor     eax, eax",
    "call    __sprintf_chk",
    "mov     rdi, r12",
    "call    strlen",
    "cmp     rax, 0x1000",
    "jbe     0xdc428",
    "mov     rdi, rbx",
    "mov     qword [rbp-0x28], rax",
    "call    free",
    "mov     rax, qword [rbp-0x28]",
    "add     rsp, 0x10",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "add     rsp, 0x10",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     rbp",
    "retn    ",
    "add     rax, 0x1",
    "cmp     eax, 0x8",
    "jae     0xdc460",
    "mov     edx, eax",
    "mov     rdi, rbx",
    "mov     rsi, r12",
    "mov     rcx, qword [r12+rdx-0x8]",
    "mov     qword [rbx+rdx-0x8], rcx",
    "lea     ecx, [rax-0x1]",
    "mov     eax, ecx",
    "shr     eax, 0x3",
    "mov     ecx, eax",
    "rep movsq qword [rdi], [rsi]",
    "mov     rdi, rbx",
    "call    mkdtemp",
    "test    rax, rax",
    "jne     0xdc417",
    "test    al, 0x4",
    "jne     0xdc4c0",
    "mov     edx, dword [r12]",
    "mov     eax, eax",
    "mov     dword [rbx], edx",
    "mov     edx, dword [r12+rax-0x4]",
    "mov     dword [rbx+rax-0x4], edx",
    "jmp     0xdc40a",
    "test    eax, eax",
    "je      0xdc40a",
    "mov     rdi, rbx",
    "call    mkdtemp",
    "test    rax, rax",
    "je      0xdc48c",
    "movzx   edx, byte [r12]",
    "mov     byte [rbx], dl",
    "test    al, 0x2",
    "je      0xdc40a",
    "mov     eax, eax",
    "movzx   edx, word [r12+rax-0x2]",
    "mov     word [rbx+rax-0x2], dx",
    "jmp     0xdc40a"
  ]
}