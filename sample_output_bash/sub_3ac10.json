{
  "address": "0x3ac10",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/2ca16ccf2c974f3f90e3b8d02944442a",
    "connect to WMI namespace via WbemLocator/472165133b624c67bbc5d17c3915a018",
    "check for time delay via GetTickCount/173be9e5d4d440c09f85224fcb793b6a",
    "contain loop"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "push    rbx",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    sub_345e0",
    "lea     r13, [rel line_number]",
    "mov     r14d, dword [r13]",
    "cmp     eax, 0x112",
    "je      0x3adae",
    "mov     dword [rel data_1608dc], 0x113",
    "mov     ebx, eax",
    "cmp     eax, 0x28",
    "je      0x3afe0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "call    sub_3b4d0",
    "mov     ebx, dword [rel data_1608dc]",
    "mov     r12, rax",
    "cmp     ebx, 0x29",
    "jne     0x3b088",
    "cmp     eax, 0x115",
    "je      0x3afc2",
    "test    rax, rax",
    "je      0x3b095",
    "mov     edi, 0x28",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b3ee",
    "call    sub_3ac10",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3adba",
    "cmp     eax, 0x119",
    "jne     0x3ad80",
    "mov     edi, ebx",
    "call    sub_3aaa0",
    "mov     edx, 0x5",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b250",
    "mov     rdi, rax",
    "call    dispose_cond_node",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     eax, dword [r13]",
    "mov     dword [rbx], 0x0",
    "mov     dword [rbx+0x8], 0x6",
    "mov     dword [rbx+0x4], eax",
    "mov     qword [rbx+0x10], 0x0",
    "mov     qword [rbx+0x18], r12",
    "mov     qword [rbx+0x20], 0x0",
    "call    sub_345e0",
    "jmp     0x3adba",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x3b365",
    "xor     dword [rax], 0x4",
    "jmp     0x3adba",
    "cmp     eax, 0xff",
    "jg      0x3b040",
    "lea     rax, [rel yylval]",
    "mov     r15, qword [rax]",
    "mov     rdi, qword [r15]",
    "movzx   eax, byte [rdi]",
    "cmp     al, 0x21",
    "je      0x3afb0",
    "xor     edi, edi",
    "lea     rsi, [rel data_11f15d]  {\"expected `)'\"}",
    "call    dcgettext",
    "mov     edi, r14d",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x3adae",
    "xor     edi, edi",
    "lea     rsi, [rel data_1233b0]  {\"unexpected token `%s', expected \u2026\"}",
    "call    dcgettext",
    "mov     edi, r14d",
    "mov     rdx, rbx",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x3adae",
    "mov     edi, eax",
    "call    sub_3aaa0",
    "mov     edx, 0x5",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x3b240",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_123520]  {\"unexpected token `%c' in conditi\u2026\"}",
    "cmp     byte [rdi+0x1], 0x0",
    "jne     0x3ac92",
    "cmp     al, 0x2d",
    "jne     0x3ac92",
    "lea     rsi, [rel data_123580]  {\"unexpected token %d in condition\u2026\"}",
    "jmp     0x3ad97",
    "xor     edi, edi",
    "lea     rsi, [rel data_123550]  {\"unexpected token `%s' in conditi\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rdx, r12",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     rdi, r12",
    "call    free",
    "jmp     0x3adae",
    "mov     edi, 0x28",
    "call    malloc",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x3b36a",
    "mov     rdi, r15",
    "call    dispose_word",
    "cmp     byte [rdi+0x1], 0x0",
    "jne     0x3aee0",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     edx, ebx",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     qword [r12+0x10], r15",
    "mov     dword [r12], 0x0",
    "mov     dword [r12+0x4], r14d",
    "mov     dword [r12+0x8], 0x5",
    "mov     qword [r12+0x18], 0x0",
    "mov     qword [r12+0x20], 0x0",
    "call    sub_1145f0",
    "mov     r15d, eax",
    "cmp     eax, 0x119",
    "je      0x3b130",
    "cmp     byte [rdi+0x2], 0x0",
    "jne     0x3ac92",
    "lea     rax, [rel yylval]",
    "mov     r14, qword [rax]",
    "mov     rdx, qword [r14]",
    "mov     rdi, rdx",
    "mov     qword [rbp-0x50], rdx",
    "call    test_binop",
    "mov     rdx, qword [rbp-0x50]",
    "mov     ecx, eax",
    "movzx   eax, byte [rdx]",
    "test    ecx, ecx",
    "jne     0x3b1b0",
    "and     eax, 0xfffffffd",
    "cmp     eax, 0x3c",
    "je      0x3ade0",
    "call    test_unop",
    "test    eax, eax",
    "je      0x3ac92",
    "lea     rbx, [rel parser_state]",
    "mov     ecx, dword [rbx]",
    "cmp     al, 0x3d",
    "je      0x3b0e0",
    "cmp     al, 0x3d",
    "je      0x3b290",
    "lea     r14, [rbp-0x3a]",
    "mov     byte [rbp-0x3a], r15b",
    "mov     rdi, r14",
    "mov     byte [rbp-0x39], 0x0",
    "call    make_bare_word",
    "mov     rsi, r14",
    "mov     rdi, rax",
    "call    make_word_flags",
    "lea     rbx, [rel parser_state]",
    "mov     r14, rax",
    "mov     eax, dword [rbx]",
    "and     eax, 0x1000",
    "cmp     r15d, 0x112",
    "je      0x3ad19",
    "call    sub_1145f0",
    "mov     r12d, eax",
    "cmp     eax, 0x119",
    "jne     0x3b2fb",
    "movzx   edi, byte [rdx+0x1]",
    "test    dil, dil",
    "je      0x3b104",
    "cmp     al, 0x21",
    "je      0x3b2c1",
    "cmp     byte [rdx+0x1], 0x7e",
    "jne     0x3b15e",
    "mov     edi, r15d",
    "call    sub_3aaa0",
    "mov     edx, 0x5",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b2da",
    "mov     dword [r15], 0x1",
    "jmp     0x3ae25",
    "call    sub_1145f0",
    "mov     edx, dword [rbx]",
    "test    dh, 0x10",
    "je      0x3ae37",
    "lea     rbx, [rel data_11f16a]",
    "mov     rdi, rbx",
    "call    make_bare_word",
    "mov     rsi, rbx",
    "mov     rdi, rax",
    "call    make_word_flags",
    "mov     edi, 0x28",
    "mov     r14, rax",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b386",
    "cmp     r15d, 0x120",
    "je      0x3ad19",
    "mov     rdi, r15",
    "call    dispose_word",
    "mov     edi, r12d",
    "call    sub_3aaa0",
    "mov     edx, 0x5",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b344",
    "lea     rax, [rel yylval]",
    "mov     edi, 0x28",
    "mov     r12, qword [rax]",
    "call    malloc",
    "movq    xmm0, r15",
    "movq    xmm1, rax",
    "mov     rbx, rax",
    "punpcklqdq xmm0, xmm1",
    "movaps  xmmword [rbp-0x50], xmm0",
    "test    rax, rax",
    "je      0x3b406",
    "lea     r15, [rel extended_glob]",
    "or      ch, 0x10",
    "mov     dword [rbx], ecx",
    "mov     eax, dword [r15]",
    "mov     dword [rbp-0x50], eax",
    "nop     word [rax+rax]",
    "mov     eax, ecx",
    "and     eax, 0x1000",
    "cmp     dil, 0x3d",
    "jne     0x3ae10",
    "cmp     byte [rdx+0x1], 0x3d",
    "jne     0x3b1c9",
    "mov     eax, ecx",
    "and     eax, 0x1000",
    "jmp     0x3ae10",
    "cmp     byte [rdx+0x2], 0x0",
    "jne     0x3b15e",
    "xor     edi, edi",
    "lea     rsi, [rel data_123488]  {\"conditional binary operator expe\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x3b19e",
    "lea     rsi, [rel data_123448]  {\"unexpected token `%s', condition\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rdx, rbx",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     rdi, rbx",
    "call    free",
    "and     edx, 0xfffeefff",
    "mov     dword [rbx], edx",
    "cmp     eax, 0x119",
    "jne     0x3b1d8",
    "mov     ecx, dword [rbp-0x50]",
    "mov     dword [r15], ecx",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     eax, dword [r13]",
    "mov     dword [rbx], 0x0",
    "mov     dword [rbx+0x8], 0x3",
    "mov     dword [rbx+0x4], eax",
    "mov     qword [rbx+0x10], r14",
    "mov     qword [rbx+0x18], r12",
    "mov     qword [rbx+0x20], 0x0",
    "mov     dword [rel data_1608dc], r15d",
    "jmp     0x3adba",
    "cmp     r15d, 0x121",
    "je      0x3ad19",
    "xor     edi, edi",
    "lea     rsi, [rel data_123410]  {\"unexpected argument to condition\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x3adae",
    "xor     edi, edi",
    "lea     rsi, [rel data_1233d8]  {\"unexpected argument `%s' to cond\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rdx, rbx",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     rdi, rbx",
    "call    free",
    "jmp     0x3adae",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     r14d, dword [r13]",
    "mov     dword [rbx], 0x0",
    "mov     edi, 0x28",
    "mov     dword [rbx+0x8], 0x5",
    "mov     dword [rbx+0x4], r14d",
    "mov     qword [rbx+0x10], r12",
    "mov     qword [rbx+0x18], 0x0",
    "mov     qword [rbx+0x20], 0x0",
    "call    malloc",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b39e",
    "lea     r15, [rel extended_glob]",
    "mov     ecx, dword [r15]",
    "mov     dword [rbp-0x50], ecx",
    "test    eax, eax",
    "jne     0x3b120",
    "cmp     byte [rdx+0x2], 0x0",
    "jne     0x3ae10",
    "cmp     byte [rdx+0x2], 0x0",
    "je      0x3b104",
    "lea     rbx, [rel parser_state]",
    "mov     eax, dword [rbx]",
    "mov     edx, eax",
    "and     eax, 0x1000",
    "or      edx, 0x10000",
    "mov     dword [rbx], edx",
    "jmp     0x3ae10",
    "mov     rdi, r12",
    "call    dispose_cond_node",
    "jmp     0x3adae",
    "mov     edi, eax",
    "call    sub_3aaa0",
    "mov     edx, 0x5",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x3b270",
    "lea     rax, [rel yylval]",
    "mov     edi, 0x28",
    "mov     rbx, qword [rax]",
    "call    malloc",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x3b3d6",
    "cmp     r15d, 0x29",
    "jne     0x3b15e",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "movdqa  xmm2, xmmword [rbp-0x50]",
    "mov     dword [rbx], 0x0",
    "mov     dword [rbx+0x4], r14d",
    "mov     dword [rbx+0x8], 0x3",
    "mov     qword [rbx+0x20], 0x0",
    "movups  xmmword [rbx+0x10], xmm2",
    "call    sub_345e0",
    "jmp     0x3adba",
    "jmp     0x3b1c9",
    "xor     edi, edi",
    "lea     rsi, [rel data_1234e8]  {\"unexpected argument to condition\u2026\"}",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "jmp     0x3b217",
    "lea     rsi, [rel data_1234b0]  {\"unexpected argument `%s' to cond\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     edi, dword [r13]",
    "mov     rdx, rbx",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    parser_error",
    "mov     rdi, rbx",
    "call    free",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     edx, dword [r13]",
    "mov     qword [r15+0x10], rbx",
    "mov     edi, 0x28",
    "mov     dword [r15], 0x0",
    "mov     dword [r15+0x4], edx",
    "mov     dword [r15+0x8], 0x5",
    "mov     qword [r15+0x18], 0x0",
    "mov     qword [r15+0x20], 0x0",
    "mov     dword [rbp-0x50], edx",
    "call    malloc",
    "mov     edx, dword [rbp-0x50]",
    "test    rax, rax",
    "mov     rbx, rax",
    "je      0x3b3ba",
    "mov     rdi, r12",
    "call    dispose_cond_node",
    "mov     rdi, r14",
    "call    dispose_word",
    "mov     dword [rel data_1608dc], 0x113",
    "jmp     0x3adb8",
    "xor     ebx, ebx",
    "mov     esi, 0x28",
    "lea     rdi, [rel data_11f01e]  {\"xmalloc\"}",
    "xor     eax, eax",
    "call    sub_a7f00",
    "{ Does not return }",
    "mov     dword [rbx], 0x0",
    "mov     dword [rbx+0x4], edx",
    "mov     dword [rbx+0x8], 0x4",
    "mov     qword [rbx+0x10], r14",
    "mov     qword [rbx+0x18], r12",
    "mov     qword [rbx+0x20], r15",
    "call    sub_345e0",
    "jmp     0x3adba"
  ],
  "high level IL": [
    "No High Level IL Loaded"
  ]
}