{
  "address": "0xb0d00",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "populate SysWhispers2 syscall list/c39b22f6e84241eca7804bd75e10f745",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "mov     r15, rdi",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "lea     r13, [rel data_1216ad[0xb]]",
    "push    r12 {__saved_r12}",
    "xor     r12d, r12d  {0x0}",
    "push    rbx {__saved_rbx}",
    "lea     rbx, [rbp-0x40 {var_48}]",
    "sub     rsp, 0x28",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "test    rdi, rdi",
    "jne     0xb0df7",
    "mov     rax, qword [r15+0x8]",
    "mov     rsi, rbx {var_48}",
    "mov     rdi, qword [rax]",
    "call    legal_number",
    "test    eax, eax",
    "jne     0xb0d48",
    "jmp     0xb0ec0",
    "mov     rax, qword [rbp-0x40 {var_48}]",
    "cmp     rax, 0x80",
    "jle     0xb0d5c",
    "lea     rax, [rel posixly_correct]",
    "mov     esi, 0x3",
    "mov     eax, dword [rax]  {posixly_correct}",
    "test    eax, eax",
    "je      0xb0e3a",
    "test    esi, esi",
    "lea     r13, [rel signal_names]",
    "mov     ebx, 0x1",
    "lea     r14, [rel posixly_correct]",
    "sete    byte [rbp-0x48 {var_50_1}]",
    "nop     dword [rax]",
    "cmp     rax, 0x40",
    "ja      0xb0e60",
    "add     rax, 0xffffffffffffff80",
    "mov     qword [rbp-0x40 {var_48}], rax",
    "mov     rax, qword [r15+0x8]",
    "mov     rdi, qword [rax]",
    "call    decode_signal",
    "mov     edx, eax",
    "cmp     eax, 0xffffffff",
    "je      0xb0e60",
    "lea     rax, [rel this_shell_builtin]",
    "xor     esi, esi  {0x0}",
    "lea     rcx, [rel kill_builtin]",
    "cmp     qword [rax], rcx",
    "setne   sil  {this_shell_builtin}",
    "add     esi, 0x2",
    "movzx   eax, byte [r15]",
    "cmp     al, 0x53",
    "je      0xb0f80",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204c4]  {\"invalid signal number\"}",
    "xor     edi, edi  {0x0}",
    "call    dcgettext",
    "mov     r15, rax",
    "mov     rax, qword [r15+0x8]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_133bf8]  {\"%s: invalid signal specification\"}",
    "xor     edi, edi  {0x0}",
    "mov     r12, qword [rax]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, r12",
    "xor     eax, eax  {0x0}",
    "mov     r12d, 0x1",
    "call    builtin_error",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "jne     0xb0df7",
    "lea     rdx, [rel signal_names]",
    "mov     r14d, eax",
    "cdqe    ",
    "mov     rdi, qword [rdx+rax*8]",
    "test    rdi, rdi",
    "jne     0xb0d8f",
    "mov     rsi, r13  {data_1216ad[0xb], \"%d\\n\"}",
    "mov     edi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "jmp     0xb0deb",
    "mov     edx, 0x7",
    "lea     rsi, [rel data_121279]  {\"SIGJUNK\"}",
    "mov     rdi, r15",
    "call    strncmp",
    "test    eax, eax",
    "je      0xb103c",
    "cmp     al, 0x55",
    "jne     0xb0f28",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0xb1070",
    "movzx   eax, byte [rdi]",
    "mov     edx, 0x7",
    "lea     rsi, [rel data_121279]  {\"SIGJUNK\"}",
    "cmp     al, 0x53",
    "je      0xb0db2",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1204c4]  {\"invalid signal number\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     r15, qword [r15]",
    "test    r15, r15",
    "je      0xb0e99",
    "add     rbx, 0x1",
    "cmp     rbx, 0x41",
    "jne     0xb0ee0",
    "mov     ecx, dword [r14]  {posixly_correct}",
    "test    ecx, ecx",
    "je      0xb1010",
    "mov     esi, dword [r14]  {posixly_correct}",
    "test    esi, esi",
    "je      0xb1010",
    "mov     edx, 0x7",
    "lea     rsi, [rel data_121281]  {\"Unknown\"}",
    "mov     rdi, r15",
    "call    strncmp",
    "test    eax, eax",
    "je      0xb103c",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     eax, r12d",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     qword [rbp-0x48 {var_50}], rdi",
    "call    strncmp",
    "mov     rdi, qword [rbp-0x48 {var_50}]",
    "test    eax, eax",
    "je      0xb0deb",
    "cmp     al, 0x55",
    "jne     0xb0dc3",
    "mov     r15, qword [r13+rbx*8]",
    "test    r15, r15",
    "jne     0xb0f00",
    "jmp     0xb0fe5",
    "mov     rcx, r15",
    "mov     edx, ebx",
    "lea     rsi, [rel data_121289]  {\"%2d) %s\"}",
    "xor     eax, eax  {0x0}",
    "mov     edi, 0x2",
    "add     r12d, 0x1",
    "call    __printf_chk",
    "cmp     r12d, 0x4",
    "jg      0xb1050",
    "cmp     byte [rbp-0x48 {var_50_1}], 0x0",
    "je      0xb1010",
    "cmp     byte [rbp-0x48 {var_50_1}], 0x0",
    "je      0xb1010",
    "lea     rax, [rel this_shell_builtin]",
    "lea     rcx, [rel kill_builtin]",
    "cmp     qword [rax], rcx",
    "jne     0xb0de6  {this_shell_builtin}",
    "mov     edx, 0x7",
    "lea     rsi, [rel data_121281]  {\"Unknown\"}",
    "mov     edx, dword [r14]  {posixly_correct}",
    "test    edx, edx",
    "je      0xb0ff2",
    "mov     edi, 0xa",
    "add     rbx, 0x1",
    "xor     r12d, r12d  {0x0}",
    "call    putchar",
    "cmp     rbx, 0x41",
    "jne     0xb0ee0",
    "mov     edi, 0x9",
    "call    putchar",
    "cmp     byte [r15+0x1], 0x49",
    "jne     0xb0f3d",
    "cmp     rbx, 0x40",
    "je      0xb0fc8",
    "call    puts",
    "test    r14d, r14d",
    "lea     rax, [rdi+0x3]",
    "setne   dl",
    "test    dl, dl",
    "cmovne  rdi, rax",
    "test    r12d, r12d",
    "je      0xb1001",
    "cmp     byte [rbp-0x48 {var_50_1}], 0x0",
    "jne     0xb0ff7",
    "jmp     0xb0fe5",
    "lea     rax, [r15+0x3]",
    "cmp     byte [r15+0x2], 0x47",
    "cmove   r15, rax",
    "cmp     rbx, 0x40",
    "jne     0xb0f47",
    "lea     rcx, [rel data_122e02]",
    "mov     rdx, r15",
    "mov     edi, 0x2",
    "lea     rsi, [rel data_11fbd6[2]]  {\"%s%s\"}",
    "xor     eax, eax  {0x0}",
    "call    __printf_chk",
    "mov     rdx, r15",
    "lea     rcx, [rel data_1204ae[4]]  {\" \"}",
    "xor     eax, eax  {0x0}",
    "add     rbx, 0x1",
    "lea     rsi, [rel data_11fbd6[2]]  {\"%s%s\"}",
    "mov     edi, 0x2",
    "call    __printf_chk",
    "mov     r15, qword [r13+rbx*8]",
    "test    r15, r15",
    "je      0xb0eea",
    "xor     r12d, r12d  {0x0}",
    "jmp     0xb0e99",
    "mov     edi, 0xa",
    "call    putchar",
    "nop     dword [rax+rax]",
    "movzx   eax, byte [r15]",
    "cmp     al, 0x53",
    "jne     0xb0f08",
    "nop     "
  ]
}