{
  "address": "0x1035b0",
  "rules": [
    "write file on Windows/3772193b67764012b0d59bdbe7fe5d9a",
    "validate payment card number using luhn algorithm with no lookup table/62880de69d1941c9b68bc888f21444df",
    "contain loop",
    "read file on Linux"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14d, 0x1",
    "push    r13",
    "push    r12",
    "lea     r12, [rbp-0xc0]",
    "push    rbx",
    "sub     rsp, 0xb8",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "call    fileno",
    "lea     rbx, [rel _rl_caught_signal]",
    "mov     ecx, eax",
    "mov     r13d, eax",
    "lea     r15d, [rax+0x1]",
    "cdqe    ",
    "mov     qword [rbp-0xd8], rax",
    "shl     r14, cl",
    "mov     edi, dword [rbx]",
    "call    _rl_signal_handler",
    "jmp     0x10360f",
    "xor     eax, eax",
    "mov     ecx, 0x10",
    "mov     rdi, r12",
    "rep stosq qword [rdi]",
    "mov     rdi, qword [rbp-0xd8]",
    "call    __fdelt_chk",
    "lea     r9, [rel _rl_orig_sigset]",
    "xor     ecx, ecx",
    "xor     edx, edx",
    "xor     r8d, r8d",
    "mov     rsi, r12",
    "mov     edi, r15d",
    "or      qword [rbp+rax*8-0xc0], r14",
    "call    _rl_timeout_select",
    "test    eax, eax",
    "je      0x103710",
    "lea     rax, [rel rl_timeout_event_hook]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x103721",
    "js      0x103678",
    "lea     rax, [rel rl_readline_state]",
    "or      qword [rax], 0x4000000",
    "call    _rl_abort_internal",
    "{ Does not return }",
    "call    rax",
    "call    __errno_location",
    "mov     eax, dword [rax]",
    "cmp     eax, 0xb",
    "je      0x10373d",
    "lea     rsi, [rbp-0xc1]",
    "mov     edx, 0x1",
    "mov     edi, r13d",
    "call    read",
    "cmp     eax, 0x1",
    "je      0x1037b0",
    "xor     edx, edx",
    "xor     eax, eax",
    "mov     esi, 0x3",
    "mov     edi, r13d",
    "call    fcntl",
    "test    eax, eax",
    "js      0x103777",
    "cmp     eax, 0x4",
    "jne     0x10379d",
    "movzx   eax, byte [rbp-0xc1]",
    "jmp     0x10377c",
    "test    eax, eax",
    "je      0x103777",
    "mov     eax, 0xffffffff",
    "test    ah, 0x8",
    "je      0x103605",
    "lea     rdx, [rel rl_readline_state]",
    "mov     eax, 0xfffffffe",
    "test    byte [rdx], 0x8",
    "jne     0x10377c",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x1",
    "je      0x10379d",
    "mov     rdx, qword [rbp-0x38]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x1037b9",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0xb8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "jne     0x1036fd",
    "and     ah, 0xf7",
    "mov     esi, 0x4",
    "mov     edi, r13d",
    "mov     edx, eax",
    "xor     eax, eax",
    "call    fcntl",
    "test    eax, eax",
    "jns     0x103605",
    "jmp     0x103777",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0xf",
    "je      0x10379d",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x2",
    "je      0x1036d8",
    "mov     eax, dword [rbx]",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x3",
    "je      0x1036d8",
    "mov     edi, dword [rbx]",
    "call    _rl_signal_handler",
    "jmp     0x1036de",
    "lea     rax, [rel rl_signal_event_hook]",
    "mov     rax, qword [rax]",
    "test    rax, rax",
    "je      0x103605",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x14",
    "mov     eax, dword [rbx]",
    "je      0x1036da",
    "call    rax",
    "mov     eax, dword [rbx]",
    "test    eax, eax",
    "je      0x10360f",
    "test    eax, eax",
    "jne     0x103734",
    "cmp     eax, 0x1c",
    "mov     eax, dword [rbx]",
    "je      0x1036da",
    "cmp     eax, 0xe",
    "je      0x1036d8",
    "mov     eax, dword [rbx]",
    "cmp     eax, 0x1a",
    "jne     0x1036de",
    "nop     dword [rax]"
  ]
}